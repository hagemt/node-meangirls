{
  "stats": {
    "suites": 62,
    "tests": 92,
    "passes": 92,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-07T20:06:15.001Z",
    "end": "2021-12-07T20:06:15.033Z",
    "duration": 32,
    "testsRegistered": 92,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ca4aea90-f566-4915-9d56-ce08e18e6838",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "740c0849-3bd0-486d-b8d3-5aebe5c24472",
          "title": "GCounter",
          "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
          "file": "/test/GCounter.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14e768c5-ade4-4e4a-b6f5-8e35c4193a40",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
              "file": "/test/GCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "takes no arguments and starts value at zero",
                  "fullTitle": "GCounter constructor takes no arguments and starts value at zero",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": ";(() => new GCounter()).should.not.throw()\nnew GCounter().should.have.property('value', 0)",
                  "err": {},
                  "uuid": "da0693ef-6aba-42c8-a191-a45365b9d2d9",
                  "parentUUID": "14e768c5-ade4-4e4a-b6f5-8e35c4193a40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da0693ef-6aba-42c8-a191-a45365b9d2d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "199fcdeb-3c5d-4ae6-a6be-a1ebe4a3abf4",
              "title": "#update",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
              "file": "/test/GCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "increments the value of the counter",
                  "fullTitle": "GCounter #update increments the value of the counter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new GCounter()\ncounter.update()\ncounter.should.have.property('value', 1)",
                  "err": {},
                  "uuid": "98322565-349e-47d8-91f7-2204ccd5b640",
                  "parentUUID": "199fcdeb-3c5d-4ae6-a6be-a1ebe4a3abf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns the counter that was modified",
                  "fullTitle": "GCounter #update returns the counter that was modified",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new GCounter()\ncounter.update().should.equal(counter)",
                  "err": {},
                  "uuid": "3b2fd13d-e1f2-4d5f-8ac7-cd1246441175",
                  "parentUUID": "199fcdeb-3c5d-4ae6-a6be-a1ebe4a3abf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "accepts any positive Number, defaulting to 1",
                  "fullTitle": "GCounter #update accepts any positive Number, defaulting to 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const r = Math.random()\nconst counter = new GCounter()\ncounter.update(r)\ncounter.should.have.property('value', r)",
                  "err": {},
                  "uuid": "d43eb548-29de-4191-a32f-9173545d9137",
                  "parentUUID": "199fcdeb-3c5d-4ae6-a6be-a1ebe4a3abf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "accepts an \"actor\" Object, defaulting to null",
                  "fullTitle": "GCounter #update accepts an \"actor\" Object, defaulting to null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new GCounter()\ncounter.update(1, 'one')\ncounter.update(2, 'two')\ncounter.should.have.property('value', 3)",
                  "err": {},
                  "uuid": "91d0e3d2-9c22-4ac5-aebb-765b9949f2c2",
                  "parentUUID": "199fcdeb-3c5d-4ae6-a6be-a1ebe4a3abf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "does not accept negative Numbers, +/-Infinity, nor NaN",
                  "fullTitle": "GCounter #update does not accept negative Numbers, +/-Infinity, nor NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new GCounter()\n;(() => counter.update(-Math.random())).should.throw(Error)\n;(() => counter.update(+Infinity)).should.throw(Error)\n;(() => counter.update(-Infinity)).should.throw(Error)\n;(() => counter.update(NaN)).should.throw(Error)",
                  "err": {},
                  "uuid": "b3d9f2d2-5cd9-45d4-a33c-18369d5a8b70",
                  "parentUUID": "199fcdeb-3c5d-4ae6-a6be-a1ebe4a3abf4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98322565-349e-47d8-91f7-2204ccd5b640",
                "3b2fd13d-e1f2-4d5f-8ac7-cd1246441175",
                "d43eb548-29de-4191-a32f-9173545d9137",
                "91d0e3d2-9c22-4ac5-aebb-765b9949f2c2",
                "b3d9f2d2-5cd9-45d4-a33c-18369d5a8b70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4a4e166-336e-451c-b9c0-002a033089c8",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
              "file": "/test/GCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "allows use of JSON as a wire protocol",
                  "fullTitle": "GCounter static allows use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new GCounter()\nwhile (Math.random() < 0.5) one.update(Math.random())\nconst two = GCounter.fromJSON(GCounter.toJSON(one))\none.should.have.property('value', two.value)",
                  "err": {},
                  "uuid": "4d42d8c7-65ad-4109-b7b9-7dd2e1d8bee0",
                  "parentUUID": "e4a4e166-336e-451c-b9c0-002a033089c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "13476b4f-b951-4013-a599-7ffb0149c0be",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
                  "file": "/test/GCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a GCounter Object",
                      "fullTitle": "GCounter static fromJSON returns a GCounter Object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const json = { e: { test: Math.random() }, type: 'g-counter' }\nGCounter.fromJSON(json).should.have.property('value', json.e.test)",
                      "err": {},
                      "uuid": "cf7f8e3e-40a7-4621-a6de-13cbfd57e547",
                      "parentUUID": "13476b4f-b951-4013-a599-7ffb0149c0be",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if given invalid JSON",
                      "fullTitle": "GCounter static fromJSON throws if given invalid JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const unsafe = { null: Number.MIN_VALUE }\n;(() => GCounter.fromJSON()).should.throw()\n;(() => GCounter.fromJSON({ e: unsafe })).should.throw()",
                      "err": {},
                      "uuid": "800b1339-7771-49e5-9cef-01454b5f4969",
                      "parentUUID": "13476b4f-b951-4013-a599-7ffb0149c0be",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cf7f8e3e-40a7-4621-a6de-13cbfd57e547",
                    "800b1339-7771-49e5-9cef-01454b5f4969"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fc3ea11f-05df-42d9-8a5a-0027ab9fc3c4",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
                  "file": "/test/GCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines two GCounters, passed as arguments",
                      "fullTitle": "GCounter static merge combines two GCounters, passed as arguments",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new GCounter()\nconst two = new GCounter()\none.update(1, 'one')\ntwo.update(2, 'two')\nconst three = GCounter.merge(one, two)\nthree.should.be.instanceof(GCounter)\nthree.should.not.equal(one)\nthree.should.not.equal(two)\nthree.should.have.property('value', 3)",
                      "err": {},
                      "uuid": "57ffc152-fb64-4066-b2f3-25378e36a826",
                      "parentUUID": "fc3ea11f-05df-42d9-8a5a-0027ab9fc3c4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw if either argument is not a GCounter",
                      "fullTitle": "GCounter static merge will throw if either argument is not a GCounter",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new GCounter()\nconst two = new GCounter()\n;(() => GCounter.merge(one, null)).should.throw()\n;(() => GCounter.merge(null, two)).should.throw()",
                      "err": {},
                      "uuid": "d202f250-19a7-4689-ac9f-a2980c461fa1",
                      "parentUUID": "fc3ea11f-05df-42d9-8a5a-0027ab9fc3c4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "57ffc152-fb64-4066-b2f3-25378e36a826",
                    "d202f250-19a7-4689-ac9f-a2980c461fa1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ad77846b-2a79-4c7e-8ee7-e9030a31fcf7",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
                  "file": "/test/GCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a JSON Object",
                      "fullTitle": "GCounter static toJSON returns a JSON Object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const counter = new GCounter()\ncounter.update(1, 'one')\ncounter.update(2, 'two')\nconst json = GCounter.toJSON(counter)\njson.should.be.instanceof(Object)\njson.should.deepEqual({\n\te: { one: 1, two: 2 },\n\ttype: 'g-counter',\n})",
                      "err": {},
                      "uuid": "ca83c5dc-4b2e-4fb5-9557-0d326c9de800",
                      "parentUUID": "ad77846b-2a79-4c7e-8ee7-e9030a31fcf7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ca83c5dc-4b2e-4fb5-9557-0d326c9de800"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "4d42d8c7-65ad-4109-b7b9-7dd2e1d8bee0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a94b8226-c58b-43ae-9d26-6b025214296c",
          "title": "GSet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
          "file": "/test/GSet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8128728d-8b5a-4fb4-aa93-2d604ea46296",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates a Set-like Object",
                  "fullTitle": "GSet constructor creates a Set-like Object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new GSet().should.have.property('size', 0)\nconst array = Array.from({ length: 10 }, (_, i) => i)\nArray.from(new GSet(...array)).should.deepEqual(array)",
                  "err": {},
                  "uuid": "acb0f965-cf04-415b-adaf-872b40fbe42c",
                  "parentUUID": "8128728d-8b5a-4fb4-aa93-2d604ea46296",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "acb0f965-cf04-415b-adaf-872b40fbe42c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c967ca8-aad2-450d-9892-22631f5631d7",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true/false, indicating set membership",
                  "fullTitle": "GSet #contains returns true/false, indicating set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new GSet(1) // singleton\nset.contains(1).should.equal(true)\nset.contains(0).should.equal(false)",
                  "err": {},
                  "uuid": "13e26967-2d6c-4b85-b31e-5696cc1ca9e9",
                  "parentUUID": "8c967ca8-aad2-450d-9892-22631f5631d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13e26967-2d6c-4b85-b31e-5696cc1ca9e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7089c00-c651-48fb-8230-9c2c46d0f7d4",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "adds an element and returns the set modified",
                  "fullTitle": "GSet #insert adds an element and returns the set modified",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new GSet()\nset.insert(0).should.equal(set)\nset.should.have.property('size', 1)\nset.insert(1).should.have.property('size', 2)\nset.insert(1).should.have.property('size', 2)\nset.insert(2).should.have.property('size', 3)\nArray.from(set).should.deepEqual([0, 1, 2])",
                  "err": {},
                  "uuid": "df2322ef-80fc-4865-a21c-8c5cb91f54b5",
                  "parentUUID": "b7089c00-c651-48fb-8230-9c2c46d0f7d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df2322ef-80fc-4865-a21c-8c5cb91f54b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "740cae72-3e30-4b37-bd14-40f95a121cb1",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "throws if and only if the GSet contains said element",
                  "fullTitle": "GSet #remove throws if and only if the GSet contains said element",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new GSet(1) // singleton\nset.remove(0).should.equal(set) // no-op\n;(() => set.remove(1)).should.throw()",
                  "err": {},
                  "uuid": "d19fb3c1-0fa3-41a1-83a5-2a112091e0b2",
                  "parentUUID": "740cae72-3e30-4b37-bd14-40f95a121cb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d19fb3c1-0fa3-41a1-83a5-2a112091e0b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b23891ba-295c-42e3-aa57-49c9d5fd7e18",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "GSet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst json = { e: elements, type: 'g-set' } // holds 0-9\nGSet.toJSON(GSet.fromJSON(json)).should.deepEqual(json)",
                  "err": {},
                  "uuid": "2eed4ce9-ea1e-463b-8d75-6cfad2361d57",
                  "parentUUID": "b23891ba-295c-42e3-aa57-49c9d5fd7e18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "c2c6f818-2c67-4adc-a1ed-2f2b9cbbfee6",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
                  "file": "/test/GSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a GSet from JSON",
                      "fullTitle": "GSet static fromJSON returns a GSet from JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst set = GSet.fromJSON({ e: elements })\nset.should.be.instanceof(GSet)\nset.should.have.property('size', 10)\nArray.from(set).should.deepEqual(elements)",
                      "err": {},
                      "uuid": "95d10f8a-3bb6-4362-8e9c-e60207ccad63",
                      "parentUUID": "c2c6f818-2c67-4adc-a1ed-2f2b9cbbfee6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "95d10f8a-3bb6-4362-8e9c-e60207ccad63"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8515f0db-2510-498b-a36d-2973b7a904ce",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
                  "file": "/test/GSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns JSON from a GSet",
                      "fullTitle": "GSet static toJSON returns JSON from a GSet",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst json = GSet.toJSON(new GSet(...elements))\njson.should.be.instanceof(Object)\njson.should.deepEqual({ e: elements, type: 'g-set' })",
                      "err": {},
                      "uuid": "657e2fc1-7ed5-4882-9435-0990cd077b6a",
                      "parentUUID": "8515f0db-2510-498b-a36d-2973b7a904ce",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "657e2fc1-7ed5-4882-9435-0990cd077b6a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "77fce90a-3323-41c2-9981-a412c175fb23",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
                  "file": "/test/GSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a new GSet that combines two GSets",
                      "fullTitle": "GSet static merge returns a new GSet that combines two GSets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new GSet(1) // singleton\nconst two = new GSet(2) // singleton\nconst three = GSet.merge(one, two)\nthree.should.be.instanceof(GSet)\nthree.should.have.property('size', 2)\nArray.from(three).should.deepEqual([1, 2])",
                      "err": {},
                      "uuid": "43285463-2d52-4722-a538-d558d4ed9ccd",
                      "parentUUID": "77fce90a-3323-41c2-9981-a412c175fb23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws an Error if passed any non-GSet",
                      "fullTitle": "GSet static merge throws an Error if passed any non-GSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new GSet()\n;(() => GSet.merge(set, null)).should.throw()\n;(() => GSet.merge(null, set)).should.throw()",
                      "err": {},
                      "uuid": "6f12e1b0-e67f-4c57-9bf8-378f2299d2e0",
                      "parentUUID": "77fce90a-3323-41c2-9981-a412c175fb23",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "43285463-2d52-4722-a538-d558d4ed9ccd",
                    "6f12e1b0-e67f-4c57-9bf8-378f2299d2e0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "2eed4ce9-ea1e-463b-8d75-6cfad2361d57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e8fc4220-08fa-490c-9016-0c00cdd4f408",
          "title": "LWWESet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
          "file": "/test/LWWESet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "da253482-b3f1-4956-9ba0-85d5fd4bc053",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an empty Set-like object",
                  "fullTitle": "LWWESet constructor creates an empty Set-like object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.from(new LWWESet()).should.deepEqual([])",
                  "err": {},
                  "uuid": "20969657-bf09-4af2-9405-d0e273b59da7",
                  "parentUUID": "da253482-b3f1-4956-9ba0-85d5fd4bc053",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "perfers additions (a) over removals (r)",
                  "fullTitle": "LWWESet constructor perfers additions (a) over removals (r)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new LWWESet().should.have.property('bias', 'a')\n;(() => new LWWESet({ bias: 'r' })).should.throw()",
                  "err": {},
                  "uuid": "39b22a96-91ce-41e2-9a80-20f8a755fe9c",
                  "parentUUID": "da253482-b3f1-4956-9ba0-85d5fd4bc053",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can also be built from options and an initializer list",
                  "fullTitle": "LWWESet constructor can also be built from options and an initializer list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = { bias: 'a', zero: new Date() } // defaults\nconst elements = Array.from({ length: 10 }, (_, i) => i)\nconst set = new LWWESet(options, ...elements)\nArray.from(set).should.deepEqual(elements)",
                  "err": {},
                  "uuid": "f000798a-197b-4d3d-8679-2a25ebdefd49",
                  "parentUUID": "da253482-b3f1-4956-9ba0-85d5fd4bc053",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20969657-bf09-4af2-9405-d0e273b59da7",
                "39b22a96-91ce-41e2-9a80-20f8a755fe9c",
                "f000798a-197b-4d3d-8679-2a25ebdefd49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "458e1914-4e7c-4789-8328-bc62851c8e7f",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "determines set membership",
                  "fullTitle": "LWWESet #contains determines set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new LWWESet().contains(0).should.equal(false) // never added, nor removed\nconst options = { zero: new Date(0) } // use default bias, custom zero point\nnew LWWESet(null, 0).contains(0).should.equal(true) // default zero: new Date()\nnew LWWESet(options, 0)\n\t.remove(0, options.zero)\n\t.contains(0)\n\t.should.equal(true)\nnew LWWESet(options, 0)\n\t.remove(0, new Date(1))\n\t.contains(0)\n\t.should.equal(false)",
                  "err": {},
                  "uuid": "4f5bb922-663a-4039-af07-c0131530b23c",
                  "parentUUID": "458e1914-4e7c-4789-8328-bc62851c8e7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f5bb922-663a-4039-af07-c0131530b23c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9db356c2-1c0e-4ed0-8f90-fc928e0ca09b",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates set membership",
                  "fullTitle": "LWWESet #insert updates set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new LWWESet(null, 0)\nset.insert(0).insert(1).should.equal(set)\nArray.from(set).should.deepEqual([0, 1])",
                  "err": {},
                  "uuid": "0d411938-c4e3-4979-be8c-d489df7a2a49",
                  "parentUUID": "9db356c2-1c0e-4ed0-8f90-fc928e0ca09b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d411938-c4e3-4979-be8c-d489df7a2a49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77ffddc3-81e6-4bef-b975-20f14a62be9b",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates set membership",
                  "fullTitle": "LWWESet #remove updates set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = { zero: new Date(0) }\nconst set = new LWWESet(options, 0, 1).remove(1, new Date(1))\nset.remove(2).should.equal(set) // set remains singleton\nArray.from(set).should.deepEqual([0])",
                  "err": {},
                  "uuid": "4697cc2c-2156-48df-ae9b-4864c1845915",
                  "parentUUID": "77ffddc3-81e6-4bef-b975-20f14a62be9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4697cc2c-2156-48df-ae9b-4864c1845915"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c9939402-7247-4820-9e32-44962986598d",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "LWWESet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst e = elements.map((e) => [e, +new Date()])\nconst json = { bias: 'a', e, type: 'lww-e-set' }\nLWWESet.toJSON(LWWESet.fromJSON(json)).should.deepEqual(json)",
                  "err": {},
                  "uuid": "6d0ac271-9577-4510-af6b-aa6f475aa545",
                  "parentUUID": "c9939402-7247-4820-9e32-44962986598d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "0baa4704-d3c9-4227-ae09-855e3d692f54",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
                  "file": "/test/LWWESet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "converts JSON into a new LWWESet",
                      "fullTitle": "LWWESet static fromJSON converts JSON into a new LWWESet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst e = elements.map((e) => [e]) // added at same t=zero\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' })\nArray.from(set).should.deepEqual(elements)",
                      "err": {},
                      "uuid": "544ef5c8-3101-4320-a4bb-2f131a5def8c",
                      "parentUUID": "0baa4704-d3c9-4227-ae09-855e3d692f54",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "properly handles additions and removals",
                      "fullTitle": "LWWESet static fromJSON properly handles additions and removals",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const e = [\n\t[0, 0, 0],\n\t[1, 1, 2],\n\t[2, 2, 1],\n]\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' })\nArray.from(set).should.deepEqual([0, 2])",
                      "err": {},
                      "uuid": "8b3d74b2-3ef5-463f-99e4-7fb803f23189",
                      "parentUUID": "0baa4704-d3c9-4227-ae09-855e3d692f54",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw if given invalid JSON",
                      "fullTitle": "LWWESet static fromJSON will throw if given invalid JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [bias, type] = ['a', 'lww-e-set'] // valid\nconst invalid = (e = null) => ({ bias, e, type })\n;(() => LWWESet.fromJSON(invalid())).should.throw()\n;(() => LWWESet.fromJSON(invalid([[]]))).should.throw()\n;(() => LWWESet.fromJSON(invalid([null]))).should.throw()",
                      "err": {},
                      "uuid": "c0d60995-f908-4678-9038-2cfb8f7149a6",
                      "parentUUID": "0baa4704-d3c9-4227-ae09-855e3d692f54",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "544ef5c8-3101-4320-a4bb-2f131a5def8c",
                    "8b3d74b2-3ef5-463f-99e4-7fb803f23189",
                    "c0d60995-f908-4678-9038-2cfb8f7149a6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a46ebe1a-55a3-4d5c-8b15-e289c488fae3",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
                  "file": "/test/LWWESet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines exactly two LWWESets",
                      "fullTitle": "LWWESet static merge combines exactly two LWWESets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { zero: new Date(0) }\nconst one = new LWWESet(options, 1)\nconst two = new LWWESet(options, 2)\nconst three = LWWESet.merge(null, one, two)\nthree.should.be.instanceof(LWWESet)\nArray.from(three).should.deepEqual([1, 2])",
                      "err": {},
                      "uuid": "c1215cf0-048c-4efc-81fb-1c6366e8d65f",
                      "parentUUID": "a46ebe1a-55a3-4d5c-8b15-e289c488fae3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "properly handles additions and removals",
                      "fullTitle": "LWWESet static merge properly handles additions and removals",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { zero: new Date(0) }\nconst one = new LWWESet(options, 1, 2).remove(2, new Date(0))\nconst two = new LWWESet(options, 1).remove(1, new Date(1))\nArray.from(LWWESet.merge(null, one, two)).should.deepEqual([2])",
                      "err": {},
                      "uuid": "9a2825a4-1799-4684-80ee-067ce430e4f2",
                      "parentUUID": "a46ebe1a-55a3-4d5c-8b15-e289c488fae3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "follows last-write-wins sematics",
                      "fullTitle": "LWWESet static merge follows last-write-wins sematics",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new LWWESet({ zero: new Date(1) }, 0)\nconst two = new LWWESet({ zero: new Date(0) }, 0)\none.remove(0, new Date(1)).contains(0).should.equal(true)\ntwo.remove(0, new Date(2)).contains(0).should.equal(false)\nLWWESet.merge(null, one, two).contains(0).should.equal(false)\nLWWESet.merge(null, two, one).contains(0).should.equal(false)",
                      "err": {},
                      "uuid": "ab5339b9-5b49-45ef-a8d3-230eb96dc023",
                      "parentUUID": "a46ebe1a-55a3-4d5c-8b15-e289c488fae3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if either argument is not an LWWESet",
                      "fullTitle": "LWWESet static merge throws if either argument is not an LWWESet",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new LWWESet()\n;(() => LWWESet.merge(null, set, null)).should.throw()\n;(() => LWWESet.merge(null, null, set)).should.throw()",
                      "err": {},
                      "uuid": "d911d9e6-c805-4fb3-95dd-0716b4ad2888",
                      "parentUUID": "a46ebe1a-55a3-4d5c-8b15-e289c488fae3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c1215cf0-048c-4efc-81fb-1c6366e8d65f",
                    "9a2825a4-1799-4684-80ee-067ce430e4f2",
                    "ab5339b9-5b49-45ef-a8d3-230eb96dc023",
                    "d911d9e6-c805-4fb3-95dd-0716b4ad2888"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "589681bf-0ed7-40f7-a142-dbb1e1f5a737",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
                  "file": "/test/LWWESet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "converts a LWWESet into JSON",
                      "fullTitle": "LWWESet static toJSON converts a LWWESet into JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new LWWESet()\nset.insert(0, new Date(0))\nset.remove(0, new Date(0))\nconst json = LWWESet.toJSON(set)\njson.should.be.instanceof(Object)\nconst e = [[0, 0, 0]] // both added and removed 0 at t=0\njson.should.deepEqual({ bias: 'a', e, type: 'lww-e-set' })",
                      "err": {},
                      "uuid": "4946fec0-6ed7-43ec-9e0a-3553f0a5de41",
                      "parentUUID": "589681bf-0ed7-40f7-a142-dbb1e1f5a737",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4946fec0-6ed7-43ec-9e0a-3553f0a5de41"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "6d0ac271-9577-4510-af6b-aa6f475aa545"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a4dfa71a-406a-456c-bd60-630102a39612",
          "title": "MCSet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
          "file": "/test/MCSet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b0a8155b-3e55-4a06-aed4-49c9c6886d1b",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an empty Set-like Object",
                  "fullTitle": "MCSet constructor creates an empty Set-like Object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.from(new MCSet()).should.deepEqual([])",
                  "err": {},
                  "uuid": "67a7b682-0ef8-418b-a02d-2d2dafd2ebcd",
                  "parentUUID": "b0a8155b-3e55-4a06-aed4-49c9c6886d1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "acts very similar to the Set constructor",
                  "fullTitle": "MCSet constructor acts very similar to the Set constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const array = Array.from({ length: 10 }, (_, i) => i)\nArray.from(new MCSet(...array)).should.deepEqual(array)",
                  "err": {},
                  "uuid": "135f9d0a-d5bf-414b-ac36-f843fb814c4c",
                  "parentUUID": "b0a8155b-3e55-4a06-aed4-49c9c6886d1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67a7b682-0ef8-418b-a02d-2d2dafd2ebcd",
                "135f9d0a-d5bf-414b-ac36-f843fb814c4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fad895d6-4dd1-4994-8a8c-bd8f530caa64",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "determines set membership",
                  "fullTitle": "MCSet #contains determines set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new MCSet(0) // singleton\nset.contains(0).should.equal(true)\nset.contains(1).should.equal(false)",
                  "err": {},
                  "uuid": "0eea6ca9-9d95-4d15-a541-ac6e79e0798d",
                  "parentUUID": "fad895d6-4dd1-4994-8a8c-bd8f530caa64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0eea6ca9-9d95-4d15-a541-ac6e79e0798d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "047f5311-d269-4088-a339-4a3783113f87",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "adds elements to the set",
                  "fullTitle": "MCSet #insert adds elements to the set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new MCSet()\nArray.from(set).should.deepEqual([])\nset.insert(0).should.equal(set)\nArray.from(set).should.deepEqual([0])\nset.insert(0).insert(1)\nArray.from(set).should.deepEqual([0, 1])",
                  "err": {},
                  "uuid": "6d9e34c9-6f97-4d4f-ae0b-6265181c2941",
                  "parentUUID": "047f5311-d269-4088-a339-4a3783113f87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d9e34c9-6f97-4d4f-ae0b-6265181c2941"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcd09439-dcdd-4861-9f60-a49461bf3758",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removes elements from a set",
                  "fullTitle": "MCSet #remove removes elements from a set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new MCSet(0, 1)\nArray.from(set).should.deepEqual([0, 1])\nset.remove(0).should.equal(set)\nArray.from(set).should.deepEqual([1])\nset.remove(0).remove(1).remove(2)\nArray.from(set).should.deepEqual([])",
                  "err": {},
                  "uuid": "062cdb3c-99d0-4a17-b781-31ba4076a8ea",
                  "parentUUID": "fcd09439-dcdd-4861-9f60-a49461bf3758",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "062cdb3c-99d0-4a17-b781-31ba4076a8ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b8dcf569-a98a-40dd-87a6-93143fae5084",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "MCSet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst json = { e: elements.map((e) => [e, 1]), type: 'mc-set' }\nMCSet.toJSON(MCSet.fromJSON(json)).should.deepEqual(json)",
                  "err": {},
                  "uuid": "4dffcd3c-4d65-4193-9fb0-7a89eb594414",
                  "parentUUID": "b8dcf569-a98a-40dd-87a6-93143fae5084",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "dba8b40d-b87e-49bf-8288-c1d9d19c7bed",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
                  "file": "/test/MCSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a new MCSet from JSON",
                      "fullTitle": "MCSet static fromJSON returns a new MCSet from JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst json = { e: elements.map((e) => [e, 1]), type: 'mc-set' }\nconst set = MCSet.fromJSON(json)\nset.should.be.instanceof(MCSet)\nArray.from(set).should.deepEqual(elements)",
                      "err": {},
                      "uuid": "377ec066-ac39-41ac-bcb4-3a2cf72845d8",
                      "parentUUID": "dba8b40d-b87e-49bf-8288-c1d9d19c7bed",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw if given invalid JSON",
                      "fullTitle": "MCSet static fromJSON will throw if given invalid JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const invalid = [[0, 1 / 2]] // non-Integer count\n;(() => MCSet.fromJSON({ e: invalid })).should.throw()",
                      "err": {},
                      "uuid": "c18cf581-a7bc-4821-9c24-ad5dcb31c53e",
                      "parentUUID": "dba8b40d-b87e-49bf-8288-c1d9d19c7bed",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "377ec066-ac39-41ac-bcb4-3a2cf72845d8",
                    "c18cf581-a7bc-4821-9c24-ad5dcb31c53e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "564de67d-76fd-42fb-8c8e-098977132d40",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
                  "file": "/test/MCSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines two MCSets, returning a new MCSet",
                      "fullTitle": "MCSet static merge combines two MCSets, returning a new MCSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new MCSet(1) // singleton\nconst two = new MCSet(2) // singleton\nconst three = MCSet.merge(one, two)\nthree.should.be.instanceof(MCSet)\nArray.from(three).should.deepEqual([1, 2])",
                      "err": {},
                      "uuid": "f6bcaed4-82e1-4d15-b7b3-175be7107ecd",
                      "parentUUID": "564de67d-76fd-42fb-8c8e-098977132d40",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if either argument is not an MCSet",
                      "fullTitle": "MCSet static merge throws if either argument is not an MCSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new MCSet()\n;(() => MCSet.merge(set, null)).should.throw()\n;(() => MCSet.merge(null, set)).should.throw()",
                      "err": {},
                      "uuid": "ed280ff7-e407-44db-9294-3297de40a2cb",
                      "parentUUID": "564de67d-76fd-42fb-8c8e-098977132d40",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f6bcaed4-82e1-4d15-b7b3-175be7107ecd",
                    "ed280ff7-e407-44db-9294-3297de40a2cb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d3818d9c-49e1-4227-b2eb-d12a9da063f7",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
                  "file": "/test/MCSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns JSON from an MCSet",
                      "fullTitle": "MCSet static toJSON returns JSON from an MCSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst json = MCSet.toJSON(new MCSet(...elements))\njson.should.be.instanceof(Object)\nconst e = elements.map((e) => [e, 1])\njson.should.deepEqual({ e, type: 'mc-set' })",
                      "err": {},
                      "uuid": "515595a4-9394-4a7e-80bb-b27302f8b63d",
                      "parentUUID": "d3818d9c-49e1-4227-b2eb-d12a9da063f7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "515595a4-9394-4a7e-80bb-b27302f8b63d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "4dffcd3c-4d65-4193-9fb0-7a89eb594414"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ade7af3-59c4-44be-8838-b47481aa13d1",
          "title": "ORSet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
          "file": "/test/ORSet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2fc17b12-929f-4198-aa49-123026aa8cfe",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an empty Set-like object",
                  "fullTitle": "ORSet constructor creates an empty Set-like object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.from(new ORSet()).should.deepEqual([])",
                  "err": {},
                  "uuid": "8a4cd85e-2cf6-4301-9012-74ecfd99ce8c",
                  "parentUUID": "2fc17b12-929f-4198-aa49-123026aa8cfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a4cd85e-2cf6-4301-9012-74ecfd99ce8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8eaf866b-540c-445b-a5c4-b64d7c8c28ba",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "determines set membership",
                  "fullTitle": "ORSet #contains determines set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet(null, 0).insert(1).remove(1)\nset.contains(0).should.equal(true)\nset.contains(1).should.equal(false)\nset.contains(2).should.equal(false)",
                  "err": {},
                  "uuid": "e0061d35-36c4-4b1b-b82e-fd67f9d08e7a",
                  "parentUUID": "8eaf866b-540c-445b-a5c4-b64d7c8c28ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0061d35-36c4-4b1b-b82e-fd67f9d08e7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "41b14fd6-b917-40ab-85a9-e634b9b949c2",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates set membership",
                  "fullTitle": "ORSet #insert updates set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet()\nArray.from(set).should.deepEqual([])\nset.insert(0).should.equal(set)\nArray.from(set).should.deepEqual([0])",
                  "err": {},
                  "uuid": "9d85569a-ef43-4fe6-a802-51a966d1da2d",
                  "parentUUID": "41b14fd6-b917-40ab-85a9-e634b9b949c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "supports multiple tags",
                  "fullTitle": "ORSet #insert supports multiple tags",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet()\nset.insert(0, 'a') // tag: Symbol(0)\nArray.from(set).should.deepEqual([0])\nset.insert(0, 'b') // tag: Symbol(1)\nArray.from(set).should.deepEqual([0])",
                  "err": {},
                  "uuid": "4fd9d6bd-aa02-45d4-abb7-ea6cc8a4fef8",
                  "parentUUID": "41b14fd6-b917-40ab-85a9-e634b9b949c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d85569a-ef43-4fe6-a802-51a966d1da2d",
                "4fd9d6bd-aa02-45d4-abb7-ea6cc8a4fef8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0472cf5-7bc5-4b95-a9eb-b89315a87662",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates set membership",
                  "fullTitle": "ORSet #remove updates set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet(null, 0)\nArray.from(set).should.deepEqual([0])\nset.remove(0).should.equal(set)\nArray.from(set).should.deepEqual([])",
                  "err": {},
                  "uuid": "6870e532-1a97-4152-bacd-53731cfedcfa",
                  "parentUUID": "a0472cf5-7bc5-4b95-a9eb-b89315a87662",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "supports multiple tags",
                  "fullTitle": "ORSet #remove supports multiple tags",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet(null, 0).insert(1, 'a').insert(1, 'a')\nset.remove(0).remove(1, 'a').remove(2)\nArray.from(set).should.deepEqual([])",
                  "err": {},
                  "uuid": "a03ba1ae-d3b5-4255-8aa7-8545ffe87760",
                  "parentUUID": "a0472cf5-7bc5-4b95-a9eb-b89315a87662",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6870e532-1a97-4152-bacd-53731cfedcfa",
                "a03ba1ae-d3b5-4255-8aa7-8545ffe87760"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7dcd8c11-7dba-4b69-be5f-7625f150ba21",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "ORSet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst json = ORSet.toJSON(new ORSet(null, ...elements))\nArray.from(ORSet.fromJSON(json)).should.deepEqual(elements)",
                  "err": {},
                  "uuid": "633ffd34-4e16-402d-9143-45d8c8a96d1d",
                  "parentUUID": "7dcd8c11-7dba-4b69-be5f-7625f150ba21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "705b9d36-edaf-4854-8262-bc362e21ffd9",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
                  "file": "/test/ORSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "converts JSON into a new ORSet",
                      "fullTitle": "ORSet static fromJSON converts JSON into a new ORSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = ORSet.fromJSON({\n\te: [[0], [1, ['a']], [2, ['a'], ['a']], [3, ['a', 'b'], ['b', 'c']]],\n\ttype: 'or-set',\n})\nset.should.be.instanceof(ORSet)\nArray.from(set).should.deepEqual([0, 1, 3])",
                      "err": {},
                      "uuid": "a32d4bd8-b34c-4198-82db-7b48e8ceb314",
                      "parentUUID": "705b9d36-edaf-4854-8262-bc362e21ffd9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw, if the JSON is invalid",
                      "fullTitle": "ORSet static fromJSON will throw, if the JSON is invalid",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const invalid = (e = null) => ({ e, type: 'or-set' })\n;(() => ORSet.fromJSON(invalid())).should.throw()\n;(() => ORSet.fromJSON(invalid([[]]))).should.throw()\n;(() => ORSet.fromJSON(invalid([null]))).should.throw()",
                      "err": {},
                      "uuid": "3cc4c549-562c-4671-b232-f5432e14bb13",
                      "parentUUID": "705b9d36-edaf-4854-8262-bc362e21ffd9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a32d4bd8-b34c-4198-82db-7b48e8ceb314",
                    "3cc4c549-562c-4671-b232-f5432e14bb13"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "878dc777-1e66-462a-af34-020fa0f7e182",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
                  "file": "/test/ORSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines exactly two ORSets",
                      "fullTitle": "ORSet static merge combines exactly two ORSets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new ORSet().insert(1).remove(1)\nconst two = new ORSet().insert(2).remove(2)\nconst three = ORSet.merge(null, one, two)\nthree.should.be.instanceof(ORSet)\nArray.from(three).should.deepEqual([])",
                      "err": {},
                      "uuid": "249da2f4-9e0c-4e65-b587-04658560c74b",
                      "parentUUID": "878dc777-1e66-462a-af34-020fa0f7e182",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if either argument is not an ORSet",
                      "fullTitle": "ORSet static merge throws if either argument is not an ORSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new ORSet()\n;(() => ORSet.merge(null, set, null)).should.throw()\n;(() => ORSet.merge(null, null, set)).should.throw()",
                      "err": {},
                      "uuid": "21326685-ecfa-4b43-a851-da9d76fe962a",
                      "parentUUID": "878dc777-1e66-462a-af34-020fa0f7e182",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "249da2f4-9e0c-4e65-b587-04658560c74b",
                    "21326685-ecfa-4b43-a851-da9d76fe962a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "af7d8ce3-a3ed-4d1f-9aa2-0cf8594e9efe",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
                  "file": "/test/ORSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "converts a ORSet into JSON",
                      "fullTitle": "ORSet static toJSON converts a ORSet into JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst set = new ORSet(null, ...elements)\nfor (const e of elements) set.remove(e)\nconst json = ORSet.toJSON(set)\njson.should.be.instanceof(Object)\nconst e = elements.map((e) => [e, ['0'], ['0']])\njson.should.deepEqual({ e, type: 'or-set' })",
                      "err": {},
                      "uuid": "6b894b24-e86a-4cf9-9b4d-2a01220e6b13",
                      "parentUUID": "af7d8ce3-a3ed-4d1f-9aa2-0cf8594e9efe",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6b894b24-e86a-4cf9-9b4d-2a01220e6b13"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "633ffd34-4e16-402d-9143-45d8c8a96d1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d7ff7491-ac5f-4676-bbcb-4863927df1e4",
          "title": "PNCounter",
          "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
          "file": "/test/PNCounter.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9925b5a1-02ac-4989-b177-e5009a930b29",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
              "file": "/test/PNCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "takes no arguments and starts value at zero",
                  "fullTitle": "PNCounter constructor takes no arguments and starts value at zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": ";(() => new PNCounter()).should.not.throw()\nnew PNCounter().should.have.property('value', 0)",
                  "err": {},
                  "uuid": "679c0d1a-541a-4ff1-bc85-3672d1ab1c5a",
                  "parentUUID": "9925b5a1-02ac-4989-b177-e5009a930b29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "679c0d1a-541a-4ff1-bc85-3672d1ab1c5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "510ea9dd-ce87-4599-85c8-02f63ad74f0a",
              "title": "#update",
              "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
              "file": "/test/PNCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "increments the value of the counter",
                  "fullTitle": "PNCounter #update increments the value of the counter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new PNCounter()\ncounter.update()\ncounter.should.have.property('value', 1)",
                  "err": {},
                  "uuid": "2a36cc68-30a7-4cdb-80dd-5a62539930ba",
                  "parentUUID": "510ea9dd-ce87-4599-85c8-02f63ad74f0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns the counter that was modified",
                  "fullTitle": "PNCounter #update returns the counter that was modified",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new PNCounter()\ncounter.update().should.equal(counter)",
                  "err": {},
                  "uuid": "0e33a996-0ade-4887-8a27-43d659541f56",
                  "parentUUID": "510ea9dd-ce87-4599-85c8-02f63ad74f0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "accepts any Number, defaulting to 1",
                  "fullTitle": "PNCounter #update accepts any Number, defaulting to 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const positive = +Math.random()\nconst negative = -Math.random()\nconst counter = new PNCounter()\ncounter.update(negative)\ncounter.should.have.property('value', negative)\ncounter.update(positive)\ncounter.should.have.property('value', positive + negative)",
                  "err": {},
                  "uuid": "9967ba21-942a-4cd8-99f1-b0017feb0ae0",
                  "parentUUID": "510ea9dd-ce87-4599-85c8-02f63ad74f0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "accepts an \"actor\" Object, defaulting to null",
                  "fullTitle": "PNCounter #update accepts an \"actor\" Object, defaulting to null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new PNCounter()\ncounter.update(1, 'one')\ncounter.update(2, 'two')\ncounter.should.have.property('value', 3)",
                  "err": {},
                  "uuid": "018eda56-8efa-47d1-b5d4-d0b5aa982979",
                  "parentUUID": "510ea9dd-ce87-4599-85c8-02f63ad74f0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "does not accept +/-Infinity, nor NaN",
                  "fullTitle": "PNCounter #update does not accept +/-Infinity, nor NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new PNCounter()\n;(() => counter.update(+Infinity)).should.throw()\n;(() => counter.update(-Infinity)).should.throw()\n;(() => counter.update(NaN)).should.throw()",
                  "err": {},
                  "uuid": "e6bc849e-e20a-48a2-8bf0-b7747e2ccb78",
                  "parentUUID": "510ea9dd-ce87-4599-85c8-02f63ad74f0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a36cc68-30a7-4cdb-80dd-5a62539930ba",
                "0e33a996-0ade-4887-8a27-43d659541f56",
                "9967ba21-942a-4cd8-99f1-b0017feb0ae0",
                "018eda56-8efa-47d1-b5d4-d0b5aa982979",
                "e6bc849e-e20a-48a2-8bf0-b7747e2ccb78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3fda5491-6455-47c5-8faa-48392372b509",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
              "file": "/test/PNCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "allows use of JSON as a wire protocol",
                  "fullTitle": "PNCounter static allows use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new PNCounter()\nwhile (Math.random() < 0.5) one.update(Math.random())\nconst two = PNCounter.fromJSON(PNCounter.toJSON(one))\none.should.have.property('value', two.value)",
                  "err": {},
                  "uuid": "5203bffe-1315-4340-b6df-858a37df6dfa",
                  "parentUUID": "3fda5491-6455-47c5-8faa-48392372b509",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "69d05551-f87c-4c8d-817a-9e7d953c3057",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
                  "file": "/test/PNCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a PNCounter Object",
                      "fullTitle": "PNCounter static fromJSON returns a PNCounter Object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const json = {\n\tp: { one: Math.random(), two: Math.random() },\n\tn: { one: Math.random(), two: Math.random() },\n\ttype: 'pn-counter',\n}\nconst counter = PNCounter.fromJSON(json)\ncounter.should.be.instanceof(PNCounter)\nconst sum1 = json.p.one + json.p.two\nconst sum2 = json.n.one + json.n.two\ncounter.should.have.property('value', sum1 - sum2)",
                      "err": {},
                      "uuid": "f7712ca0-98e2-421e-bba6-9edbf26190b1",
                      "parentUUID": "69d05551-f87c-4c8d-817a-9e7d953c3057",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if given invalid JSON",
                      "fullTitle": "PNCounter static fromJSON throws if given invalid JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const unsafe = { null: Number.MIN_VALUE }\n;(() => PNCounter.fromJSON()).should.throw()\n;(() => PNCounter.fromJSON({ p: unsafe, n: {} })).should.throw()\n;(() => PNCounter.fromJSON({ p: {}, n: unsafe })).should.throw()",
                      "err": {},
                      "uuid": "b2a3d27e-a0d7-4a57-8d33-3761a59f8dac",
                      "parentUUID": "69d05551-f87c-4c8d-817a-9e7d953c3057",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f7712ca0-98e2-421e-bba6-9edbf26190b1",
                    "b2a3d27e-a0d7-4a57-8d33-3761a59f8dac"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "57ae0289-b941-47bd-9dda-2675ff3fd4b7",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
                  "file": "/test/PNCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines two PNCounters",
                      "fullTitle": "PNCounter static merge combines two PNCounters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new PNCounter()\nconst two = new PNCounter()\none.update(1, 'positive')\none.update(-2, 'negative')\ntwo.update(-1, 'negative')\ntwo.update(2, 'positive')\nconst three = PNCounter.merge(one, two)\nthree.should.be.instanceof(PNCounter)\nthree.should.not.equal(one)\nthree.should.not.equal(two)\nthree.should.have.property('value', 0)",
                      "err": {},
                      "uuid": "0a1a615f-9976-4ad8-b3d0-8ae8a7be935e",
                      "parentUUID": "57ae0289-b941-47bd-9dda-2675ff3fd4b7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw if either is not a PNCounter",
                      "fullTitle": "PNCounter static merge will throw if either is not a PNCounter",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new PNCounter()\nconst two = new PNCounter()\n;(() => PNCounter.merge(one, null)).should.throw()\n;(() => PNCounter.merge(null, two)).should.throw()",
                      "err": {},
                      "uuid": "fcbb23a3-a7b6-4865-9825-bd357e4aeffe",
                      "parentUUID": "57ae0289-b941-47bd-9dda-2675ff3fd4b7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0a1a615f-9976-4ad8-b3d0-8ae8a7be935e",
                    "fcbb23a3-a7b6-4865-9825-bd357e4aeffe"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "79ca75c8-92fb-4b93-9857-0decda7a1427",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
                  "file": "/test/PNCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a JSON Object",
                      "fullTitle": "PNCounter static toJSON returns a JSON Object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const counter = new PNCounter()\ncounter.update(1, 'one')\ncounter.update(-2, 'two')\nconst json = PNCounter.toJSON(counter)\njson.should.be.instanceof(Object)\njson.should.deepEqual({\n\tn: { two: 2 },\n\tp: { one: 1 },\n\ttype: 'pn-counter',\n})",
                      "err": {},
                      "uuid": "dab3064a-2914-485b-a4ca-885e4d40ba52",
                      "parentUUID": "79ca75c8-92fb-4b93-9857-0decda7a1427",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dab3064a-2914-485b-a4ca-885e4d40ba52"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "5203bffe-1315-4340-b6df-858a37df6dfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b65c376d-4452-41b2-9695-94ddba689e68",
          "title": "TwoPSet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
          "file": "/test/TwoPSet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab82c24b-23f6-445a-871f-1bc64588438a",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an empty Set-like Object",
                  "fullTitle": "TwoPSet constructor creates an empty Set-like Object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new TwoPSet().should.have.property('size', 0)\nconst elements = Array.from({ length: 10 }, (_, i) => i)\nconst set = new TwoPSet(...elements)\nset.should.have.property('size', elements.length)\nArray.from(set).should.deepEqual(elements)",
                  "err": {},
                  "uuid": "cc700017-f222-46a1-a673-c17ea525dff5",
                  "parentUUID": "ab82c24b-23f6-445a-871f-1bc64588438a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc700017-f222-46a1-a673-c17ea525dff5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe46e072-eacc-4711-bff9-7628e13ecefc",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "determines set membership",
                  "fullTitle": "TwoPSet #contains determines set membership",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new TwoPSet(0) // singleton\nset.contains(0).should.equal(true)\nset.contains(1).should.equal(false)",
                  "err": {},
                  "uuid": "fbcf4de9-ffed-445c-9884-587bbbe8a4ad",
                  "parentUUID": "fe46e072-eacc-4711-bff9-7628e13ecefc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbcf4de9-ffed-445c-9884-587bbbe8a4ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0c7ebb9-1f7c-4adf-9c0e-f17f3e1b89a5",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add an element to the set",
                  "fullTitle": "TwoPSet #insert add an element to the set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new TwoPSet()\nset.insert(0).should.equal(set)\nset.should.have.property('size', 1)\nset.insert(1).should.have.property('size', 2)\nset.insert(1).should.have.property('size', 2)\nset.insert(2).should.have.property('size', 3)\nArray.from(set).should.deepEqual([0, 1, 2])",
                  "err": {},
                  "uuid": "2526316d-70e1-470f-9b3e-b177204357aa",
                  "parentUUID": "c0c7ebb9-1f7c-4adf-9c0e-f17f3e1b89a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2526316d-70e1-470f-9b3e-b177204357aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcfaaa8c-2a0d-4233-96fb-ba5c3c3b05cd",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removes an element from the set",
                  "fullTitle": "TwoPSet #remove removes an element from the set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new TwoPSet()\nset.remove(0).should.equal(set)\nset.should.have.property('size', 0)\nset.insert(0)\nset.should.have.property('size', 1)\nset.remove(0)\nset.should.have.property('size', 0)",
                  "err": {},
                  "uuid": "d6848103-cc9b-4660-8ea6-fd7cd05baf47",
                  "parentUUID": "fcfaaa8c-2a0d-4233-96fb-ba5c3c3b05cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6848103-cc9b-4660-8ea6-fd7cd05baf47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b5f177f-8141-4e20-809a-dd3ad227d40d",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "TwoPSet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst json = { a: elements, r: elements, type: '2p-set' }\nTwoPSet.toJSON(TwoPSet.fromJSON(json)).should.deepEqual(json)",
                  "err": {},
                  "uuid": "058c3337-278c-4d01-a083-6b140bbdea36",
                  "parentUUID": "1b5f177f-8141-4e20-809a-dd3ad227d40d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b95dca0a-7cd2-4d3d-8698-7cd091223be4",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
                  "file": "/test/TwoPSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns JSON",
                      "fullTitle": "TwoPSet static toJSON returns JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new TwoPSet(1, 2).remove(1)\nconst json = TwoPSet.toJSON(set)\njson.should.be.instanceof(Object)\njson.should.deepEqual({\n\ta: [1, 2],\n\tr: [1],\n\ttype: '2p-set',\n})",
                      "err": {},
                      "uuid": "1dd3ca28-4b7d-4847-8d5e-848b641729df",
                      "parentUUID": "b95dca0a-7cd2-4d3d-8698-7cd091223be4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1dd3ca28-4b7d-4847-8d5e-848b641729df"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fe5cec2b-d455-44de-9e81-de634e93048f",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
                  "file": "/test/TwoPSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines two TwoPSets",
                      "fullTitle": "TwoPSet static merge combines two TwoPSets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new TwoPSet(1, 2).remove(2)\nconst two = new TwoPSet(3, 4).remove(3)\nconst three = TwoPSet.merge(one, two)\nthree.should.be.instanceof(TwoPSet)\nArray.from(three).should.deepEqual([1, 4])",
                      "err": {},
                      "uuid": "6b6586db-c4ad-4f68-8cf8-7cd47a6c8901",
                      "parentUUID": "fe5cec2b-d455-44de-9e81-de634e93048f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if passed non-TwoPSets",
                      "fullTitle": "TwoPSet static merge throws if passed non-TwoPSets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new TwoPSet()\n;(() => TwoPSet.merge(set, null)).should.throw()\n;(() => TwoPSet.merge(null, set)).should.throw()",
                      "err": {},
                      "uuid": "e79fb67e-a29e-4e2b-85c6-3e43a1ad771f",
                      "parentUUID": "fe5cec2b-d455-44de-9e81-de634e93048f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6b6586db-c4ad-4f68-8cf8-7cd47a6c8901",
                    "e79fb67e-a29e-4e2b-85c6-3e43a1ad771f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "143aef33-a9fd-4a39-b168-9dc4701c3fa6",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
                  "file": "/test/TwoPSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a TwoPSet",
                      "fullTitle": "TwoPSet static fromJSON returns a TwoPSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i)\nconst json = { a: elements, r: elements, type: '2p-set' }\nconst set = TwoPSet.fromJSON(json)\nset.should.be.instanceof(TwoPSet)\nset.should.have.property('size', 0)",
                      "err": {},
                      "uuid": "534dc83d-9882-4041-9cee-a31b3698c752",
                      "parentUUID": "143aef33-a9fd-4a39-b168-9dc4701c3fa6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "534dc83d-9882-4041-9cee-a31b3698c752"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "058c3337-278c-4d01-a083-6b140bbdea36"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0e61c528-fb88-4304-83aa-996a877794d0",
          "title": "Global module exports",
          "fullFile": "/Users/teh/Code/node-meangirls/test/meangirls.spec.js",
          "file": "/test/meangirls.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f633e318-a871-40f7-a1fc-63c4a78388a7",
              "title": "meangirls.merge",
              "fullFile": "/Users/teh/Code/node-meangirls/test/meangirls.spec.js",
              "file": "/test/meangirls.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"meangirls.merge\"",
                  "fullTitle": "Global module exports meangirls.merge \"before all\" hook in \"meangirls.merge\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "test.gc = new meangirls.GCounter()\ntest.pn = new meangirls.PNCounter()\ntest.gs = new meangirls.GSet()",
                  "err": {},
                  "uuid": "7c1ede22-852e-4087-a1be-9df88b80bbc4",
                  "parentUUID": "f633e318-a871-40f7-a1fc-63c4a78388a7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can join two or more GCounters",
                  "fullTitle": "Global module exports meangirls.merge can join two or more GCounters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new meangirls.GCounter().update()\nconst two = new meangirls.GCounter().update()\nconst result = meangirls.merge(test.gc, one, two)\nresult.should.be.instanceof(meangirls.GCounter)",
                  "err": {},
                  "uuid": "433a47c5-3633-42df-9bf1-001200725f52",
                  "parentUUID": "f633e318-a871-40f7-a1fc-63c4a78388a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can join two or more PNCounters",
                  "fullTitle": "Global module exports meangirls.merge can join two or more PNCounters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new meangirls.PNCounter().update()\nconst two = new meangirls.PNCounter().update()\nconst result = meangirls.merge(test.pn, one, two)\nresult.should.be.instanceof(meangirls.PNCounter)",
                  "err": {},
                  "uuid": "b7d0aeec-072b-428e-b0be-6c8632a89076",
                  "parentUUID": "f633e318-a871-40f7-a1fc-63c4a78388a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can join two or more GSets",
                  "fullTitle": "Global module exports meangirls.merge can join two or more GSets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new meangirls.GSet().insert(1)\nconst two = new meangirls.GSet().insert(2)\nconst result = meangirls.merge(test.gs, one, two)\nresult.should.be.instanceof(meangirls.GSet)",
                  "err": {},
                  "uuid": "8c7db870-a08a-4c8f-a829-c4355b5fb6b7",
                  "parentUUID": "f633e318-a871-40f7-a1fc-63c4a78388a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws if passed not exactly one kind of CRDT",
                  "fullTitle": "Global module exports meangirls.merge throws if passed not exactly one kind of CRDT",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": ";(() => meangirls.merge()).should.throw()\n;(() => meangirls.merge(null)).should.throw()\n;(() => meangirls.merge(null, test.gs)).should.throw()\n;(() => meangirls.merge(test.gc, test.pn, test.gs)).should.throw()",
                  "err": {},
                  "uuid": "aa233498-c2b4-447a-8875-86779b34836f",
                  "parentUUID": "f633e318-a871-40f7-a1fc-63c4a78388a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "433a47c5-3633-42df-9bf1-001200725f52",
                "b7d0aeec-072b-428e-b0be-6c8632a89076",
                "8c7db870-a08a-4c8f-a829-c4355b5fb6b7",
                "aa233498-c2b4-447a-8875-86779b34836f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a0f6639-4cf3-4992-91b7-d24de4725095",
              "title": "meangirls.parse",
              "fullFile": "/Users/teh/Code/node-meangirls/test/meangirls.spec.js",
              "file": "/test/meangirls.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can obtain a GCounter from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain a GCounter from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = meangirls.parse({\n\te: {}, // empty\n\ttype: 'g-counter',\n})\ncounter.should.be.instanceof(meangirls.GCounter)",
                  "err": {},
                  "uuid": "69522a4c-0e33-4ed1-a7e3-d8139f1b1423",
                  "parentUUID": "8a0f6639-4cf3-4992-91b7-d24de4725095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain a PNCounter from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain a PNCounter from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = meangirls.parse({\n\tp: {}, // empty\n\tn: {}, // empty\n\ttype: 'pn-counter',\n})\ncounter.should.be.instanceof(meangirls.PNCounter)",
                  "err": {},
                  "uuid": "5e76a5e8-5eb7-4886-b4d3-3ba04de7cd11",
                  "parentUUID": "8a0f6639-4cf3-4992-91b7-d24de4725095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain a GSet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain a GSet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'g-set',\n})\nset.should.be.instanceof(meangirls.GSet)",
                  "err": {},
                  "uuid": "939d52b0-4eff-4423-b6f2-e6031d2d3aa0",
                  "parentUUID": "8a0f6639-4cf3-4992-91b7-d24de4725095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain a TwoPSet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain a TwoPSet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\ta: [], // empty\n\tr: [], // empty\n\ttype: '2p-set',\n})\nset.should.be.instanceof(meangirls.TwoPSet)",
                  "err": {},
                  "uuid": "171c1d8e-b557-4c72-a71b-edc598a00c60",
                  "parentUUID": "8a0f6639-4cf3-4992-91b7-d24de4725095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain an LWWESet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain an LWWESet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'lww-e-set',\n})\nset.should.be.instanceof(meangirls.LWWESet)",
                  "err": {},
                  "uuid": "c537c590-565c-4cf9-8d53-04ae561d4063",
                  "parentUUID": "8a0f6639-4cf3-4992-91b7-d24de4725095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain an ORSet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain an ORSet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'or-set',\n})\nset.should.be.instanceof(meangirls.ORSet)",
                  "err": {},
                  "uuid": "81693fb7-250e-4d9e-8fff-a3a54859c569",
                  "parentUUID": "8a0f6639-4cf3-4992-91b7-d24de4725095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain an MCSet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain an MCSet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'mc-set',\n})\nset.should.be.instanceof(meangirls.MCSet)",
                  "err": {},
                  "uuid": "0a05d44f-3944-4bbf-897f-6b7fdf3aa001",
                  "parentUUID": "8a0f6639-4cf3-4992-91b7-d24de4725095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws TypeError if passed invalid JSON",
                  "fullTitle": "Global module exports meangirls.parse throws TypeError if passed invalid JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": ";(() => meangirls.parse(/* null */)).should.throw(TypeError)\n;(() => meangirls.parse({ type: 'unknown' })).should.throw(TypeError)",
                  "err": {},
                  "uuid": "dca4ef84-0976-4b55-aaf1-d7e887082aee",
                  "parentUUID": "8a0f6639-4cf3-4992-91b7-d24de4725095",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69522a4c-0e33-4ed1-a7e3-d8139f1b1423",
                "5e76a5e8-5eb7-4886-b4d3-3ba04de7cd11",
                "939d52b0-4eff-4423-b6f2-e6031d2d3aa0",
                "171c1d8e-b557-4c72-a71b-edc598a00c60",
                "c537c590-565c-4cf9-8d53-04ae561d4063",
                "81693fb7-250e-4d9e-8fff-a3a54859c569",
                "0a05d44f-3944-4bbf-897f-6b7fdf3aa001",
                "dca4ef84-0976-4b55-aaf1-d7e887082aee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "docs",
        "reportFilename": "index"
      },
      "version": "6.0.1"
    }
  }
}