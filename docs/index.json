{
  "stats": {
    "suites": 62,
    "tests": 92,
    "passes": 92,
    "pending": 0,
    "failures": 0,
    "start": "2017-01-05T22:55:14.154Z",
    "end": "2017-01-05T22:55:14.231Z",
    "duration": 77,
    "testsRegistered": 92,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "GCounter",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "takes no arguments and starts value at zero",
                "fullTitle": "GCounter constructor takes no arguments and starts value at zero",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(() => new GCounter()).should.not.throw();\nnew GCounter().should.have.property('value', 0);",
                "err": {},
                "isRoot": false,
                "uuid": "9051cb88-0479-488a-98a5-25267a0dc9e1",
                "parentUUID": "116b192c-3c64-4fc6-a4b1-0af91ebb5e06",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/GCounter.spec.js",
            "uuid": "116b192c-3c64-4fc6-a4b1-0af91ebb5e06",
            "fullFile": "/home/twi/Code/meangirls/test/GCounter.spec.js",
            "passes": [
              {
                "title": "takes no arguments and starts value at zero",
                "fullTitle": "GCounter constructor takes no arguments and starts value at zero",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(() => new GCounter()).should.not.throw();\nnew GCounter().should.have.property('value', 0);",
                "err": {},
                "isRoot": false,
                "uuid": "9051cb88-0479-488a-98a5-25267a0dc9e1",
                "parentUUID": "116b192c-3c64-4fc6-a4b1-0af91ebb5e06",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "#update",
            "suites": [],
            "tests": [
              {
                "title": "increments the value of the counter",
                "fullTitle": "GCounter #update increments the value of the counter",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new GCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
                "err": {},
                "isRoot": false,
                "uuid": "12a9a97d-98ac-4f38-95ef-f2af2a5e9fef",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              },
              {
                "title": "returns the counter that was modified",
                "fullTitle": "GCounter #update returns the counter that was modified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new GCounter();\ncounter.update().should.equal(counter);",
                "err": {},
                "isRoot": false,
                "uuid": "e60f41b2-63b7-4a98-9287-f4b2f16ed6dc",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              },
              {
                "title": "accepts any positive Number, defaulting to 1",
                "fullTitle": "GCounter #update accepts any positive Number, defaulting to 1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const r = Math.random();\nconst counter = new GCounter()\ncounter.update(r);\ncounter.should.have.property('value', r);",
                "err": {},
                "isRoot": false,
                "uuid": "c1e87d0f-74cc-437d-a2b4-fa4b83815ddb",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              },
              {
                "title": "accepts an \"actor\" Object, defaulting to null",
                "fullTitle": "GCounter #update accepts an \"actor\" Object, defaulting to null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
                "err": {},
                "isRoot": false,
                "uuid": "848506a9-a1f8-45a3-8945-ca89d4d51625",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              },
              {
                "title": "does not accept negative Numbers, +/-Infinity, nor NaN",
                "fullTitle": "GCounter #update does not accept negative Numbers, +/-Infinity, nor NaN",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new GCounter();\n(() => counter.update(-Math.random())).should.throw(Error);\n(() => counter.update(+Infinity)).should.throw(Error);\n(() => counter.update(-Infinity)).should.throw(Error);\n(() => counter.update(NaN)).should.throw(Error);",
                "err": {},
                "isRoot": false,
                "uuid": "6e422d80-c575-4a04-a6e5-c9954aa94e16",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/GCounter.spec.js",
            "uuid": "89642965-b7f8-4168-82a2-7c99a281d4d3",
            "fullFile": "/home/twi/Code/meangirls/test/GCounter.spec.js",
            "passes": [
              {
                "title": "increments the value of the counter",
                "fullTitle": "GCounter #update increments the value of the counter",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new GCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
                "err": {},
                "isRoot": false,
                "uuid": "12a9a97d-98ac-4f38-95ef-f2af2a5e9fef",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              },
              {
                "title": "returns the counter that was modified",
                "fullTitle": "GCounter #update returns the counter that was modified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new GCounter();\ncounter.update().should.equal(counter);",
                "err": {},
                "isRoot": false,
                "uuid": "e60f41b2-63b7-4a98-9287-f4b2f16ed6dc",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              },
              {
                "title": "accepts any positive Number, defaulting to 1",
                "fullTitle": "GCounter #update accepts any positive Number, defaulting to 1",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const r = Math.random();\nconst counter = new GCounter()\ncounter.update(r);\ncounter.should.have.property('value', r);",
                "err": {},
                "isRoot": false,
                "uuid": "c1e87d0f-74cc-437d-a2b4-fa4b83815ddb",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              },
              {
                "title": "accepts an \"actor\" Object, defaulting to null",
                "fullTitle": "GCounter #update accepts an \"actor\" Object, defaulting to null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
                "err": {},
                "isRoot": false,
                "uuid": "848506a9-a1f8-45a3-8945-ca89d4d51625",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              },
              {
                "title": "does not accept negative Numbers, +/-Infinity, nor NaN",
                "fullTitle": "GCounter #update does not accept negative Numbers, +/-Infinity, nor NaN",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new GCounter();\n(() => counter.update(-Math.random())).should.throw(Error);\n(() => counter.update(+Infinity)).should.throw(Error);\n(() => counter.update(-Infinity)).should.throw(Error);\n(() => counter.update(NaN)).should.throw(Error);",
                "err": {},
                "isRoot": false,
                "uuid": "6e422d80-c575-4a04-a6e5-c9954aa94e16",
                "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "static",
            "suites": [
              {
                "title": "fromJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns a GCounter Object",
                    "fullTitle": "static fromJSON returns a GCounter Object",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const json = { e: { test: Math.random() }, type: 'g-counter' };\nGCounter.fromJSON(json).should.have.property('value', json.e.test);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "002677f7-bbc5-4c84-9270-012c667307b7",
                    "parentUUID": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
                    "skipped": false
                  },
                  {
                    "title": "throws if given invalid JSON",
                    "fullTitle": "static fromJSON throws if given invalid JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => GCounter.fromJSON()).should.throw();\n(() => GCounter.fromJSON({ e: unsafe })).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7161e46f-5241-40ca-bccd-6ae9f980a1d4",
                    "parentUUID": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/GCounter.spec.js",
                "uuid": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
                "fullFile": "/home/twi/Code/meangirls/test/GCounter.spec.js",
                "passes": [
                  {
                    "title": "returns a GCounter Object",
                    "fullTitle": "static fromJSON returns a GCounter Object",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const json = { e: { test: Math.random() }, type: 'g-counter' };\nGCounter.fromJSON(json).should.have.property('value', json.e.test);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "002677f7-bbc5-4c84-9270-012c667307b7",
                    "parentUUID": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
                    "skipped": false
                  },
                  {
                    "title": "throws if given invalid JSON",
                    "fullTitle": "static fromJSON throws if given invalid JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => GCounter.fromJSON()).should.throw();\n(() => GCounter.fromJSON({ e: unsafe })).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7161e46f-5241-40ca-bccd-6ae9f980a1d4",
                    "parentUUID": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2
              },
              {
                "title": "merge",
                "suites": [],
                "tests": [
                  {
                    "title": "combines two GCounters, passed as arguments",
                    "fullTitle": "static merge combines two GCounters, passed as arguments",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new GCounter();\nconst two = new GCounter();\none.update(1, 'one');\ntwo.update(2, 'two');\nconst three = GCounter.merge(one, two);\nthree.should.be.instanceof(GCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 3);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5cd3b577-bc98-4378-87a9-ffd2f62fe641",
                    "parentUUID": "10cd6d21-f227-4370-b284-e0ba8c52665d",
                    "skipped": false
                  },
                  {
                    "title": "will throw if either argument is not a GCounter",
                    "fullTitle": "static merge will throw if either argument is not a GCounter",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new GCounter();\nconst two = new GCounter();\n(() => GCounter.merge(one, null)).should.throw();\n(() => GCounter.merge(null, two)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c62f205-7374-48bd-b2ac-14a304761abd",
                    "parentUUID": "10cd6d21-f227-4370-b284-e0ba8c52665d",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/GCounter.spec.js",
                "uuid": "10cd6d21-f227-4370-b284-e0ba8c52665d",
                "fullFile": "/home/twi/Code/meangirls/test/GCounter.spec.js",
                "passes": [
                  {
                    "title": "combines two GCounters, passed as arguments",
                    "fullTitle": "static merge combines two GCounters, passed as arguments",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new GCounter();\nconst two = new GCounter();\none.update(1, 'one');\ntwo.update(2, 'two');\nconst three = GCounter.merge(one, two);\nthree.should.be.instanceof(GCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 3);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5cd3b577-bc98-4378-87a9-ffd2f62fe641",
                    "parentUUID": "10cd6d21-f227-4370-b284-e0ba8c52665d",
                    "skipped": false
                  },
                  {
                    "title": "will throw if either argument is not a GCounter",
                    "fullTitle": "static merge will throw if either argument is not a GCounter",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new GCounter();\nconst two = new GCounter();\n(() => GCounter.merge(one, null)).should.throw();\n(() => GCounter.merge(null, two)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c62f205-7374-48bd-b2ac-14a304761abd",
                    "parentUUID": "10cd6d21-f227-4370-b284-e0ba8c52665d",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2
              },
              {
                "title": "toJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns a JSON Object",
                    "fullTitle": "static toJSON returns a JSON Object",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\nconst json = GCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\te: { one: 1, two: 2 },\n\ttype: 'g-counter',\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03129908-f73d-4091-953a-da6067d71f65",
                    "parentUUID": "bd8f32c9-fc10-47c8-afd3-da4867459060",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/GCounter.spec.js",
                "uuid": "bd8f32c9-fc10-47c8-afd3-da4867459060",
                "fullFile": "/home/twi/Code/meangirls/test/GCounter.spec.js",
                "passes": [
                  {
                    "title": "returns a JSON Object",
                    "fullTitle": "static toJSON returns a JSON Object",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\nconst json = GCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\te: { one: 1, two: 2 },\n\ttype: 'g-counter',\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03129908-f73d-4091-953a-da6067d71f65",
                    "parentUUID": "bd8f32c9-fc10-47c8-afd3-da4867459060",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [
              {
                "title": "allows use of JSON as a wire protocol",
                "fullTitle": "GCounter static allows use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new GCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = GCounter.fromJSON(GCounter.toJSON(one));\none.should.have.property('value', two.value);",
                "err": {},
                "isRoot": false,
                "uuid": "cf11f418-b073-429d-985e-aca23a5f8ff0",
                "parentUUID": "34220350-0d79-44cd-9544-0e7654c17bfd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/GCounter.spec.js",
            "uuid": "34220350-0d79-44cd-9544-0e7654c17bfd",
            "fullFile": "/home/twi/Code/meangirls/test/GCounter.spec.js",
            "passes": [
              {
                "title": "allows use of JSON as a wire protocol",
                "fullTitle": "GCounter static allows use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new GCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = GCounter.fromJSON(GCounter.toJSON(one));\none.should.have.property('value', two.value);",
                "err": {},
                "isRoot": false,
                "uuid": "cf11f418-b073-429d-985e-aca23a5f8ff0",
                "parentUUID": "34220350-0d79-44cd-9544-0e7654c17bfd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/GCounter.spec.js",
        "uuid": "dea2d125-383f-429f-b5c1-838cab24d5b5",
        "fullFile": "/home/twi/Code/meangirls/test/GCounter.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "GSet",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "creates a Set-like Object",
                "fullTitle": "GSet constructor creates a Set-like Object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new GSet().should.have.property('size', 0);\nconst array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new GSet(...array)).should.deepEqual(array);",
                "err": {},
                "isRoot": false,
                "uuid": "2302cf13-1f4a-410a-a372-1f53ec867c1b",
                "parentUUID": "58293d6c-f66f-49dc-a935-a50a3bbbbb7f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/GSet.spec.js",
            "uuid": "58293d6c-f66f-49dc-a935-a50a3bbbbb7f",
            "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
            "passes": [
              {
                "title": "creates a Set-like Object",
                "fullTitle": "GSet constructor creates a Set-like Object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new GSet().should.have.property('size', 0);\nconst array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new GSet(...array)).should.deepEqual(array);",
                "err": {},
                "isRoot": false,
                "uuid": "2302cf13-1f4a-410a-a372-1f53ec867c1b",
                "parentUUID": "58293d6c-f66f-49dc-a935-a50a3bbbbb7f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#contains",
            "suites": [],
            "tests": [
              {
                "title": "returns true/false, indicating set membership",
                "fullTitle": "GSet #contains returns true/false, indicating set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new GSet(1); // singleton\nset.contains(1).should.equal(true);\nset.contains(0).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "e0b5f380-3169-45a6-85ef-bde9380aa99e",
                "parentUUID": "d0ed6804-9aeb-49aa-87e0-366d3424409c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/GSet.spec.js",
            "uuid": "d0ed6804-9aeb-49aa-87e0-366d3424409c",
            "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
            "passes": [
              {
                "title": "returns true/false, indicating set membership",
                "fullTitle": "GSet #contains returns true/false, indicating set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new GSet(1); // singleton\nset.contains(1).should.equal(true);\nset.contains(0).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "e0b5f380-3169-45a6-85ef-bde9380aa99e",
                "parentUUID": "d0ed6804-9aeb-49aa-87e0-366d3424409c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#insert",
            "suites": [],
            "tests": [
              {
                "title": "adds an element and returns the set modified",
                "fullTitle": "GSet #insert adds an element and returns the set modified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new GSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
                "err": {},
                "isRoot": false,
                "uuid": "3c6b3ad4-8a2b-47f4-9a21-3e31de1e4aaa",
                "parentUUID": "b62d6c06-1764-48ac-9273-36c89a02aa29",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/GSet.spec.js",
            "uuid": "b62d6c06-1764-48ac-9273-36c89a02aa29",
            "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
            "passes": [
              {
                "title": "adds an element and returns the set modified",
                "fullTitle": "GSet #insert adds an element and returns the set modified",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new GSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
                "err": {},
                "isRoot": false,
                "uuid": "3c6b3ad4-8a2b-47f4-9a21-3e31de1e4aaa",
                "parentUUID": "b62d6c06-1764-48ac-9273-36c89a02aa29",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#remove",
            "suites": [],
            "tests": [
              {
                "title": "throws if and only if the GSet contains said element",
                "fullTitle": "GSet #remove throws if and only if the GSet contains said element",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new GSet(1); // singleton\nset.remove(0).should.equal(set); // no-op\n(() => set.remove(1)).should.throw();",
                "err": {},
                "isRoot": false,
                "uuid": "7538ee85-e136-40a0-8bf3-6cbb6a9d87f2",
                "parentUUID": "ece32abf-a0c5-4352-9161-d012361b6102",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/GSet.spec.js",
            "uuid": "ece32abf-a0c5-4352-9161-d012361b6102",
            "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
            "passes": [
              {
                "title": "throws if and only if the GSet contains said element",
                "fullTitle": "GSet #remove throws if and only if the GSet contains said element",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new GSet(1); // singleton\nset.remove(0).should.equal(set); // no-op\n(() => set.remove(1)).should.throw();",
                "err": {},
                "isRoot": false,
                "uuid": "7538ee85-e136-40a0-8bf3-6cbb6a9d87f2",
                "parentUUID": "ece32abf-a0c5-4352-9161-d012361b6102",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "static",
            "suites": [
              {
                "title": "fromJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns a GSet from JSON",
                    "fullTitle": "static fromJSON returns a GSet from JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = GSet.fromJSON({ e: elements });\nset.should.be.instanceof(GSet);\nset.should.have.property('size', 10);\nArray.from(set).should.deepEqual(elements);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4b82eaf-7d65-426a-8b4a-ef1eeeb2daee",
                    "parentUUID": "5c8c8a85-13e9-4f10-8c0f-4b557945cf35",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/GSet.spec.js",
                "uuid": "5c8c8a85-13e9-4f10-8c0f-4b557945cf35",
                "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
                "passes": [
                  {
                    "title": "returns a GSet from JSON",
                    "fullTitle": "static fromJSON returns a GSet from JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = GSet.fromJSON({ e: elements });\nset.should.be.instanceof(GSet);\nset.should.have.property('size', 10);\nArray.from(set).should.deepEqual(elements);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f4b82eaf-7d65-426a-8b4a-ef1eeeb2daee",
                    "parentUUID": "5c8c8a85-13e9-4f10-8c0f-4b557945cf35",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "toJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns JSON from a GSet",
                    "fullTitle": "static toJSON returns JSON from a GSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = GSet.toJSON(new GSet(...elements));\njson.should.be.instanceof(Object);\njson.should.deepEqual({ e: elements, type: 'g-set' });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b858ce62-fb00-46ef-9ddc-602470451323",
                    "parentUUID": "4c6f5fc4-dab3-406a-8166-f73011a51c22",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/GSet.spec.js",
                "uuid": "4c6f5fc4-dab3-406a-8166-f73011a51c22",
                "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
                "passes": [
                  {
                    "title": "returns JSON from a GSet",
                    "fullTitle": "static toJSON returns JSON from a GSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = GSet.toJSON(new GSet(...elements));\njson.should.be.instanceof(Object);\njson.should.deepEqual({ e: elements, type: 'g-set' });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b858ce62-fb00-46ef-9ddc-602470451323",
                    "parentUUID": "4c6f5fc4-dab3-406a-8166-f73011a51c22",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "merge",
                "suites": [],
                "tests": [
                  {
                    "title": "returns a new GSet that combines two GSets",
                    "fullTitle": "static merge returns a new GSet that combines two GSets",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new GSet(1); // singleton\nconst two = new GSet(2); // singleton\nconst three = GSet.merge(one, two);\nthree.should.be.instanceof(GSet);\nthree.should.have.property('size', 2);\nArray.from(three).should.deepEqual([1, 2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03660977-28f5-483a-b720-1b67d85b8dba",
                    "parentUUID": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
                    "skipped": false
                  },
                  {
                    "title": "throws an Error if passed any non-GSet",
                    "fullTitle": "static merge throws an Error if passed any non-GSet",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new GSet();\n(() => GSet.merge(set, null)).should.throw();\n(() => GSet.merge(null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "965354e5-b4b4-4120-a3b9-ae9d1b048351",
                    "parentUUID": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/GSet.spec.js",
                "uuid": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
                "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
                "passes": [
                  {
                    "title": "returns a new GSet that combines two GSets",
                    "fullTitle": "static merge returns a new GSet that combines two GSets",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new GSet(1); // singleton\nconst two = new GSet(2); // singleton\nconst three = GSet.merge(one, two);\nthree.should.be.instanceof(GSet);\nthree.should.have.property('size', 2);\nArray.from(three).should.deepEqual([1, 2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "03660977-28f5-483a-b720-1b67d85b8dba",
                    "parentUUID": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
                    "skipped": false
                  },
                  {
                    "title": "throws an Error if passed any non-GSet",
                    "fullTitle": "static merge throws an Error if passed any non-GSet",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new GSet();\n(() => GSet.merge(set, null)).should.throw();\n(() => GSet.merge(null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "965354e5-b4b4-4120-a3b9-ae9d1b048351",
                    "parentUUID": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              }
            ],
            "tests": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "GSet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements, type: 'g-set' }; // holds 0-9\nGSet.toJSON(GSet.fromJSON(json)).should.deepEqual(json);",
                "err": {},
                "isRoot": false,
                "uuid": "3289bd73-0dd9-4a74-97a9-5704efde7c03",
                "parentUUID": "613a54b9-45b5-4e12-8d06-2d6ea7e79ca4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/GSet.spec.js",
            "uuid": "613a54b9-45b5-4e12-8d06-2d6ea7e79ca4",
            "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
            "passes": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "GSet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements, type: 'g-set' }; // holds 0-9\nGSet.toJSON(GSet.fromJSON(json)).should.deepEqual(json);",
                "err": {},
                "isRoot": false,
                "uuid": "3289bd73-0dd9-4a74-97a9-5704efde7c03",
                "parentUUID": "613a54b9-45b5-4e12-8d06-2d6ea7e79ca4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/GSet.spec.js",
        "uuid": "ebcd46ec-b0f5-495d-a40b-71d489306461",
        "fullFile": "/home/twi/Code/meangirls/test/GSet.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "LWWESet",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "creates an empty Set-like object",
                "fullTitle": "LWWESet constructor creates an empty Set-like object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Array.from(new LWWESet()).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "8a391f3d-1bb5-4cf5-8586-4df9310794d1",
                "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
                "skipped": false
              },
              {
                "title": "perfers additions (a) over removals (r)",
                "fullTitle": "LWWESet constructor perfers additions (a) over removals (r)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new LWWESet().should.have.property('bias', 'a');\n(() => new LWWESet({ bias: 'r' })).should.throw();",
                "err": {},
                "isRoot": false,
                "uuid": "08443284-a930-4cef-b75c-b7e9573320ce",
                "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
                "skipped": false
              },
              {
                "title": "can also be built from options and an initializer list",
                "fullTitle": "LWWESet constructor can also be built from options and an initializer list",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const options = { bias: 'a', zero: new Date() }; // defaults\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new LWWESet(options, ...elements);\nArray.from(set).should.deepEqual(elements);",
                "err": {},
                "isRoot": false,
                "uuid": "595676e4-e7c8-4a1e-b451-d8bd6208068c",
                "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/LWWESet.spec.js",
            "uuid": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
            "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
            "passes": [
              {
                "title": "creates an empty Set-like object",
                "fullTitle": "LWWESet constructor creates an empty Set-like object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Array.from(new LWWESet()).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "8a391f3d-1bb5-4cf5-8586-4df9310794d1",
                "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
                "skipped": false
              },
              {
                "title": "perfers additions (a) over removals (r)",
                "fullTitle": "LWWESet constructor perfers additions (a) over removals (r)",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new LWWESet().should.have.property('bias', 'a');\n(() => new LWWESet({ bias: 'r' })).should.throw();",
                "err": {},
                "isRoot": false,
                "uuid": "08443284-a930-4cef-b75c-b7e9573320ce",
                "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
                "skipped": false
              },
              {
                "title": "can also be built from options and an initializer list",
                "fullTitle": "LWWESet constructor can also be built from options and an initializer list",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const options = { bias: 'a', zero: new Date() }; // defaults\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new LWWESet(options, ...elements);\nArray.from(set).should.deepEqual(elements);",
                "err": {},
                "isRoot": false,
                "uuid": "595676e4-e7c8-4a1e-b451-d8bd6208068c",
                "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#contains",
            "suites": [],
            "tests": [
              {
                "title": "determines set membership",
                "fullTitle": "LWWESet #contains determines set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new LWWESet().contains(0).should.equal(false); // never added, nor removed\nconst options = { zero: new Date(0) }; // use default bias, custom zero point\nnew LWWESet(null, 0).contains(0).should.equal(true); // default zero: new Date()\nnew LWWESet(options, 0).remove(0, options.zero).contains(0).should.equal(true);\nnew LWWESet(options, 0).remove(0, new Date(1)).contains(0).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "85cb045c-2c0f-4959-b5b2-70894fe351ee",
                "parentUUID": "36d1fcee-a1f7-4809-bd8a-397f813f3591",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/LWWESet.spec.js",
            "uuid": "36d1fcee-a1f7-4809-bd8a-397f813f3591",
            "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
            "passes": [
              {
                "title": "determines set membership",
                "fullTitle": "LWWESet #contains determines set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new LWWESet().contains(0).should.equal(false); // never added, nor removed\nconst options = { zero: new Date(0) }; // use default bias, custom zero point\nnew LWWESet(null, 0).contains(0).should.equal(true); // default zero: new Date()\nnew LWWESet(options, 0).remove(0, options.zero).contains(0).should.equal(true);\nnew LWWESet(options, 0).remove(0, new Date(1)).contains(0).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "85cb045c-2c0f-4959-b5b2-70894fe351ee",
                "parentUUID": "36d1fcee-a1f7-4809-bd8a-397f813f3591",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#insert",
            "suites": [],
            "tests": [
              {
                "title": "updates set membership",
                "fullTitle": "LWWESet #insert updates set membership",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new LWWESet(null, 0);\nset.insert(0).insert(1).should.equal(set);\nArray.from(set).should.deepEqual([0, 1]);",
                "err": {},
                "isRoot": false,
                "uuid": "7e3445d7-1b97-4693-9544-c79cfa7b488d",
                "parentUUID": "0a3394e6-2dd2-403f-8413-ef8eb3ef236c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/LWWESet.spec.js",
            "uuid": "0a3394e6-2dd2-403f-8413-ef8eb3ef236c",
            "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
            "passes": [
              {
                "title": "updates set membership",
                "fullTitle": "LWWESet #insert updates set membership",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new LWWESet(null, 0);\nset.insert(0).insert(1).should.equal(set);\nArray.from(set).should.deepEqual([0, 1]);",
                "err": {},
                "isRoot": false,
                "uuid": "7e3445d7-1b97-4693-9544-c79cfa7b488d",
                "parentUUID": "0a3394e6-2dd2-403f-8413-ef8eb3ef236c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#remove",
            "suites": [],
            "tests": [
              {
                "title": "updates set membership",
                "fullTitle": "LWWESet #remove updates set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const options = { zero: new Date(0) };\nconst set = new LWWESet(options, 0, 1).remove(1, new Date(1));\nset.remove(2).should.equal(set); // set remains singleton\nArray.from(set).should.deepEqual([0]);",
                "err": {},
                "isRoot": false,
                "uuid": "f797e93d-fd14-43ff-a5ea-503b65abb81c",
                "parentUUID": "5e8b7499-830e-46bb-962a-764b8caffbc3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/LWWESet.spec.js",
            "uuid": "5e8b7499-830e-46bb-962a-764b8caffbc3",
            "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
            "passes": [
              {
                "title": "updates set membership",
                "fullTitle": "LWWESet #remove updates set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const options = { zero: new Date(0) };\nconst set = new LWWESet(options, 0, 1).remove(1, new Date(1));\nset.remove(2).should.equal(set); // set remains singleton\nArray.from(set).should.deepEqual([0]);",
                "err": {},
                "isRoot": false,
                "uuid": "f797e93d-fd14-43ff-a5ea-503b65abb81c",
                "parentUUID": "5e8b7499-830e-46bb-962a-764b8caffbc3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "static",
            "suites": [
              {
                "title": "fromJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "converts JSON into a new LWWESet",
                    "fullTitle": "static fromJSON converts JSON into a new LWWESet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e]); // added at same t=zero\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual(elements);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8bb73f20-c85e-4d27-9bba-7a8ebed09c9a",
                    "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
                    "skipped": false
                  },
                  {
                    "title": "properly handles additions and removals",
                    "fullTitle": "static fromJSON properly handles additions and removals",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const e = [[0, 0, 0], [1, 1, 2], [2, 2, 1]];\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual([0, 2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c23d83e-9438-42ef-bebe-fee8ee54f0c3",
                    "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
                    "skipped": false
                  },
                  {
                    "title": "will throw if given invalid JSON",
                    "fullTitle": "static fromJSON will throw if given invalid JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const [bias, type] = ['a', 'lww-e-set']; // valid\nconst invalid = (e = null) => ({ bias, e, type });\n(() => LWWESet.fromJSON(invalid())).should.throw();\n(() => LWWESet.fromJSON(invalid([[]]))).should.throw();\n(() => LWWESet.fromJSON(invalid([null]))).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dcb7de01-99e8-454b-a930-42d606d7c871",
                    "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/LWWESet.spec.js",
                "uuid": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
                "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
                "passes": [
                  {
                    "title": "converts JSON into a new LWWESet",
                    "fullTitle": "static fromJSON converts JSON into a new LWWESet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e]); // added at same t=zero\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual(elements);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8bb73f20-c85e-4d27-9bba-7a8ebed09c9a",
                    "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
                    "skipped": false
                  },
                  {
                    "title": "properly handles additions and removals",
                    "fullTitle": "static fromJSON properly handles additions and removals",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const e = [[0, 0, 0], [1, 1, 2], [2, 2, 1]];\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual([0, 2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c23d83e-9438-42ef-bebe-fee8ee54f0c3",
                    "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
                    "skipped": false
                  },
                  {
                    "title": "will throw if given invalid JSON",
                    "fullTitle": "static fromJSON will throw if given invalid JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const [bias, type] = ['a', 'lww-e-set']; // valid\nconst invalid = (e = null) => ({ bias, e, type });\n(() => LWWESet.fromJSON(invalid())).should.throw();\n(() => LWWESet.fromJSON(invalid([[]]))).should.throw();\n(() => LWWESet.fromJSON(invalid([null]))).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dcb7de01-99e8-454b-a930-42d606d7c871",
                    "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "merge",
                "suites": [],
                "tests": [
                  {
                    "title": "combines exactly two LWWESets",
                    "fullTitle": "static merge combines exactly two LWWESets",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1);\nconst two = new LWWESet(options, 2);\nconst three = LWWESet.merge(null, one, two);\nthree.should.be.instanceof(LWWESet);\nArray.from(three).should.deepEqual([1, 2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4ed6f59-d3d7-4cd5-9360-fa8b27a44d68",
                    "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                    "skipped": false
                  },
                  {
                    "title": "properly handles additions and removals",
                    "fullTitle": "static merge properly handles additions and removals",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1, 2).remove(2, new Date(0));\nconst two = new LWWESet(options, 1).remove(1, new Date(1));\nArray.from(LWWESet.merge(null, one, two)).should.deepEqual([2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21218508-4c37-4ac1-b4df-bb06124ffde9",
                    "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                    "skipped": false
                  },
                  {
                    "title": "follows last-write-wins sematics",
                    "fullTitle": "static merge follows last-write-wins sematics",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new LWWESet({ zero: new Date(1) }, 0);\nconst two = new LWWESet({ zero: new Date(0) }, 0);\none.remove(0, new Date(1)).contains(0).should.equal(true);\ntwo.remove(0, new Date(2)).contains(0).should.equal(false);\nLWWESet.merge(null, one, two).contains(0).should.equal(false);\nLWWESet.merge(null, two, one).contains(0).should.equal(false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccfbba1f-e5f8-40bd-8b1c-6376f2ac5e09",
                    "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                    "skipped": false
                  },
                  {
                    "title": "throws if either argument is not an LWWESet",
                    "fullTitle": "static merge throws if either argument is not an LWWESet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new LWWESet();\n(() => LWWESet.merge(null, set, null)).should.throw();\n(() => LWWESet.merge(null, null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e73f7e2-a56e-4e32-8abb-244693abdeb3",
                    "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/LWWESet.spec.js",
                "uuid": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
                "passes": [
                  {
                    "title": "combines exactly two LWWESets",
                    "fullTitle": "static merge combines exactly two LWWESets",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1);\nconst two = new LWWESet(options, 2);\nconst three = LWWESet.merge(null, one, two);\nthree.should.be.instanceof(LWWESet);\nArray.from(three).should.deepEqual([1, 2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4ed6f59-d3d7-4cd5-9360-fa8b27a44d68",
                    "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                    "skipped": false
                  },
                  {
                    "title": "properly handles additions and removals",
                    "fullTitle": "static merge properly handles additions and removals",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1, 2).remove(2, new Date(0));\nconst two = new LWWESet(options, 1).remove(1, new Date(1));\nArray.from(LWWESet.merge(null, one, two)).should.deepEqual([2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "21218508-4c37-4ac1-b4df-bb06124ffde9",
                    "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                    "skipped": false
                  },
                  {
                    "title": "follows last-write-wins sematics",
                    "fullTitle": "static merge follows last-write-wins sematics",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new LWWESet({ zero: new Date(1) }, 0);\nconst two = new LWWESet({ zero: new Date(0) }, 0);\none.remove(0, new Date(1)).contains(0).should.equal(true);\ntwo.remove(0, new Date(2)).contains(0).should.equal(false);\nLWWESet.merge(null, one, two).contains(0).should.equal(false);\nLWWESet.merge(null, two, one).contains(0).should.equal(false);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ccfbba1f-e5f8-40bd-8b1c-6376f2ac5e09",
                    "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                    "skipped": false
                  },
                  {
                    "title": "throws if either argument is not an LWWESet",
                    "fullTitle": "static merge throws if either argument is not an LWWESet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new LWWESet();\n(() => LWWESet.merge(null, set, null)).should.throw();\n(() => LWWESet.merge(null, null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e73f7e2-a56e-4e32-8abb-244693abdeb3",
                    "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2
              },
              {
                "title": "toJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "converts a LWWESet into JSON",
                    "fullTitle": "static toJSON converts a LWWESet into JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new LWWESet();\nset.insert(0, new Date(0));\nset.remove(0, new Date(0));\nconst json = LWWESet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = [[0, 0, 0]]; // both added and removed 0 at t=0\njson.should.deepEqual({ bias: 'a', e, type: 'lww-e-set' });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e7dce2d-85ae-4994-8976-d7a2c5f2c8d5",
                    "parentUUID": "2c83ece5-f82f-4d9f-b6a5-34b4c36fde6c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/LWWESet.spec.js",
                "uuid": "2c83ece5-f82f-4d9f-b6a5-34b4c36fde6c",
                "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
                "passes": [
                  {
                    "title": "converts a LWWESet into JSON",
                    "fullTitle": "static toJSON converts a LWWESet into JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new LWWESet();\nset.insert(0, new Date(0));\nset.remove(0, new Date(0));\nconst json = LWWESet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = [[0, 0, 0]]; // both added and removed 0 at t=0\njson.should.deepEqual({ bias: 'a', e, type: 'lww-e-set' });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e7dce2d-85ae-4994-8976-d7a2c5f2c8d5",
                    "parentUUID": "2c83ece5-f82f-4d9f-b6a5-34b4c36fde6c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              }
            ],
            "tests": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "LWWESet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e, +new Date()]);\nconst json = { bias: 'a', e, type: 'lww-e-set' };\nLWWESet.toJSON(LWWESet.fromJSON(json)).should.deepEqual(json);",
                "err": {},
                "isRoot": false,
                "uuid": "4c272466-fbed-4c19-8814-d388b5f3d2d6",
                "parentUUID": "445877de-d973-4d9e-a7d7-d4ccc22fc667",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/LWWESet.spec.js",
            "uuid": "445877de-d973-4d9e-a7d7-d4ccc22fc667",
            "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
            "passes": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "LWWESet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e, +new Date()]);\nconst json = { bias: 'a', e, type: 'lww-e-set' };\nLWWESet.toJSON(LWWESet.fromJSON(json)).should.deepEqual(json);",
                "err": {},
                "isRoot": false,
                "uuid": "4c272466-fbed-4c19-8814-d388b5f3d2d6",
                "parentUUID": "445877de-d973-4d9e-a7d7-d4ccc22fc667",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/LWWESet.spec.js",
        "uuid": "ad9e4091-a61a-4a0a-97fd-67426e62260a",
        "fullFile": "/home/twi/Code/meangirls/test/LWWESet.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "MCSet",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "creates an empty Set-like Object",
                "fullTitle": "MCSet constructor creates an empty Set-like Object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Array.from(new MCSet()).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "9cd665fd-471d-4cd7-b436-85f17e6cf5ad",
                "parentUUID": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
                "skipped": false
              },
              {
                "title": "acts very similar to the Set constructor",
                "fullTitle": "MCSet constructor acts very similar to the Set constructor",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new MCSet(...array)).should.deepEqual(array);",
                "err": {},
                "isRoot": false,
                "uuid": "88603ffa-4827-4d43-9335-e0f631c8691c",
                "parentUUID": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/MCSet.spec.js",
            "uuid": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
            "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
            "passes": [
              {
                "title": "creates an empty Set-like Object",
                "fullTitle": "MCSet constructor creates an empty Set-like Object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Array.from(new MCSet()).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "9cd665fd-471d-4cd7-b436-85f17e6cf5ad",
                "parentUUID": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
                "skipped": false
              },
              {
                "title": "acts very similar to the Set constructor",
                "fullTitle": "MCSet constructor acts very similar to the Set constructor",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new MCSet(...array)).should.deepEqual(array);",
                "err": {},
                "isRoot": false,
                "uuid": "88603ffa-4827-4d43-9335-e0f631c8691c",
                "parentUUID": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#contains",
            "suites": [],
            "tests": [
              {
                "title": "determines set membership",
                "fullTitle": "MCSet #contains determines set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new MCSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "d0930ddf-7a59-4e8e-ba3b-0e0ea0711648",
                "parentUUID": "a621115d-e24f-48b4-aacc-d242a3e7e220",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/MCSet.spec.js",
            "uuid": "a621115d-e24f-48b4-aacc-d242a3e7e220",
            "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
            "passes": [
              {
                "title": "determines set membership",
                "fullTitle": "MCSet #contains determines set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new MCSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "d0930ddf-7a59-4e8e-ba3b-0e0ea0711648",
                "parentUUID": "a621115d-e24f-48b4-aacc-d242a3e7e220",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#insert",
            "suites": [],
            "tests": [
              {
                "title": "adds elements to the set",
                "fullTitle": "MCSet #insert adds elements to the set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new MCSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);\nset.insert(0).insert(1);\nArray.from(set).should.deepEqual([0, 1]);",
                "err": {},
                "isRoot": false,
                "uuid": "40d966fd-7e7a-4c5b-9c01-3edbde1f5416",
                "parentUUID": "27b71018-7bd6-4d86-96e8-ed2da711a0ec",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/MCSet.spec.js",
            "uuid": "27b71018-7bd6-4d86-96e8-ed2da711a0ec",
            "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
            "passes": [
              {
                "title": "adds elements to the set",
                "fullTitle": "MCSet #insert adds elements to the set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new MCSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);\nset.insert(0).insert(1);\nArray.from(set).should.deepEqual([0, 1]);",
                "err": {},
                "isRoot": false,
                "uuid": "40d966fd-7e7a-4c5b-9c01-3edbde1f5416",
                "parentUUID": "27b71018-7bd6-4d86-96e8-ed2da711a0ec",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#remove",
            "suites": [],
            "tests": [
              {
                "title": "removes elements from a set",
                "fullTitle": "MCSet #remove removes elements from a set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new MCSet(0, 1);\nArray.from(set).should.deepEqual([0, 1]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([1]);\nset.remove(0).remove(1).remove(2);\nArray.from(set).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "edee895a-1aa0-4e6b-9b22-4667c3f4d374",
                "parentUUID": "0772f75d-cffe-4547-b275-19d15393d95f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/MCSet.spec.js",
            "uuid": "0772f75d-cffe-4547-b275-19d15393d95f",
            "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
            "passes": [
              {
                "title": "removes elements from a set",
                "fullTitle": "MCSet #remove removes elements from a set",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new MCSet(0, 1);\nArray.from(set).should.deepEqual([0, 1]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([1]);\nset.remove(0).remove(1).remove(2);\nArray.from(set).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "edee895a-1aa0-4e6b-9b22-4667c3f4d374",
                "parentUUID": "0772f75d-cffe-4547-b275-19d15393d95f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "static",
            "suites": [
              {
                "title": "fromJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns a new MCSet from JSON",
                    "fullTitle": "static fromJSON returns a new MCSet from JSON",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nconst set = MCSet.fromJSON(json);\nset.should.be.instanceof(MCSet);\nArray.from(set).should.deepEqual(elements);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7583d004-1547-4871-8c54-aeb6486b818d",
                    "parentUUID": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
                    "skipped": false
                  },
                  {
                    "title": "will throw if given invalid JSON",
                    "fullTitle": "static fromJSON will throw if given invalid JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const invalid = [[0, 1/2]]; // non-Integer count\n(() => MCSet.fromJSON({ e: invalid })).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14af89e3-502d-48a4-b624-3aca371013e3",
                    "parentUUID": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/MCSet.spec.js",
                "uuid": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
                "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
                "passes": [
                  {
                    "title": "returns a new MCSet from JSON",
                    "fullTitle": "static fromJSON returns a new MCSet from JSON",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nconst set = MCSet.fromJSON(json);\nset.should.be.instanceof(MCSet);\nArray.from(set).should.deepEqual(elements);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7583d004-1547-4871-8c54-aeb6486b818d",
                    "parentUUID": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
                    "skipped": false
                  },
                  {
                    "title": "will throw if given invalid JSON",
                    "fullTitle": "static fromJSON will throw if given invalid JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const invalid = [[0, 1/2]]; // non-Integer count\n(() => MCSet.fromJSON({ e: invalid })).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "14af89e3-502d-48a4-b624-3aca371013e3",
                    "parentUUID": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "merge",
                "suites": [],
                "tests": [
                  {
                    "title": "combines two MCSets, returning a new MCSet",
                    "fullTitle": "static merge combines two MCSets, returning a new MCSet",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new MCSet(1); // singleton\nconst two = new MCSet(2); // singleton\nconst three = MCSet.merge(one, two);\nthree.should.be.instanceof(MCSet);\nArray.from(three).should.deepEqual([1, 2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff95d47a-6174-4bb6-882b-9e4e218947aa",
                    "parentUUID": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
                    "skipped": false
                  },
                  {
                    "title": "throws if either argument is not an MCSet",
                    "fullTitle": "static merge throws if either argument is not an MCSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new MCSet();\n(() => MCSet.merge(set, null)).should.throw();\n(() => MCSet.merge(null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58c71859-faf5-4d2e-a63e-5ae185a23c64",
                    "parentUUID": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/MCSet.spec.js",
                "uuid": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
                "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
                "passes": [
                  {
                    "title": "combines two MCSets, returning a new MCSet",
                    "fullTitle": "static merge combines two MCSets, returning a new MCSet",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new MCSet(1); // singleton\nconst two = new MCSet(2); // singleton\nconst three = MCSet.merge(one, two);\nthree.should.be.instanceof(MCSet);\nArray.from(three).should.deepEqual([1, 2]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff95d47a-6174-4bb6-882b-9e4e218947aa",
                    "parentUUID": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
                    "skipped": false
                  },
                  {
                    "title": "throws if either argument is not an MCSet",
                    "fullTitle": "static merge throws if either argument is not an MCSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new MCSet();\n(() => MCSet.merge(set, null)).should.throw();\n(() => MCSet.merge(null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "58c71859-faf5-4d2e-a63e-5ae185a23c64",
                    "parentUUID": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "toJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns JSON from an MCSet",
                    "fullTitle": "static toJSON returns JSON from an MCSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = MCSet.toJSON(new MCSet(...elements))\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, 1]);\njson.should.deepEqual({ e, type: 'mc-set' });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f740412-e1f5-44c0-86b7-f3ff31bd3ea1",
                    "parentUUID": "28309b3d-d582-42de-b278-0a7e00156ad0",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/MCSet.spec.js",
                "uuid": "28309b3d-d582-42de-b278-0a7e00156ad0",
                "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
                "passes": [
                  {
                    "title": "returns JSON from an MCSet",
                    "fullTitle": "static toJSON returns JSON from an MCSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = MCSet.toJSON(new MCSet(...elements))\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, 1]);\njson.should.deepEqual({ e, type: 'mc-set' });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f740412-e1f5-44c0-86b7-f3ff31bd3ea1",
                    "parentUUID": "28309b3d-d582-42de-b278-0a7e00156ad0",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "MCSet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nMCSet.toJSON(MCSet.fromJSON(json)).should.deepEqual(json);",
                "err": {},
                "isRoot": false,
                "uuid": "ae7893ee-e663-4f5b-bc6f-58ad133fde4c",
                "parentUUID": "a42d5194-2776-407b-9143-1318147758d6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/MCSet.spec.js",
            "uuid": "a42d5194-2776-407b-9143-1318147758d6",
            "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
            "passes": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "MCSet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nMCSet.toJSON(MCSet.fromJSON(json)).should.deepEqual(json);",
                "err": {},
                "isRoot": false,
                "uuid": "ae7893ee-e663-4f5b-bc6f-58ad133fde4c",
                "parentUUID": "a42d5194-2776-407b-9143-1318147758d6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/MCSet.spec.js",
        "uuid": "a177dea5-32ad-4295-80bf-3f65904f59e8",
        "fullFile": "/home/twi/Code/meangirls/test/MCSet.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "ORSet",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "creates an empty Set-like object",
                "fullTitle": "ORSet constructor creates an empty Set-like object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Array.from(new ORSet()).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "64ddea13-8d92-4347-aa1a-61c9ddff2edc",
                "parentUUID": "53383d6a-a461-4cc8-af6a-9a9271a9fc19",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/ORSet.spec.js",
            "uuid": "53383d6a-a461-4cc8-af6a-9a9271a9fc19",
            "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
            "passes": [
              {
                "title": "creates an empty Set-like object",
                "fullTitle": "ORSet constructor creates an empty Set-like object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "Array.from(new ORSet()).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "64ddea13-8d92-4347-aa1a-61c9ddff2edc",
                "parentUUID": "53383d6a-a461-4cc8-af6a-9a9271a9fc19",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#contains",
            "suites": [],
            "tests": [
              {
                "title": "determines set membership",
                "fullTitle": "ORSet #contains determines set membership",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet(null, 0).insert(1).remove(1);\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);\nset.contains(2).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "5958a406-29e6-4241-97fa-ba403e59776e",
                "parentUUID": "e479815f-b238-4dcb-a603-a6b7b73bf819",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/ORSet.spec.js",
            "uuid": "e479815f-b238-4dcb-a603-a6b7b73bf819",
            "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
            "passes": [
              {
                "title": "determines set membership",
                "fullTitle": "ORSet #contains determines set membership",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet(null, 0).insert(1).remove(1);\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);\nset.contains(2).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "5958a406-29e6-4241-97fa-ba403e59776e",
                "parentUUID": "e479815f-b238-4dcb-a603-a6b7b73bf819",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#insert",
            "suites": [],
            "tests": [
              {
                "title": "updates set membership",
                "fullTitle": "ORSet #insert updates set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);",
                "err": {},
                "isRoot": false,
                "uuid": "6e264409-855b-4f8b-8676-2f2f94d13685",
                "parentUUID": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
                "skipped": false
              },
              {
                "title": "supports multiple tags",
                "fullTitle": "ORSet #insert supports multiple tags",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet();\nset.insert(0, 'a'); // tag: Symbol(0)\nArray.from(set).should.deepEqual([0]);\nset.insert(0, 'b'); // tag: Symbol(1)\nArray.from(set).should.deepEqual([0]);",
                "err": {},
                "isRoot": false,
                "uuid": "ca103d16-8f1f-41ba-ba38-72dfa4a805a8",
                "parentUUID": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/ORSet.spec.js",
            "uuid": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
            "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
            "passes": [
              {
                "title": "updates set membership",
                "fullTitle": "ORSet #insert updates set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);",
                "err": {},
                "isRoot": false,
                "uuid": "6e264409-855b-4f8b-8676-2f2f94d13685",
                "parentUUID": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
                "skipped": false
              },
              {
                "title": "supports multiple tags",
                "fullTitle": "ORSet #insert supports multiple tags",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet();\nset.insert(0, 'a'); // tag: Symbol(0)\nArray.from(set).should.deepEqual([0]);\nset.insert(0, 'b'); // tag: Symbol(1)\nArray.from(set).should.deepEqual([0]);",
                "err": {},
                "isRoot": false,
                "uuid": "ca103d16-8f1f-41ba-ba38-72dfa4a805a8",
                "parentUUID": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#remove",
            "suites": [],
            "tests": [
              {
                "title": "updates set membership",
                "fullTitle": "ORSet #remove updates set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet(null, 0);\nArray.from(set).should.deepEqual([0]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "fba88df5-a5ab-4b99-a0ba-a490ac83ba1c",
                "parentUUID": "2e49952d-745f-44dc-829a-28fffe7f2f67",
                "skipped": false
              },
              {
                "title": "supports multiple tags",
                "fullTitle": "ORSet #remove supports multiple tags",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet(null, 0).insert(1, 'a').insert(1, 'a');\nset.remove(0).remove(1, 'a').remove(2);\nArray.from(set).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "ce9f01ea-5a5b-4673-8b71-5e146cc51c49",
                "parentUUID": "2e49952d-745f-44dc-829a-28fffe7f2f67",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/ORSet.spec.js",
            "uuid": "2e49952d-745f-44dc-829a-28fffe7f2f67",
            "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
            "passes": [
              {
                "title": "updates set membership",
                "fullTitle": "ORSet #remove updates set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet(null, 0);\nArray.from(set).should.deepEqual([0]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "fba88df5-a5ab-4b99-a0ba-a490ac83ba1c",
                "parentUUID": "2e49952d-745f-44dc-829a-28fffe7f2f67",
                "skipped": false
              },
              {
                "title": "supports multiple tags",
                "fullTitle": "ORSet #remove supports multiple tags",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new ORSet(null, 0).insert(1, 'a').insert(1, 'a');\nset.remove(0).remove(1, 'a').remove(2);\nArray.from(set).should.deepEqual([]);",
                "err": {},
                "isRoot": false,
                "uuid": "ce9f01ea-5a5b-4673-8b71-5e146cc51c49",
                "parentUUID": "2e49952d-745f-44dc-829a-28fffe7f2f67",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "static",
            "suites": [
              {
                "title": "fromJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "converts JSON into a new ORSet",
                    "fullTitle": "static fromJSON converts JSON into a new ORSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = ORSet.fromJSON({\n\te: [[0], [1, ['a']], [2, ['a'], ['a']], [3, ['a', 'b'], ['b', 'c']]],\n\ttype: 'or-set',\n});\nset.should.be.instanceof(ORSet);\nArray.from(set).should.deepEqual([0, 1, 3]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41a56dd8-8d1d-43f1-8914-af306e6dc827",
                    "parentUUID": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
                    "skipped": false
                  },
                  {
                    "title": "will throw, if the JSON is invalid",
                    "fullTitle": "static fromJSON will throw, if the JSON is invalid",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const invalid = (e = null) => ({ e, type: 'or-set' });\n(() => ORSet.fromJSON(invalid())).should.throw();\n(() => ORSet.fromJSON(invalid([[]]))).should.throw();\n(() => ORSet.fromJSON(invalid([null]))).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "22a211ef-e2fe-4c89-babd-eddbc5b5afeb",
                    "parentUUID": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/ORSet.spec.js",
                "uuid": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
                "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
                "passes": [
                  {
                    "title": "converts JSON into a new ORSet",
                    "fullTitle": "static fromJSON converts JSON into a new ORSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = ORSet.fromJSON({\n\te: [[0], [1, ['a']], [2, ['a'], ['a']], [3, ['a', 'b'], ['b', 'c']]],\n\ttype: 'or-set',\n});\nset.should.be.instanceof(ORSet);\nArray.from(set).should.deepEqual([0, 1, 3]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41a56dd8-8d1d-43f1-8914-af306e6dc827",
                    "parentUUID": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
                    "skipped": false
                  },
                  {
                    "title": "will throw, if the JSON is invalid",
                    "fullTitle": "static fromJSON will throw, if the JSON is invalid",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const invalid = (e = null) => ({ e, type: 'or-set' });\n(() => ORSet.fromJSON(invalid())).should.throw();\n(() => ORSet.fromJSON(invalid([[]]))).should.throw();\n(() => ORSet.fromJSON(invalid([null]))).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "22a211ef-e2fe-4c89-babd-eddbc5b5afeb",
                    "parentUUID": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "merge",
                "suites": [],
                "tests": [
                  {
                    "title": "combines exactly two ORSets",
                    "fullTitle": "static merge combines exactly two ORSets",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new ORSet().insert(1).remove(1);\nconst two = new ORSet().insert(2).remove(2);\nconst three = ORSet.merge(null, one, two);\nthree.should.be.instanceof(ORSet);\nArray.from(three).should.deepEqual([]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d638ade0-e39c-434f-b995-4f0353605e54",
                    "parentUUID": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
                    "skipped": false
                  },
                  {
                    "title": "throws if either argument is not an ORSet",
                    "fullTitle": "static merge throws if either argument is not an ORSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new ORSet();\n(() => ORSet.merge(null, set, null)).should.throw();\n(() => ORSet.merge(null, null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5d5fe04-bafd-4579-ae99-222168b2ba22",
                    "parentUUID": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/ORSet.spec.js",
                "uuid": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
                "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
                "passes": [
                  {
                    "title": "combines exactly two ORSets",
                    "fullTitle": "static merge combines exactly two ORSets",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new ORSet().insert(1).remove(1);\nconst two = new ORSet().insert(2).remove(2);\nconst three = ORSet.merge(null, one, two);\nthree.should.be.instanceof(ORSet);\nArray.from(three).should.deepEqual([]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d638ade0-e39c-434f-b995-4f0353605e54",
                    "parentUUID": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
                    "skipped": false
                  },
                  {
                    "title": "throws if either argument is not an ORSet",
                    "fullTitle": "static merge throws if either argument is not an ORSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new ORSet();\n(() => ORSet.merge(null, set, null)).should.throw();\n(() => ORSet.merge(null, null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5d5fe04-bafd-4579-ae99-222168b2ba22",
                    "parentUUID": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "toJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "converts a ORSet into JSON",
                    "fullTitle": "static toJSON converts a ORSet into JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new ORSet(null, ...elements);\nfor (const e of elements) set.remove(e);\nconst json = ORSet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, ['0'], ['0']]);\njson.should.deepEqual({ e, type: 'or-set' });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99635235-97c4-4b8a-8b67-afc02838e315",
                    "parentUUID": "3d20d5b3-112b-45ce-b95b-aca4ecfe29fc",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/ORSet.spec.js",
                "uuid": "3d20d5b3-112b-45ce-b95b-aca4ecfe29fc",
                "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
                "passes": [
                  {
                    "title": "converts a ORSet into JSON",
                    "fullTitle": "static toJSON converts a ORSet into JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new ORSet(null, ...elements);\nfor (const e of elements) set.remove(e);\nconst json = ORSet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, ['0'], ['0']]);\njson.should.deepEqual({ e, type: 'or-set' });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99635235-97c4-4b8a-8b67-afc02838e315",
                    "parentUUID": "3d20d5b3-112b-45ce-b95b-aca4ecfe29fc",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              }
            ],
            "tests": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "ORSet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = ORSet.toJSON(new ORSet(null, ...elements));\nArray.from(ORSet.fromJSON(json)).should.deepEqual(elements);",
                "err": {},
                "isRoot": false,
                "uuid": "7d331784-51d7-4402-9015-81fbaa80811b",
                "parentUUID": "a78ede3e-ddf8-438d-a435-fed5f117813e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/ORSet.spec.js",
            "uuid": "a78ede3e-ddf8-438d-a435-fed5f117813e",
            "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
            "passes": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "ORSet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = ORSet.toJSON(new ORSet(null, ...elements));\nArray.from(ORSet.fromJSON(json)).should.deepEqual(elements);",
                "err": {},
                "isRoot": false,
                "uuid": "7d331784-51d7-4402-9015-81fbaa80811b",
                "parentUUID": "a78ede3e-ddf8-438d-a435-fed5f117813e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/ORSet.spec.js",
        "uuid": "26fd162e-7a25-4d87-a87e-d5f90a2d9f0b",
        "fullFile": "/home/twi/Code/meangirls/test/ORSet.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "PNCounter",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "takes no arguments and starts value at zero",
                "fullTitle": "PNCounter constructor takes no arguments and starts value at zero",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(() => new PNCounter()).should.not.throw();\nnew PNCounter().should.have.property('value', 0);",
                "err": {},
                "isRoot": false,
                "uuid": "45e1abc3-e276-4f46-bda3-9a7c8db15a49",
                "parentUUID": "7acf5a16-dccd-43b9-aa2a-768bfc52d0c1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/PNCounter.spec.js",
            "uuid": "7acf5a16-dccd-43b9-aa2a-768bfc52d0c1",
            "fullFile": "/home/twi/Code/meangirls/test/PNCounter.spec.js",
            "passes": [
              {
                "title": "takes no arguments and starts value at zero",
                "fullTitle": "PNCounter constructor takes no arguments and starts value at zero",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(() => new PNCounter()).should.not.throw();\nnew PNCounter().should.have.property('value', 0);",
                "err": {},
                "isRoot": false,
                "uuid": "45e1abc3-e276-4f46-bda3-9a7c8db15a49",
                "parentUUID": "7acf5a16-dccd-43b9-aa2a-768bfc52d0c1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#update",
            "suites": [],
            "tests": [
              {
                "title": "increments the value of the counter",
                "fullTitle": "PNCounter #update increments the value of the counter",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new PNCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
                "err": {},
                "isRoot": false,
                "uuid": "9a10bae6-4164-4b48-bed2-0ea7d9ac89e7",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              },
              {
                "title": "returns the counter that was modified",
                "fullTitle": "PNCounter #update returns the counter that was modified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new PNCounter();\ncounter.update().should.equal(counter);",
                "err": {},
                "isRoot": false,
                "uuid": "ca0a366c-8540-4428-9e16-083cf757b750",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              },
              {
                "title": "accepts any Number, defaulting to 1",
                "fullTitle": "PNCounter #update accepts any Number, defaulting to 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const positive = +Math.random();\nconst negative = -Math.random();\nconst counter = new PNCounter();\ncounter.update(negative);\ncounter.should.have.property('value', negative);\ncounter.update(positive);\ncounter.should.have.property('value', positive + negative);",
                "err": {},
                "isRoot": false,
                "uuid": "6299d7c3-4d5f-4966-b553-075763cf5570",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              },
              {
                "title": "accepts an \"actor\" Object, defaulting to null",
                "fullTitle": "PNCounter #update accepts an \"actor\" Object, defaulting to null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
                "err": {},
                "isRoot": false,
                "uuid": "b117426e-45cb-4faf-8466-d0d63723d31e",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              },
              {
                "title": "does not accept +/-Infinity, nor NaN",
                "fullTitle": "PNCounter #update does not accept +/-Infinity, nor NaN",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new PNCounter();\n(() => counter.update(+Infinity)).should.throw();\n(() => counter.update(-Infinity)).should.throw();\n(() => counter.update(NaN)).should.throw();",
                "err": {},
                "isRoot": false,
                "uuid": "f71bba82-0e13-46cf-b57c-d1bdb089ea06",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/PNCounter.spec.js",
            "uuid": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
            "fullFile": "/home/twi/Code/meangirls/test/PNCounter.spec.js",
            "passes": [
              {
                "title": "increments the value of the counter",
                "fullTitle": "PNCounter #update increments the value of the counter",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new PNCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
                "err": {},
                "isRoot": false,
                "uuid": "9a10bae6-4164-4b48-bed2-0ea7d9ac89e7",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              },
              {
                "title": "returns the counter that was modified",
                "fullTitle": "PNCounter #update returns the counter that was modified",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new PNCounter();\ncounter.update().should.equal(counter);",
                "err": {},
                "isRoot": false,
                "uuid": "ca0a366c-8540-4428-9e16-083cf757b750",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              },
              {
                "title": "accepts any Number, defaulting to 1",
                "fullTitle": "PNCounter #update accepts any Number, defaulting to 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const positive = +Math.random();\nconst negative = -Math.random();\nconst counter = new PNCounter();\ncounter.update(negative);\ncounter.should.have.property('value', negative);\ncounter.update(positive);\ncounter.should.have.property('value', positive + negative);",
                "err": {},
                "isRoot": false,
                "uuid": "6299d7c3-4d5f-4966-b553-075763cf5570",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              },
              {
                "title": "accepts an \"actor\" Object, defaulting to null",
                "fullTitle": "PNCounter #update accepts an \"actor\" Object, defaulting to null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
                "err": {},
                "isRoot": false,
                "uuid": "b117426e-45cb-4faf-8466-d0d63723d31e",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              },
              {
                "title": "does not accept +/-Infinity, nor NaN",
                "fullTitle": "PNCounter #update does not accept +/-Infinity, nor NaN",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = new PNCounter();\n(() => counter.update(+Infinity)).should.throw();\n(() => counter.update(-Infinity)).should.throw();\n(() => counter.update(NaN)).should.throw();",
                "err": {},
                "isRoot": false,
                "uuid": "f71bba82-0e13-46cf-b57c-d1bdb089ea06",
                "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          {
            "title": "static",
            "suites": [
              {
                "title": "fromJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns a PNCounter Object",
                    "fullTitle": "static fromJSON returns a PNCounter Object",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const json = {\n\tp: { one: Math.random(), two: Math.random() },\n\tn: { one: Math.random(), two: Math.random() },\n\ttype: 'pn-counter',\n};\nconst counter = PNCounter.fromJSON(json);\ncounter.should.be.instanceof(PNCounter);\nconst sum1 = json.p.one + json.p.two;\nconst sum2 = json.n.one + json.n.two;\ncounter.should.have.property('value', sum1 - sum2);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7494d55-c2e0-499f-9d7a-02268c6701c7",
                    "parentUUID": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
                    "skipped": false
                  },
                  {
                    "title": "throws if given invalid JSON",
                    "fullTitle": "static fromJSON throws if given invalid JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => PNCounter.fromJSON()).should.throw();\n(() => PNCounter.fromJSON({ p: unsafe, n: {} })).should.throw();\n(() => PNCounter.fromJSON({ p: {}, n: unsafe })).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d098dfa1-a3b7-455d-958a-4f64d42299e2",
                    "parentUUID": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/PNCounter.spec.js",
                "uuid": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
                "fullFile": "/home/twi/Code/meangirls/test/PNCounter.spec.js",
                "passes": [
                  {
                    "title": "returns a PNCounter Object",
                    "fullTitle": "static fromJSON returns a PNCounter Object",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const json = {\n\tp: { one: Math.random(), two: Math.random() },\n\tn: { one: Math.random(), two: Math.random() },\n\ttype: 'pn-counter',\n};\nconst counter = PNCounter.fromJSON(json);\ncounter.should.be.instanceof(PNCounter);\nconst sum1 = json.p.one + json.p.two;\nconst sum2 = json.n.one + json.n.two;\ncounter.should.have.property('value', sum1 - sum2);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a7494d55-c2e0-499f-9d7a-02268c6701c7",
                    "parentUUID": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
                    "skipped": false
                  },
                  {
                    "title": "throws if given invalid JSON",
                    "fullTitle": "static fromJSON throws if given invalid JSON",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => PNCounter.fromJSON()).should.throw();\n(() => PNCounter.fromJSON({ p: unsafe, n: {} })).should.throw();\n(() => PNCounter.fromJSON({ p: {}, n: unsafe })).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d098dfa1-a3b7-455d-958a-4f64d42299e2",
                    "parentUUID": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "merge",
                "suites": [],
                "tests": [
                  {
                    "title": "combines two PNCounters",
                    "fullTitle": "static merge combines two PNCounters",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new PNCounter();\nconst two = new PNCounter();\none.update(1, 'positive');\none.update(-2, 'negative');\ntwo.update(-1, 'negative');\ntwo.update(2, 'positive');\nconst three = PNCounter.merge(one, two);\nthree.should.be.instanceof(PNCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d389c1e9-3d5c-47fa-a57f-14f1d8afe98e",
                    "parentUUID": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
                    "skipped": false
                  },
                  {
                    "title": "will throw if either is not a PNCounter",
                    "fullTitle": "static merge will throw if either is not a PNCounter",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new PNCounter();\nconst two = new PNCounter();\n(() => PNCounter.merge(one, null)).should.throw();\n(() => PNCounter.merge(null, two)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce3a46da-a8d3-49f7-bfde-53fb1ef3808e",
                    "parentUUID": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/PNCounter.spec.js",
                "uuid": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
                "fullFile": "/home/twi/Code/meangirls/test/PNCounter.spec.js",
                "passes": [
                  {
                    "title": "combines two PNCounters",
                    "fullTitle": "static merge combines two PNCounters",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new PNCounter();\nconst two = new PNCounter();\none.update(1, 'positive');\none.update(-2, 'negative');\ntwo.update(-1, 'negative');\ntwo.update(2, 'positive');\nconst three = PNCounter.merge(one, two);\nthree.should.be.instanceof(PNCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d389c1e9-3d5c-47fa-a57f-14f1d8afe98e",
                    "parentUUID": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
                    "skipped": false
                  },
                  {
                    "title": "will throw if either is not a PNCounter",
                    "fullTitle": "static merge will throw if either is not a PNCounter",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new PNCounter();\nconst two = new PNCounter();\n(() => PNCounter.merge(one, null)).should.throw();\n(() => PNCounter.merge(null, two)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce3a46da-a8d3-49f7-bfde-53fb1ef3808e",
                    "parentUUID": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "toJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns a JSON Object",
                    "fullTitle": "static toJSON returns a JSON Object",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(-2, 'two');\nconst json = PNCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\tn: { two: 2 },\n\tp: { one: 1 },\n\ttype: 'pn-counter',\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "995ba32a-31b6-48eb-8e08-89d115cd096a",
                    "parentUUID": "9954b180-9214-4eb6-8f03-8b9776edccf1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/PNCounter.spec.js",
                "uuid": "9954b180-9214-4eb6-8f03-8b9776edccf1",
                "fullFile": "/home/twi/Code/meangirls/test/PNCounter.spec.js",
                "passes": [
                  {
                    "title": "returns a JSON Object",
                    "fullTitle": "static toJSON returns a JSON Object",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(-2, 'two');\nconst json = PNCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\tn: { two: 2 },\n\tp: { one: 1 },\n\ttype: 'pn-counter',\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "995ba32a-31b6-48eb-8e08-89d115cd096a",
                    "parentUUID": "9954b180-9214-4eb6-8f03-8b9776edccf1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [
              {
                "title": "allows use of JSON as a wire protocol",
                "fullTitle": "PNCounter static allows use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new PNCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = PNCounter.fromJSON(PNCounter.toJSON(one));\none.should.have.property('value', two.value);",
                "err": {},
                "isRoot": false,
                "uuid": "d961fb0f-cf3b-403b-ba2b-f9054f3cc4fa",
                "parentUUID": "c3cb1705-c858-4d6b-88d9-b74410664f5c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/PNCounter.spec.js",
            "uuid": "c3cb1705-c858-4d6b-88d9-b74410664f5c",
            "fullFile": "/home/twi/Code/meangirls/test/PNCounter.spec.js",
            "passes": [
              {
                "title": "allows use of JSON as a wire protocol",
                "fullTitle": "PNCounter static allows use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new PNCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = PNCounter.fromJSON(PNCounter.toJSON(one));\none.should.have.property('value', two.value);",
                "err": {},
                "isRoot": false,
                "uuid": "d961fb0f-cf3b-403b-ba2b-f9054f3cc4fa",
                "parentUUID": "c3cb1705-c858-4d6b-88d9-b74410664f5c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/PNCounter.spec.js",
        "uuid": "613aa865-058b-4baa-a630-17ec3c44354d",
        "fullFile": "/home/twi/Code/meangirls/test/PNCounter.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "TwoPSet",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "creates an empty Set-like Object",
                "fullTitle": "TwoPSet constructor creates an empty Set-like Object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new TwoPSet().should.have.property('size', 0);\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new TwoPSet(...elements);\nset.should.have.property('size', elements.length);\nArray.from(set).should.deepEqual(elements);",
                "err": {},
                "isRoot": false,
                "uuid": "b1b5491e-bc06-4afb-a3e1-9e8f0209e256",
                "parentUUID": "d50b74fd-c096-44a9-a010-97006a97382d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/TwoPSet.spec.js",
            "uuid": "d50b74fd-c096-44a9-a010-97006a97382d",
            "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
            "passes": [
              {
                "title": "creates an empty Set-like Object",
                "fullTitle": "TwoPSet constructor creates an empty Set-like Object",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new TwoPSet().should.have.property('size', 0);\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new TwoPSet(...elements);\nset.should.have.property('size', elements.length);\nArray.from(set).should.deepEqual(elements);",
                "err": {},
                "isRoot": false,
                "uuid": "b1b5491e-bc06-4afb-a3e1-9e8f0209e256",
                "parentUUID": "d50b74fd-c096-44a9-a010-97006a97382d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#contains",
            "suites": [],
            "tests": [
              {
                "title": "determines set membership",
                "fullTitle": "TwoPSet #contains determines set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new TwoPSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "7d2ea0cc-25d1-4527-9a16-568b9f038cb0",
                "parentUUID": "c2797039-071a-47a0-b034-399e103992a4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/TwoPSet.spec.js",
            "uuid": "c2797039-071a-47a0-b034-399e103992a4",
            "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
            "passes": [
              {
                "title": "determines set membership",
                "fullTitle": "TwoPSet #contains determines set membership",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new TwoPSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "7d2ea0cc-25d1-4527-9a16-568b9f038cb0",
                "parentUUID": "c2797039-071a-47a0-b034-399e103992a4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#insert",
            "suites": [],
            "tests": [
              {
                "title": "add an element to the set",
                "fullTitle": "TwoPSet #insert add an element to the set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new TwoPSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
                "err": {},
                "isRoot": false,
                "uuid": "ac01a3ca-0b43-438d-a094-49ad13fe9733",
                "parentUUID": "e01e1cc9-bdb7-4d78-ae2d-2f1d82dd2f13",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/TwoPSet.spec.js",
            "uuid": "e01e1cc9-bdb7-4d78-ae2d-2f1d82dd2f13",
            "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
            "passes": [
              {
                "title": "add an element to the set",
                "fullTitle": "TwoPSet #insert add an element to the set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new TwoPSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
                "err": {},
                "isRoot": false,
                "uuid": "ac01a3ca-0b43-438d-a094-49ad13fe9733",
                "parentUUID": "e01e1cc9-bdb7-4d78-ae2d-2f1d82dd2f13",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "#remove",
            "suites": [],
            "tests": [
              {
                "title": "removes an element from the set",
                "fullTitle": "TwoPSet #remove removes an element from the set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new TwoPSet();\nset.remove(0).should.equal(set);\nset.should.have.property('size', 0);\nset.insert(0);\nset.should.have.property('size', 1);\nset.remove(0);\nset.should.have.property('size', 0);",
                "err": {},
                "isRoot": false,
                "uuid": "2374c4e3-af38-4a01-9816-db9fab0e8869",
                "parentUUID": "1dd8b3f4-2341-44e8-89ad-089762bef76b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/TwoPSet.spec.js",
            "uuid": "1dd8b3f4-2341-44e8-89ad-089762bef76b",
            "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
            "passes": [
              {
                "title": "removes an element from the set",
                "fullTitle": "TwoPSet #remove removes an element from the set",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = new TwoPSet();\nset.remove(0).should.equal(set);\nset.should.have.property('size', 0);\nset.insert(0);\nset.should.have.property('size', 1);\nset.remove(0);\nset.should.have.property('size', 0);",
                "err": {},
                "isRoot": false,
                "uuid": "2374c4e3-af38-4a01-9816-db9fab0e8869",
                "parentUUID": "1dd8b3f4-2341-44e8-89ad-089762bef76b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          {
            "title": "static",
            "suites": [
              {
                "title": "toJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns JSON",
                    "fullTitle": "static toJSON returns JSON",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new TwoPSet(1, 2).remove(1);\nconst json = TwoPSet.toJSON(set);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\ta: [1, 2],\n\tr: [1],\n\ttype: '2p-set',\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "319b65bc-ccdd-44ea-9d02-bd56a67ae4cf",
                    "parentUUID": "2e5d4386-a5f3-474e-bae2-4cac6297f222",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/TwoPSet.spec.js",
                "uuid": "2e5d4386-a5f3-474e-bae2-4cac6297f222",
                "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
                "passes": [
                  {
                    "title": "returns JSON",
                    "fullTitle": "static toJSON returns JSON",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new TwoPSet(1, 2).remove(1);\nconst json = TwoPSet.toJSON(set);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\ta: [1, 2],\n\tr: [1],\n\ttype: '2p-set',\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "319b65bc-ccdd-44ea-9d02-bd56a67ae4cf",
                    "parentUUID": "2e5d4386-a5f3-474e-bae2-4cac6297f222",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              },
              {
                "title": "merge",
                "suites": [],
                "tests": [
                  {
                    "title": "combines two TwoPSets",
                    "fullTitle": "static merge combines two TwoPSets",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new TwoPSet(1, 2).remove(2);\nconst two = new TwoPSet(3, 4).remove(3);\nconst three = TwoPSet.merge(one, two);\nthree.should.be.instanceof(TwoPSet);\nArray.from(three).should.deepEqual([1, 4]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5144ed5a-ff07-4d23-8293-8bc1893044bd",
                    "parentUUID": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
                    "skipped": false
                  },
                  {
                    "title": "throws if passed non-TwoPSets",
                    "fullTitle": "static merge throws if passed non-TwoPSets",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new TwoPSet();\n(() => TwoPSet.merge(set, null)).should.throw();\n(() => TwoPSet.merge(null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "601f102a-3641-49f7-bb74-b7e07ad7da57",
                    "parentUUID": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/TwoPSet.spec.js",
                "uuid": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
                "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
                "passes": [
                  {
                    "title": "combines two TwoPSets",
                    "fullTitle": "static merge combines two TwoPSets",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const one = new TwoPSet(1, 2).remove(2);\nconst two = new TwoPSet(3, 4).remove(3);\nconst three = TwoPSet.merge(one, two);\nthree.should.be.instanceof(TwoPSet);\nArray.from(three).should.deepEqual([1, 4]);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5144ed5a-ff07-4d23-8293-8bc1893044bd",
                    "parentUUID": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
                    "skipped": false
                  },
                  {
                    "title": "throws if passed non-TwoPSets",
                    "fullTitle": "static merge throws if passed non-TwoPSets",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const set = new TwoPSet();\n(() => TwoPSet.merge(set, null)).should.throw();\n(() => TwoPSet.merge(null, set)).should.throw();",
                    "err": {},
                    "isRoot": false,
                    "uuid": "601f102a-3641-49f7-bb74-b7e07ad7da57",
                    "parentUUID": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1
              },
              {
                "title": "fromJSON",
                "suites": [],
                "tests": [
                  {
                    "title": "returns a TwoPSet",
                    "fullTitle": "static fromJSON returns a TwoPSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nconst set = TwoPSet.fromJSON(json);\nset.should.be.instanceof(TwoPSet);\nset.should.have.property('size', 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0dae82f4-0d4d-4d8a-bada-d1d9577843b6",
                    "parentUUID": "3a24b9ba-e72e-4f7f-9343-a815cfb4f298",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/TwoPSet.spec.js",
                "uuid": "3a24b9ba-e72e-4f7f-9343-a815cfb4f298",
                "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
                "passes": [
                  {
                    "title": "returns a TwoPSet",
                    "fullTitle": "static fromJSON returns a TwoPSet",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nconst set = TwoPSet.fromJSON(json);\nset.should.be.instanceof(TwoPSet);\nset.should.have.property('size', 0);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0dae82f4-0d4d-4d8a-bada-d1d9577843b6",
                    "parentUUID": "3a24b9ba-e72e-4f7f-9343-a815cfb4f298",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0
              }
            ],
            "tests": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "TwoPSet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nTwoPSet.toJSON(TwoPSet.fromJSON(json)).should.deepEqual(json);",
                "err": {},
                "isRoot": false,
                "uuid": "29d2142c-00b5-4a56-9c75-db82a130c535",
                "parentUUID": "ada420a8-32bd-465c-b673-c370e586260d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/TwoPSet.spec.js",
            "uuid": "ada420a8-32bd-465c-b673-c370e586260d",
            "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
            "passes": [
              {
                "title": "enables use of JSON as a wire protocol",
                "fullTitle": "TwoPSet static enables use of JSON as a wire protocol",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nTwoPSet.toJSON(TwoPSet.fromJSON(json)).should.deepEqual(json);",
                "err": {},
                "isRoot": false,
                "uuid": "29d2142c-00b5-4a56-9c75-db82a130c535",
                "parentUUID": "ada420a8-32bd-465c-b673-c370e586260d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": true,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/TwoPSet.spec.js",
        "uuid": "261a29af-bbce-4748-915e-cf7d86ef7982",
        "fullFile": "/home/twi/Code/meangirls/test/TwoPSet.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Global module exports",
        "suites": [
          {
            "title": "meangirls.merge",
            "suites": [],
            "tests": [
              {
                "title": "can join two or more GCounters",
                "fullTitle": "Global module exports meangirls.merge can join two or more GCounters",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new meangirls.GCounter().update();\nconst two = new meangirls.GCounter().update();\nconst result = meangirls.merge(gc, one, two);\nresult.should.be.instanceof(meangirls.GCounter);",
                "err": {},
                "isRoot": false,
                "uuid": "0390a448-89ce-4bc5-ab38-b78d5321a4e0",
                "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
                "skipped": false
              },
              {
                "title": "can join two or more PNCounters",
                "fullTitle": "Global module exports meangirls.merge can join two or more PNCounters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new meangirls.PNCounter().update();\nconst two = new meangirls.PNCounter().update();\nconst result = meangirls.merge(pn, one, two);\nresult.should.be.instanceof(meangirls.PNCounter);",
                "err": {},
                "isRoot": false,
                "uuid": "129f917d-e8b4-462e-9234-f0f24aee4b8d",
                "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
                "skipped": false
              },
              {
                "title": "can join two or more GSets",
                "fullTitle": "Global module exports meangirls.merge can join two or more GSets",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new meangirls.GSet().insert(1);\nconst two = new meangirls.GSet().insert(2);\nconst result = meangirls.merge(gs, one, two);\nresult.should.be.instanceof(meangirls.GSet);",
                "err": {},
                "isRoot": false,
                "uuid": "a9c840ca-8ef1-4633-9ed5-a904606ea086",
                "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
                "skipped": false
              },
              {
                "title": "throws if passed not exactly one kind of CRDT",
                "fullTitle": "Global module exports meangirls.merge throws if passed not exactly one kind of CRDT",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(() => meangirls.merge()).should.throw();\n(() => meangirls.merge(null)).should.throw();\n(() => meangirls.merge(null, gs)).should.throw();\n(() => meangirls.merge(gc, pn, gs)).should.throw();",
                "err": {},
                "isRoot": false,
                "uuid": "47edbd9b-138b-4523-822a-37b8959093ef",
                "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/meangirls.spec.js",
            "uuid": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
            "fullFile": "/home/twi/Code/meangirls/test/meangirls.spec.js",
            "passes": [
              {
                "title": "can join two or more GCounters",
                "fullTitle": "Global module exports meangirls.merge can join two or more GCounters",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new meangirls.GCounter().update();\nconst two = new meangirls.GCounter().update();\nconst result = meangirls.merge(gc, one, two);\nresult.should.be.instanceof(meangirls.GCounter);",
                "err": {},
                "isRoot": false,
                "uuid": "0390a448-89ce-4bc5-ab38-b78d5321a4e0",
                "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
                "skipped": false
              },
              {
                "title": "can join two or more PNCounters",
                "fullTitle": "Global module exports meangirls.merge can join two or more PNCounters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new meangirls.PNCounter().update();\nconst two = new meangirls.PNCounter().update();\nconst result = meangirls.merge(pn, one, two);\nresult.should.be.instanceof(meangirls.PNCounter);",
                "err": {},
                "isRoot": false,
                "uuid": "129f917d-e8b4-462e-9234-f0f24aee4b8d",
                "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
                "skipped": false
              },
              {
                "title": "can join two or more GSets",
                "fullTitle": "Global module exports meangirls.merge can join two or more GSets",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const one = new meangirls.GSet().insert(1);\nconst two = new meangirls.GSet().insert(2);\nconst result = meangirls.merge(gs, one, two);\nresult.should.be.instanceof(meangirls.GSet);",
                "err": {},
                "isRoot": false,
                "uuid": "a9c840ca-8ef1-4633-9ed5-a904606ea086",
                "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
                "skipped": false
              },
              {
                "title": "throws if passed not exactly one kind of CRDT",
                "fullTitle": "Global module exports meangirls.merge throws if passed not exactly one kind of CRDT",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(() => meangirls.merge()).should.throw();\n(() => meangirls.merge(null)).should.throw();\n(() => meangirls.merge(null, gs)).should.throw();\n(() => meangirls.merge(gc, pn, gs)).should.throw();",
                "err": {},
                "isRoot": false,
                "uuid": "47edbd9b-138b-4523-822a-37b8959093ef",
                "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3
          },
          {
            "title": "meangirls.parse",
            "suites": [],
            "tests": [
              {
                "title": "can obtain a GCounter from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain a GCounter from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = meangirls.parse({\n\te: {}, // empty\n\ttype: 'g-counter',\n});\ncounter.should.be.instanceof(meangirls.GCounter);",
                "err": {},
                "isRoot": false,
                "uuid": "a0464ccd-195c-4afd-b72b-4ad2aa549225",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain a PNCounter from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain a PNCounter from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = meangirls.parse({\n\tp: {}, // empty\n\tn: {}, // empty\n\ttype: 'pn-counter',\n});\ncounter.should.be.instanceof(meangirls.PNCounter);",
                "err": {},
                "isRoot": false,
                "uuid": "fabd3950-3dd1-4581-8ce2-3f72e1af49f0",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain a GSet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain a GSet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'g-set',\n});\nset.should.be.instanceof(meangirls.GSet);",
                "err": {},
                "isRoot": false,
                "uuid": "dfabeb8d-ac1e-4c35-b887-0b82bb92697b",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain a TwoPSet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain a TwoPSet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\ta: [], // empty\n\tr: [], // empty\n\ttype: '2p-set',\n});\nset.should.be.instanceof(meangirls.TwoPSet);",
                "err": {},
                "isRoot": false,
                "uuid": "69fb0805-5de4-4cc3-99ea-5aef27a09a0f",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain an LWWESet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain an LWWESet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'lww-e-set',\n});\nset.should.be.instanceof(meangirls.LWWESet);",
                "err": {},
                "isRoot": false,
                "uuid": "c9ebf7c7-8234-4987-903e-be3b24c4a7d8",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain an ORSet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain an ORSet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'or-set',\n});\nset.should.be.instanceof(meangirls.ORSet);",
                "err": {},
                "isRoot": false,
                "uuid": "597ea642-f0f4-4bc7-9bf0-66677c200122",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain an MCSet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain an MCSet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'mc-set',\n});\nset.should.be.instanceof(meangirls.MCSet);",
                "err": {},
                "isRoot": false,
                "uuid": "5ee1b96a-019b-446c-8926-9571b8dae542",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "throws TypeError if passed invalid JSON",
                "fullTitle": "Global module exports meangirls.parse throws TypeError if passed invalid JSON",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(() => meangirls.parse(/* null */)).should.throw(TypeError);\n(() => meangirls.parse({ type: 'unknown' })).should.throw(TypeError);",
                "err": {},
                "isRoot": false,
                "uuid": "fb6dda08-088b-4252-99b8-74e64a1095eb",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/meangirls.spec.js",
            "uuid": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
            "fullFile": "/home/twi/Code/meangirls/test/meangirls.spec.js",
            "passes": [
              {
                "title": "can obtain a GCounter from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain a GCounter from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = meangirls.parse({\n\te: {}, // empty\n\ttype: 'g-counter',\n});\ncounter.should.be.instanceof(meangirls.GCounter);",
                "err": {},
                "isRoot": false,
                "uuid": "a0464ccd-195c-4afd-b72b-4ad2aa549225",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain a PNCounter from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain a PNCounter from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const counter = meangirls.parse({\n\tp: {}, // empty\n\tn: {}, // empty\n\ttype: 'pn-counter',\n});\ncounter.should.be.instanceof(meangirls.PNCounter);",
                "err": {},
                "isRoot": false,
                "uuid": "fabd3950-3dd1-4581-8ce2-3f72e1af49f0",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain a GSet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain a GSet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'g-set',\n});\nset.should.be.instanceof(meangirls.GSet);",
                "err": {},
                "isRoot": false,
                "uuid": "dfabeb8d-ac1e-4c35-b887-0b82bb92697b",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain a TwoPSet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain a TwoPSet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\ta: [], // empty\n\tr: [], // empty\n\ttype: '2p-set',\n});\nset.should.be.instanceof(meangirls.TwoPSet);",
                "err": {},
                "isRoot": false,
                "uuid": "69fb0805-5de4-4cc3-99ea-5aef27a09a0f",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain an LWWESet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain an LWWESet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'lww-e-set',\n});\nset.should.be.instanceof(meangirls.LWWESet);",
                "err": {},
                "isRoot": false,
                "uuid": "c9ebf7c7-8234-4987-903e-be3b24c4a7d8",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain an ORSet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain an ORSet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'or-set',\n});\nset.should.be.instanceof(meangirls.ORSet);",
                "err": {},
                "isRoot": false,
                "uuid": "597ea642-f0f4-4bc7-9bf0-66677c200122",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "can obtain an MCSet from JSON",
                "fullTitle": "Global module exports meangirls.parse can obtain an MCSet from JSON",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'mc-set',\n});\nset.should.be.instanceof(meangirls.MCSet);",
                "err": {},
                "isRoot": false,
                "uuid": "5ee1b96a-019b-446c-8926-9571b8dae542",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              },
              {
                "title": "throws TypeError if passed invalid JSON",
                "fullTitle": "Global module exports meangirls.parse throws TypeError if passed invalid JSON",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(() => meangirls.parse(/* null */)).should.throw(TypeError);\n(() => meangirls.parse({ type: 'unknown' })).should.throw(TypeError);",
                "err": {},
                "isRoot": false,
                "uuid": "fb6dda08-088b-4252-99b8-74e64a1095eb",
                "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 8,
            "totalPasses": 8,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/meangirls.spec.js",
        "uuid": "10f9871e-b58e-44f5-97cb-bcf892b903f5",
        "fullFile": "/home/twi/Code/meangirls/test/meangirls.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "35df2403-f0d9-4736-b992-09a25c91d89d",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "takes no arguments and starts value at zero",
      "fullTitle": "constructor takes no arguments and starts value at zero",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(() => new GCounter()).should.not.throw();\nnew GCounter().should.have.property('value', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "9051cb88-0479-488a-98a5-25267a0dc9e1",
      "parentUUID": "116b192c-3c64-4fc6-a4b1-0af91ebb5e06",
      "skipped": false
    },
    {
      "title": "increments the value of the counter",
      "fullTitle": "#update increments the value of the counter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
      "err": {},
      "isRoot": false,
      "uuid": "12a9a97d-98ac-4f38-95ef-f2af2a5e9fef",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "returns the counter that was modified",
      "fullTitle": "#update returns the counter that was modified",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\ncounter.update().should.equal(counter);",
      "err": {},
      "isRoot": false,
      "uuid": "e60f41b2-63b7-4a98-9287-f4b2f16ed6dc",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "accepts any positive Number, defaulting to 1",
      "fullTitle": "#update accepts any positive Number, defaulting to 1",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const r = Math.random();\nconst counter = new GCounter()\ncounter.update(r);\ncounter.should.have.property('value', r);",
      "err": {},
      "isRoot": false,
      "uuid": "c1e87d0f-74cc-437d-a2b4-fa4b83815ddb",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "accepts an \"actor\" Object, defaulting to null",
      "fullTitle": "#update accepts an \"actor\" Object, defaulting to null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
      "err": {},
      "isRoot": false,
      "uuid": "848506a9-a1f8-45a3-8945-ca89d4d51625",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "does not accept negative Numbers, +/-Infinity, nor NaN",
      "fullTitle": "#update does not accept negative Numbers, +/-Infinity, nor NaN",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\n(() => counter.update(-Math.random())).should.throw(Error);\n(() => counter.update(+Infinity)).should.throw(Error);\n(() => counter.update(-Infinity)).should.throw(Error);\n(() => counter.update(NaN)).should.throw(Error);",
      "err": {},
      "isRoot": false,
      "uuid": "6e422d80-c575-4a04-a6e5-c9954aa94e16",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "allows use of JSON as a wire protocol",
      "fullTitle": "static allows use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new GCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = GCounter.fromJSON(GCounter.toJSON(one));\none.should.have.property('value', two.value);",
      "err": {},
      "isRoot": false,
      "uuid": "cf11f418-b073-429d-985e-aca23a5f8ff0",
      "parentUUID": "34220350-0d79-44cd-9544-0e7654c17bfd",
      "skipped": false
    },
    {
      "title": "returns a GCounter Object",
      "fullTitle": "fromJSON returns a GCounter Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const json = { e: { test: Math.random() }, type: 'g-counter' };\nGCounter.fromJSON(json).should.have.property('value', json.e.test);",
      "err": {},
      "isRoot": false,
      "uuid": "002677f7-bbc5-4c84-9270-012c667307b7",
      "parentUUID": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
      "skipped": false
    },
    {
      "title": "throws if given invalid JSON",
      "fullTitle": "fromJSON throws if given invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => GCounter.fromJSON()).should.throw();\n(() => GCounter.fromJSON({ e: unsafe })).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "7161e46f-5241-40ca-bccd-6ae9f980a1d4",
      "parentUUID": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
      "skipped": false
    },
    {
      "title": "combines two GCounters, passed as arguments",
      "fullTitle": "merge combines two GCounters, passed as arguments",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new GCounter();\nconst two = new GCounter();\none.update(1, 'one');\ntwo.update(2, 'two');\nconst three = GCounter.merge(one, two);\nthree.should.be.instanceof(GCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 3);",
      "err": {},
      "isRoot": false,
      "uuid": "5cd3b577-bc98-4378-87a9-ffd2f62fe641",
      "parentUUID": "10cd6d21-f227-4370-b284-e0ba8c52665d",
      "skipped": false
    },
    {
      "title": "will throw if either argument is not a GCounter",
      "fullTitle": "merge will throw if either argument is not a GCounter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new GCounter();\nconst two = new GCounter();\n(() => GCounter.merge(one, null)).should.throw();\n(() => GCounter.merge(null, two)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "2c62f205-7374-48bd-b2ac-14a304761abd",
      "parentUUID": "10cd6d21-f227-4370-b284-e0ba8c52665d",
      "skipped": false
    },
    {
      "title": "returns a JSON Object",
      "fullTitle": "toJSON returns a JSON Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\nconst json = GCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\te: { one: 1, two: 2 },\n\ttype: 'g-counter',\n});",
      "err": {},
      "isRoot": false,
      "uuid": "03129908-f73d-4091-953a-da6067d71f65",
      "parentUUID": "bd8f32c9-fc10-47c8-afd3-da4867459060",
      "skipped": false
    },
    {
      "title": "creates a Set-like Object",
      "fullTitle": "constructor creates a Set-like Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "new GSet().should.have.property('size', 0);\nconst array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new GSet(...array)).should.deepEqual(array);",
      "err": {},
      "isRoot": false,
      "uuid": "2302cf13-1f4a-410a-a372-1f53ec867c1b",
      "parentUUID": "58293d6c-f66f-49dc-a935-a50a3bbbbb7f",
      "skipped": false
    },
    {
      "title": "returns true/false, indicating set membership",
      "fullTitle": "#contains returns true/false, indicating set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new GSet(1); // singleton\nset.contains(1).should.equal(true);\nset.contains(0).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "e0b5f380-3169-45a6-85ef-bde9380aa99e",
      "parentUUID": "d0ed6804-9aeb-49aa-87e0-366d3424409c",
      "skipped": false
    },
    {
      "title": "adds an element and returns the set modified",
      "fullTitle": "#insert adds an element and returns the set modified",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new GSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "3c6b3ad4-8a2b-47f4-9a21-3e31de1e4aaa",
      "parentUUID": "b62d6c06-1764-48ac-9273-36c89a02aa29",
      "skipped": false
    },
    {
      "title": "throws if and only if the GSet contains said element",
      "fullTitle": "#remove throws if and only if the GSet contains said element",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new GSet(1); // singleton\nset.remove(0).should.equal(set); // no-op\n(() => set.remove(1)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "7538ee85-e136-40a0-8bf3-6cbb6a9d87f2",
      "parentUUID": "ece32abf-a0c5-4352-9161-d012361b6102",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements, type: 'g-set' }; // holds 0-9\nGSet.toJSON(GSet.fromJSON(json)).should.deepEqual(json);",
      "err": {},
      "isRoot": false,
      "uuid": "3289bd73-0dd9-4a74-97a9-5704efde7c03",
      "parentUUID": "613a54b9-45b5-4e12-8d06-2d6ea7e79ca4",
      "skipped": false
    },
    {
      "title": "returns a GSet from JSON",
      "fullTitle": "fromJSON returns a GSet from JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = GSet.fromJSON({ e: elements });\nset.should.be.instanceof(GSet);\nset.should.have.property('size', 10);\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "f4b82eaf-7d65-426a-8b4a-ef1eeeb2daee",
      "parentUUID": "5c8c8a85-13e9-4f10-8c0f-4b557945cf35",
      "skipped": false
    },
    {
      "title": "returns JSON from a GSet",
      "fullTitle": "toJSON returns JSON from a GSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = GSet.toJSON(new GSet(...elements));\njson.should.be.instanceof(Object);\njson.should.deepEqual({ e: elements, type: 'g-set' });",
      "err": {},
      "isRoot": false,
      "uuid": "b858ce62-fb00-46ef-9ddc-602470451323",
      "parentUUID": "4c6f5fc4-dab3-406a-8166-f73011a51c22",
      "skipped": false
    },
    {
      "title": "returns a new GSet that combines two GSets",
      "fullTitle": "merge returns a new GSet that combines two GSets",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new GSet(1); // singleton\nconst two = new GSet(2); // singleton\nconst three = GSet.merge(one, two);\nthree.should.be.instanceof(GSet);\nthree.should.have.property('size', 2);\nArray.from(three).should.deepEqual([1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "03660977-28f5-483a-b720-1b67d85b8dba",
      "parentUUID": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
      "skipped": false
    },
    {
      "title": "throws an Error if passed any non-GSet",
      "fullTitle": "merge throws an Error if passed any non-GSet",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new GSet();\n(() => GSet.merge(set, null)).should.throw();\n(() => GSet.merge(null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "965354e5-b4b4-4120-a3b9-ae9d1b048351",
      "parentUUID": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
      "skipped": false
    },
    {
      "title": "creates an empty Set-like object",
      "fullTitle": "constructor creates an empty Set-like object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Array.from(new LWWESet()).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "8a391f3d-1bb5-4cf5-8586-4df9310794d1",
      "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
      "skipped": false
    },
    {
      "title": "perfers additions (a) over removals (r)",
      "fullTitle": "constructor perfers additions (a) over removals (r)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "new LWWESet().should.have.property('bias', 'a');\n(() => new LWWESet({ bias: 'r' })).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "08443284-a930-4cef-b75c-b7e9573320ce",
      "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
      "skipped": false
    },
    {
      "title": "can also be built from options and an initializer list",
      "fullTitle": "constructor can also be built from options and an initializer list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const options = { bias: 'a', zero: new Date() }; // defaults\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new LWWESet(options, ...elements);\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "595676e4-e7c8-4a1e-b451-d8bd6208068c",
      "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
      "skipped": false
    },
    {
      "title": "determines set membership",
      "fullTitle": "#contains determines set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "new LWWESet().contains(0).should.equal(false); // never added, nor removed\nconst options = { zero: new Date(0) }; // use default bias, custom zero point\nnew LWWESet(null, 0).contains(0).should.equal(true); // default zero: new Date()\nnew LWWESet(options, 0).remove(0, options.zero).contains(0).should.equal(true);\nnew LWWESet(options, 0).remove(0, new Date(1)).contains(0).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "85cb045c-2c0f-4959-b5b2-70894fe351ee",
      "parentUUID": "36d1fcee-a1f7-4809-bd8a-397f813f3591",
      "skipped": false
    },
    {
      "title": "updates set membership",
      "fullTitle": "#insert updates set membership",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new LWWESet(null, 0);\nset.insert(0).insert(1).should.equal(set);\nArray.from(set).should.deepEqual([0, 1]);",
      "err": {},
      "isRoot": false,
      "uuid": "7e3445d7-1b97-4693-9544-c79cfa7b488d",
      "parentUUID": "0a3394e6-2dd2-403f-8413-ef8eb3ef236c",
      "skipped": false
    },
    {
      "title": "updates set membership",
      "fullTitle": "#remove updates set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const options = { zero: new Date(0) };\nconst set = new LWWESet(options, 0, 1).remove(1, new Date(1));\nset.remove(2).should.equal(set); // set remains singleton\nArray.from(set).should.deepEqual([0]);",
      "err": {},
      "isRoot": false,
      "uuid": "f797e93d-fd14-43ff-a5ea-503b65abb81c",
      "parentUUID": "5e8b7499-830e-46bb-962a-764b8caffbc3",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e, +new Date()]);\nconst json = { bias: 'a', e, type: 'lww-e-set' };\nLWWESet.toJSON(LWWESet.fromJSON(json)).should.deepEqual(json);",
      "err": {},
      "isRoot": false,
      "uuid": "4c272466-fbed-4c19-8814-d388b5f3d2d6",
      "parentUUID": "445877de-d973-4d9e-a7d7-d4ccc22fc667",
      "skipped": false
    },
    {
      "title": "converts JSON into a new LWWESet",
      "fullTitle": "fromJSON converts JSON into a new LWWESet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e]); // added at same t=zero\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "8bb73f20-c85e-4d27-9bba-7a8ebed09c9a",
      "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
      "skipped": false
    },
    {
      "title": "properly handles additions and removals",
      "fullTitle": "fromJSON properly handles additions and removals",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const e = [[0, 0, 0], [1, 1, 2], [2, 2, 1]];\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual([0, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "9c23d83e-9438-42ef-bebe-fee8ee54f0c3",
      "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
      "skipped": false
    },
    {
      "title": "will throw if given invalid JSON",
      "fullTitle": "fromJSON will throw if given invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const [bias, type] = ['a', 'lww-e-set']; // valid\nconst invalid = (e = null) => ({ bias, e, type });\n(() => LWWESet.fromJSON(invalid())).should.throw();\n(() => LWWESet.fromJSON(invalid([[]]))).should.throw();\n(() => LWWESet.fromJSON(invalid([null]))).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "dcb7de01-99e8-454b-a930-42d606d7c871",
      "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
      "skipped": false
    },
    {
      "title": "combines exactly two LWWESets",
      "fullTitle": "merge combines exactly two LWWESets",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1);\nconst two = new LWWESet(options, 2);\nconst three = LWWESet.merge(null, one, two);\nthree.should.be.instanceof(LWWESet);\nArray.from(three).should.deepEqual([1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "c4ed6f59-d3d7-4cd5-9360-fa8b27a44d68",
      "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
      "skipped": false
    },
    {
      "title": "properly handles additions and removals",
      "fullTitle": "merge properly handles additions and removals",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1, 2).remove(2, new Date(0));\nconst two = new LWWESet(options, 1).remove(1, new Date(1));\nArray.from(LWWESet.merge(null, one, two)).should.deepEqual([2]);",
      "err": {},
      "isRoot": false,
      "uuid": "21218508-4c37-4ac1-b4df-bb06124ffde9",
      "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
      "skipped": false
    },
    {
      "title": "follows last-write-wins sematics",
      "fullTitle": "merge follows last-write-wins sematics",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new LWWESet({ zero: new Date(1) }, 0);\nconst two = new LWWESet({ zero: new Date(0) }, 0);\none.remove(0, new Date(1)).contains(0).should.equal(true);\ntwo.remove(0, new Date(2)).contains(0).should.equal(false);\nLWWESet.merge(null, one, two).contains(0).should.equal(false);\nLWWESet.merge(null, two, one).contains(0).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "ccfbba1f-e5f8-40bd-8b1c-6376f2ac5e09",
      "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
      "skipped": false
    },
    {
      "title": "throws if either argument is not an LWWESet",
      "fullTitle": "merge throws if either argument is not an LWWESet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new LWWESet();\n(() => LWWESet.merge(null, set, null)).should.throw();\n(() => LWWESet.merge(null, null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "5e73f7e2-a56e-4e32-8abb-244693abdeb3",
      "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
      "skipped": false
    },
    {
      "title": "converts a LWWESet into JSON",
      "fullTitle": "toJSON converts a LWWESet into JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new LWWESet();\nset.insert(0, new Date(0));\nset.remove(0, new Date(0));\nconst json = LWWESet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = [[0, 0, 0]]; // both added and removed 0 at t=0\njson.should.deepEqual({ bias: 'a', e, type: 'lww-e-set' });",
      "err": {},
      "isRoot": false,
      "uuid": "6e7dce2d-85ae-4994-8976-d7a2c5f2c8d5",
      "parentUUID": "2c83ece5-f82f-4d9f-b6a5-34b4c36fde6c",
      "skipped": false
    },
    {
      "title": "creates an empty Set-like Object",
      "fullTitle": "constructor creates an empty Set-like Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Array.from(new MCSet()).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "9cd665fd-471d-4cd7-b436-85f17e6cf5ad",
      "parentUUID": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
      "skipped": false
    },
    {
      "title": "acts very similar to the Set constructor",
      "fullTitle": "constructor acts very similar to the Set constructor",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new MCSet(...array)).should.deepEqual(array);",
      "err": {},
      "isRoot": false,
      "uuid": "88603ffa-4827-4d43-9335-e0f631c8691c",
      "parentUUID": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
      "skipped": false
    },
    {
      "title": "determines set membership",
      "fullTitle": "#contains determines set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new MCSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "d0930ddf-7a59-4e8e-ba3b-0e0ea0711648",
      "parentUUID": "a621115d-e24f-48b4-aacc-d242a3e7e220",
      "skipped": false
    },
    {
      "title": "adds elements to the set",
      "fullTitle": "#insert adds elements to the set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new MCSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);\nset.insert(0).insert(1);\nArray.from(set).should.deepEqual([0, 1]);",
      "err": {},
      "isRoot": false,
      "uuid": "40d966fd-7e7a-4c5b-9c01-3edbde1f5416",
      "parentUUID": "27b71018-7bd6-4d86-96e8-ed2da711a0ec",
      "skipped": false
    },
    {
      "title": "removes elements from a set",
      "fullTitle": "#remove removes elements from a set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new MCSet(0, 1);\nArray.from(set).should.deepEqual([0, 1]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([1]);\nset.remove(0).remove(1).remove(2);\nArray.from(set).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "edee895a-1aa0-4e6b-9b22-4667c3f4d374",
      "parentUUID": "0772f75d-cffe-4547-b275-19d15393d95f",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nMCSet.toJSON(MCSet.fromJSON(json)).should.deepEqual(json);",
      "err": {},
      "isRoot": false,
      "uuid": "ae7893ee-e663-4f5b-bc6f-58ad133fde4c",
      "parentUUID": "a42d5194-2776-407b-9143-1318147758d6",
      "skipped": false
    },
    {
      "title": "returns a new MCSet from JSON",
      "fullTitle": "fromJSON returns a new MCSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nconst set = MCSet.fromJSON(json);\nset.should.be.instanceof(MCSet);\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "7583d004-1547-4871-8c54-aeb6486b818d",
      "parentUUID": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
      "skipped": false
    },
    {
      "title": "will throw if given invalid JSON",
      "fullTitle": "fromJSON will throw if given invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const invalid = [[0, 1/2]]; // non-Integer count\n(() => MCSet.fromJSON({ e: invalid })).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "14af89e3-502d-48a4-b624-3aca371013e3",
      "parentUUID": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
      "skipped": false
    },
    {
      "title": "combines two MCSets, returning a new MCSet",
      "fullTitle": "merge combines two MCSets, returning a new MCSet",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new MCSet(1); // singleton\nconst two = new MCSet(2); // singleton\nconst three = MCSet.merge(one, two);\nthree.should.be.instanceof(MCSet);\nArray.from(three).should.deepEqual([1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "ff95d47a-6174-4bb6-882b-9e4e218947aa",
      "parentUUID": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
      "skipped": false
    },
    {
      "title": "throws if either argument is not an MCSet",
      "fullTitle": "merge throws if either argument is not an MCSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new MCSet();\n(() => MCSet.merge(set, null)).should.throw();\n(() => MCSet.merge(null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "58c71859-faf5-4d2e-a63e-5ae185a23c64",
      "parentUUID": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
      "skipped": false
    },
    {
      "title": "returns JSON from an MCSet",
      "fullTitle": "toJSON returns JSON from an MCSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = MCSet.toJSON(new MCSet(...elements))\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, 1]);\njson.should.deepEqual({ e, type: 'mc-set' });",
      "err": {},
      "isRoot": false,
      "uuid": "0f740412-e1f5-44c0-86b7-f3ff31bd3ea1",
      "parentUUID": "28309b3d-d582-42de-b278-0a7e00156ad0",
      "skipped": false
    },
    {
      "title": "creates an empty Set-like object",
      "fullTitle": "constructor creates an empty Set-like object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Array.from(new ORSet()).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "64ddea13-8d92-4347-aa1a-61c9ddff2edc",
      "parentUUID": "53383d6a-a461-4cc8-af6a-9a9271a9fc19",
      "skipped": false
    },
    {
      "title": "determines set membership",
      "fullTitle": "#contains determines set membership",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet(null, 0).insert(1).remove(1);\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);\nset.contains(2).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "5958a406-29e6-4241-97fa-ba403e59776e",
      "parentUUID": "e479815f-b238-4dcb-a603-a6b7b73bf819",
      "skipped": false
    },
    {
      "title": "updates set membership",
      "fullTitle": "#insert updates set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);",
      "err": {},
      "isRoot": false,
      "uuid": "6e264409-855b-4f8b-8676-2f2f94d13685",
      "parentUUID": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
      "skipped": false
    },
    {
      "title": "supports multiple tags",
      "fullTitle": "#insert supports multiple tags",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet();\nset.insert(0, 'a'); // tag: Symbol(0)\nArray.from(set).should.deepEqual([0]);\nset.insert(0, 'b'); // tag: Symbol(1)\nArray.from(set).should.deepEqual([0]);",
      "err": {},
      "isRoot": false,
      "uuid": "ca103d16-8f1f-41ba-ba38-72dfa4a805a8",
      "parentUUID": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
      "skipped": false
    },
    {
      "title": "updates set membership",
      "fullTitle": "#remove updates set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet(null, 0);\nArray.from(set).should.deepEqual([0]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "fba88df5-a5ab-4b99-a0ba-a490ac83ba1c",
      "parentUUID": "2e49952d-745f-44dc-829a-28fffe7f2f67",
      "skipped": false
    },
    {
      "title": "supports multiple tags",
      "fullTitle": "#remove supports multiple tags",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet(null, 0).insert(1, 'a').insert(1, 'a');\nset.remove(0).remove(1, 'a').remove(2);\nArray.from(set).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "ce9f01ea-5a5b-4673-8b71-5e146cc51c49",
      "parentUUID": "2e49952d-745f-44dc-829a-28fffe7f2f67",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = ORSet.toJSON(new ORSet(null, ...elements));\nArray.from(ORSet.fromJSON(json)).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "7d331784-51d7-4402-9015-81fbaa80811b",
      "parentUUID": "a78ede3e-ddf8-438d-a435-fed5f117813e",
      "skipped": false
    },
    {
      "title": "converts JSON into a new ORSet",
      "fullTitle": "fromJSON converts JSON into a new ORSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = ORSet.fromJSON({\n\te: [[0], [1, ['a']], [2, ['a'], ['a']], [3, ['a', 'b'], ['b', 'c']]],\n\ttype: 'or-set',\n});\nset.should.be.instanceof(ORSet);\nArray.from(set).should.deepEqual([0, 1, 3]);",
      "err": {},
      "isRoot": false,
      "uuid": "41a56dd8-8d1d-43f1-8914-af306e6dc827",
      "parentUUID": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
      "skipped": false
    },
    {
      "title": "will throw, if the JSON is invalid",
      "fullTitle": "fromJSON will throw, if the JSON is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const invalid = (e = null) => ({ e, type: 'or-set' });\n(() => ORSet.fromJSON(invalid())).should.throw();\n(() => ORSet.fromJSON(invalid([[]]))).should.throw();\n(() => ORSet.fromJSON(invalid([null]))).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "22a211ef-e2fe-4c89-babd-eddbc5b5afeb",
      "parentUUID": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
      "skipped": false
    },
    {
      "title": "combines exactly two ORSets",
      "fullTitle": "merge combines exactly two ORSets",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new ORSet().insert(1).remove(1);\nconst two = new ORSet().insert(2).remove(2);\nconst three = ORSet.merge(null, one, two);\nthree.should.be.instanceof(ORSet);\nArray.from(three).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "d638ade0-e39c-434f-b995-4f0353605e54",
      "parentUUID": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
      "skipped": false
    },
    {
      "title": "throws if either argument is not an ORSet",
      "fullTitle": "merge throws if either argument is not an ORSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet();\n(() => ORSet.merge(null, set, null)).should.throw();\n(() => ORSet.merge(null, null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "a5d5fe04-bafd-4579-ae99-222168b2ba22",
      "parentUUID": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
      "skipped": false
    },
    {
      "title": "converts a ORSet into JSON",
      "fullTitle": "toJSON converts a ORSet into JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new ORSet(null, ...elements);\nfor (const e of elements) set.remove(e);\nconst json = ORSet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, ['0'], ['0']]);\njson.should.deepEqual({ e, type: 'or-set' });",
      "err": {},
      "isRoot": false,
      "uuid": "99635235-97c4-4b8a-8b67-afc02838e315",
      "parentUUID": "3d20d5b3-112b-45ce-b95b-aca4ecfe29fc",
      "skipped": false
    },
    {
      "title": "takes no arguments and starts value at zero",
      "fullTitle": "constructor takes no arguments and starts value at zero",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(() => new PNCounter()).should.not.throw();\nnew PNCounter().should.have.property('value', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "45e1abc3-e276-4f46-bda3-9a7c8db15a49",
      "parentUUID": "7acf5a16-dccd-43b9-aa2a-768bfc52d0c1",
      "skipped": false
    },
    {
      "title": "increments the value of the counter",
      "fullTitle": "#update increments the value of the counter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
      "err": {},
      "isRoot": false,
      "uuid": "9a10bae6-4164-4b48-bed2-0ea7d9ac89e7",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "returns the counter that was modified",
      "fullTitle": "#update returns the counter that was modified",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\ncounter.update().should.equal(counter);",
      "err": {},
      "isRoot": false,
      "uuid": "ca0a366c-8540-4428-9e16-083cf757b750",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "accepts any Number, defaulting to 1",
      "fullTitle": "#update accepts any Number, defaulting to 1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const positive = +Math.random();\nconst negative = -Math.random();\nconst counter = new PNCounter();\ncounter.update(negative);\ncounter.should.have.property('value', negative);\ncounter.update(positive);\ncounter.should.have.property('value', positive + negative);",
      "err": {},
      "isRoot": false,
      "uuid": "6299d7c3-4d5f-4966-b553-075763cf5570",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "accepts an \"actor\" Object, defaulting to null",
      "fullTitle": "#update accepts an \"actor\" Object, defaulting to null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
      "err": {},
      "isRoot": false,
      "uuid": "b117426e-45cb-4faf-8466-d0d63723d31e",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "does not accept +/-Infinity, nor NaN",
      "fullTitle": "#update does not accept +/-Infinity, nor NaN",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\n(() => counter.update(+Infinity)).should.throw();\n(() => counter.update(-Infinity)).should.throw();\n(() => counter.update(NaN)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "f71bba82-0e13-46cf-b57c-d1bdb089ea06",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "allows use of JSON as a wire protocol",
      "fullTitle": "static allows use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new PNCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = PNCounter.fromJSON(PNCounter.toJSON(one));\none.should.have.property('value', two.value);",
      "err": {},
      "isRoot": false,
      "uuid": "d961fb0f-cf3b-403b-ba2b-f9054f3cc4fa",
      "parentUUID": "c3cb1705-c858-4d6b-88d9-b74410664f5c",
      "skipped": false
    },
    {
      "title": "returns a PNCounter Object",
      "fullTitle": "fromJSON returns a PNCounter Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const json = {\n\tp: { one: Math.random(), two: Math.random() },\n\tn: { one: Math.random(), two: Math.random() },\n\ttype: 'pn-counter',\n};\nconst counter = PNCounter.fromJSON(json);\ncounter.should.be.instanceof(PNCounter);\nconst sum1 = json.p.one + json.p.two;\nconst sum2 = json.n.one + json.n.two;\ncounter.should.have.property('value', sum1 - sum2);",
      "err": {},
      "isRoot": false,
      "uuid": "a7494d55-c2e0-499f-9d7a-02268c6701c7",
      "parentUUID": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
      "skipped": false
    },
    {
      "title": "throws if given invalid JSON",
      "fullTitle": "fromJSON throws if given invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => PNCounter.fromJSON()).should.throw();\n(() => PNCounter.fromJSON({ p: unsafe, n: {} })).should.throw();\n(() => PNCounter.fromJSON({ p: {}, n: unsafe })).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "d098dfa1-a3b7-455d-958a-4f64d42299e2",
      "parentUUID": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
      "skipped": false
    },
    {
      "title": "combines two PNCounters",
      "fullTitle": "merge combines two PNCounters",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new PNCounter();\nconst two = new PNCounter();\none.update(1, 'positive');\none.update(-2, 'negative');\ntwo.update(-1, 'negative');\ntwo.update(2, 'positive');\nconst three = PNCounter.merge(one, two);\nthree.should.be.instanceof(PNCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "d389c1e9-3d5c-47fa-a57f-14f1d8afe98e",
      "parentUUID": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
      "skipped": false
    },
    {
      "title": "will throw if either is not a PNCounter",
      "fullTitle": "merge will throw if either is not a PNCounter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new PNCounter();\nconst two = new PNCounter();\n(() => PNCounter.merge(one, null)).should.throw();\n(() => PNCounter.merge(null, two)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "ce3a46da-a8d3-49f7-bfde-53fb1ef3808e",
      "parentUUID": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
      "skipped": false
    },
    {
      "title": "returns a JSON Object",
      "fullTitle": "toJSON returns a JSON Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(-2, 'two');\nconst json = PNCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\tn: { two: 2 },\n\tp: { one: 1 },\n\ttype: 'pn-counter',\n});",
      "err": {},
      "isRoot": false,
      "uuid": "995ba32a-31b6-48eb-8e08-89d115cd096a",
      "parentUUID": "9954b180-9214-4eb6-8f03-8b9776edccf1",
      "skipped": false
    },
    {
      "title": "creates an empty Set-like Object",
      "fullTitle": "constructor creates an empty Set-like Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "new TwoPSet().should.have.property('size', 0);\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new TwoPSet(...elements);\nset.should.have.property('size', elements.length);\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "b1b5491e-bc06-4afb-a3e1-9e8f0209e256",
      "parentUUID": "d50b74fd-c096-44a9-a010-97006a97382d",
      "skipped": false
    },
    {
      "title": "determines set membership",
      "fullTitle": "#contains determines set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "7d2ea0cc-25d1-4527-9a16-568b9f038cb0",
      "parentUUID": "c2797039-071a-47a0-b034-399e103992a4",
      "skipped": false
    },
    {
      "title": "add an element to the set",
      "fullTitle": "#insert add an element to the set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "ac01a3ca-0b43-438d-a094-49ad13fe9733",
      "parentUUID": "e01e1cc9-bdb7-4d78-ae2d-2f1d82dd2f13",
      "skipped": false
    },
    {
      "title": "removes an element from the set",
      "fullTitle": "#remove removes an element from the set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet();\nset.remove(0).should.equal(set);\nset.should.have.property('size', 0);\nset.insert(0);\nset.should.have.property('size', 1);\nset.remove(0);\nset.should.have.property('size', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "2374c4e3-af38-4a01-9816-db9fab0e8869",
      "parentUUID": "1dd8b3f4-2341-44e8-89ad-089762bef76b",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nTwoPSet.toJSON(TwoPSet.fromJSON(json)).should.deepEqual(json);",
      "err": {},
      "isRoot": false,
      "uuid": "29d2142c-00b5-4a56-9c75-db82a130c535",
      "parentUUID": "ada420a8-32bd-465c-b673-c370e586260d",
      "skipped": false
    },
    {
      "title": "returns JSON",
      "fullTitle": "toJSON returns JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet(1, 2).remove(1);\nconst json = TwoPSet.toJSON(set);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\ta: [1, 2],\n\tr: [1],\n\ttype: '2p-set',\n});",
      "err": {},
      "isRoot": false,
      "uuid": "319b65bc-ccdd-44ea-9d02-bd56a67ae4cf",
      "parentUUID": "2e5d4386-a5f3-474e-bae2-4cac6297f222",
      "skipped": false
    },
    {
      "title": "combines two TwoPSets",
      "fullTitle": "merge combines two TwoPSets",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new TwoPSet(1, 2).remove(2);\nconst two = new TwoPSet(3, 4).remove(3);\nconst three = TwoPSet.merge(one, two);\nthree.should.be.instanceof(TwoPSet);\nArray.from(three).should.deepEqual([1, 4]);",
      "err": {},
      "isRoot": false,
      "uuid": "5144ed5a-ff07-4d23-8293-8bc1893044bd",
      "parentUUID": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
      "skipped": false
    },
    {
      "title": "throws if passed non-TwoPSets",
      "fullTitle": "merge throws if passed non-TwoPSets",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet();\n(() => TwoPSet.merge(set, null)).should.throw();\n(() => TwoPSet.merge(null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "601f102a-3641-49f7-bb74-b7e07ad7da57",
      "parentUUID": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
      "skipped": false
    },
    {
      "title": "returns a TwoPSet",
      "fullTitle": "fromJSON returns a TwoPSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nconst set = TwoPSet.fromJSON(json);\nset.should.be.instanceof(TwoPSet);\nset.should.have.property('size', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "0dae82f4-0d4d-4d8a-bada-d1d9577843b6",
      "parentUUID": "3a24b9ba-e72e-4f7f-9343-a815cfb4f298",
      "skipped": false
    },
    {
      "title": "can join two or more GCounters",
      "fullTitle": "meangirls.merge can join two or more GCounters",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new meangirls.GCounter().update();\nconst two = new meangirls.GCounter().update();\nconst result = meangirls.merge(gc, one, two);\nresult.should.be.instanceof(meangirls.GCounter);",
      "err": {},
      "isRoot": false,
      "uuid": "0390a448-89ce-4bc5-ab38-b78d5321a4e0",
      "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
      "skipped": false
    },
    {
      "title": "can join two or more PNCounters",
      "fullTitle": "meangirls.merge can join two or more PNCounters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new meangirls.PNCounter().update();\nconst two = new meangirls.PNCounter().update();\nconst result = meangirls.merge(pn, one, two);\nresult.should.be.instanceof(meangirls.PNCounter);",
      "err": {},
      "isRoot": false,
      "uuid": "129f917d-e8b4-462e-9234-f0f24aee4b8d",
      "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
      "skipped": false
    },
    {
      "title": "can join two or more GSets",
      "fullTitle": "meangirls.merge can join two or more GSets",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new meangirls.GSet().insert(1);\nconst two = new meangirls.GSet().insert(2);\nconst result = meangirls.merge(gs, one, two);\nresult.should.be.instanceof(meangirls.GSet);",
      "err": {},
      "isRoot": false,
      "uuid": "a9c840ca-8ef1-4633-9ed5-a904606ea086",
      "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
      "skipped": false
    },
    {
      "title": "throws if passed not exactly one kind of CRDT",
      "fullTitle": "meangirls.merge throws if passed not exactly one kind of CRDT",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(() => meangirls.merge()).should.throw();\n(() => meangirls.merge(null)).should.throw();\n(() => meangirls.merge(null, gs)).should.throw();\n(() => meangirls.merge(gc, pn, gs)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "47edbd9b-138b-4523-822a-37b8959093ef",
      "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
      "skipped": false
    },
    {
      "title": "can obtain a GCounter from JSON",
      "fullTitle": "meangirls.parse can obtain a GCounter from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = meangirls.parse({\n\te: {}, // empty\n\ttype: 'g-counter',\n});\ncounter.should.be.instanceof(meangirls.GCounter);",
      "err": {},
      "isRoot": false,
      "uuid": "a0464ccd-195c-4afd-b72b-4ad2aa549225",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain a PNCounter from JSON",
      "fullTitle": "meangirls.parse can obtain a PNCounter from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = meangirls.parse({\n\tp: {}, // empty\n\tn: {}, // empty\n\ttype: 'pn-counter',\n});\ncounter.should.be.instanceof(meangirls.PNCounter);",
      "err": {},
      "isRoot": false,
      "uuid": "fabd3950-3dd1-4581-8ce2-3f72e1af49f0",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain a GSet from JSON",
      "fullTitle": "meangirls.parse can obtain a GSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'g-set',\n});\nset.should.be.instanceof(meangirls.GSet);",
      "err": {},
      "isRoot": false,
      "uuid": "dfabeb8d-ac1e-4c35-b887-0b82bb92697b",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain a TwoPSet from JSON",
      "fullTitle": "meangirls.parse can obtain a TwoPSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\ta: [], // empty\n\tr: [], // empty\n\ttype: '2p-set',\n});\nset.should.be.instanceof(meangirls.TwoPSet);",
      "err": {},
      "isRoot": false,
      "uuid": "69fb0805-5de4-4cc3-99ea-5aef27a09a0f",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain an LWWESet from JSON",
      "fullTitle": "meangirls.parse can obtain an LWWESet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'lww-e-set',\n});\nset.should.be.instanceof(meangirls.LWWESet);",
      "err": {},
      "isRoot": false,
      "uuid": "c9ebf7c7-8234-4987-903e-be3b24c4a7d8",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain an ORSet from JSON",
      "fullTitle": "meangirls.parse can obtain an ORSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'or-set',\n});\nset.should.be.instanceof(meangirls.ORSet);",
      "err": {},
      "isRoot": false,
      "uuid": "597ea642-f0f4-4bc7-9bf0-66677c200122",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain an MCSet from JSON",
      "fullTitle": "meangirls.parse can obtain an MCSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'mc-set',\n});\nset.should.be.instanceof(meangirls.MCSet);",
      "err": {},
      "isRoot": false,
      "uuid": "5ee1b96a-019b-446c-8926-9571b8dae542",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "throws TypeError if passed invalid JSON",
      "fullTitle": "meangirls.parse throws TypeError if passed invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(() => meangirls.parse(/* null */)).should.throw(TypeError);\n(() => meangirls.parse({ type: 'unknown' })).should.throw(TypeError);",
      "err": {},
      "isRoot": false,
      "uuid": "fb6dda08-088b-4252-99b8-74e64a1095eb",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "takes no arguments and starts value at zero",
      "fullTitle": "constructor takes no arguments and starts value at zero",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(() => new GCounter()).should.not.throw();\nnew GCounter().should.have.property('value', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "9051cb88-0479-488a-98a5-25267a0dc9e1",
      "parentUUID": "116b192c-3c64-4fc6-a4b1-0af91ebb5e06",
      "skipped": false
    },
    {
      "title": "increments the value of the counter",
      "fullTitle": "#update increments the value of the counter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
      "err": {},
      "isRoot": false,
      "uuid": "12a9a97d-98ac-4f38-95ef-f2af2a5e9fef",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "returns the counter that was modified",
      "fullTitle": "#update returns the counter that was modified",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\ncounter.update().should.equal(counter);",
      "err": {},
      "isRoot": false,
      "uuid": "e60f41b2-63b7-4a98-9287-f4b2f16ed6dc",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "accepts any positive Number, defaulting to 1",
      "fullTitle": "#update accepts any positive Number, defaulting to 1",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const r = Math.random();\nconst counter = new GCounter()\ncounter.update(r);\ncounter.should.have.property('value', r);",
      "err": {},
      "isRoot": false,
      "uuid": "c1e87d0f-74cc-437d-a2b4-fa4b83815ddb",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "accepts an \"actor\" Object, defaulting to null",
      "fullTitle": "#update accepts an \"actor\" Object, defaulting to null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
      "err": {},
      "isRoot": false,
      "uuid": "848506a9-a1f8-45a3-8945-ca89d4d51625",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "does not accept negative Numbers, +/-Infinity, nor NaN",
      "fullTitle": "#update does not accept negative Numbers, +/-Infinity, nor NaN",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\n(() => counter.update(-Math.random())).should.throw(Error);\n(() => counter.update(+Infinity)).should.throw(Error);\n(() => counter.update(-Infinity)).should.throw(Error);\n(() => counter.update(NaN)).should.throw(Error);",
      "err": {},
      "isRoot": false,
      "uuid": "6e422d80-c575-4a04-a6e5-c9954aa94e16",
      "parentUUID": "89642965-b7f8-4168-82a2-7c99a281d4d3",
      "skipped": false
    },
    {
      "title": "allows use of JSON as a wire protocol",
      "fullTitle": "static allows use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new GCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = GCounter.fromJSON(GCounter.toJSON(one));\none.should.have.property('value', two.value);",
      "err": {},
      "isRoot": false,
      "uuid": "cf11f418-b073-429d-985e-aca23a5f8ff0",
      "parentUUID": "34220350-0d79-44cd-9544-0e7654c17bfd",
      "skipped": false
    },
    {
      "title": "returns a GCounter Object",
      "fullTitle": "fromJSON returns a GCounter Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const json = { e: { test: Math.random() }, type: 'g-counter' };\nGCounter.fromJSON(json).should.have.property('value', json.e.test);",
      "err": {},
      "isRoot": false,
      "uuid": "002677f7-bbc5-4c84-9270-012c667307b7",
      "parentUUID": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
      "skipped": false
    },
    {
      "title": "throws if given invalid JSON",
      "fullTitle": "fromJSON throws if given invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => GCounter.fromJSON()).should.throw();\n(() => GCounter.fromJSON({ e: unsafe })).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "7161e46f-5241-40ca-bccd-6ae9f980a1d4",
      "parentUUID": "efe61b1a-95be-409a-ab0f-24f4cf491a78",
      "skipped": false
    },
    {
      "title": "combines two GCounters, passed as arguments",
      "fullTitle": "merge combines two GCounters, passed as arguments",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new GCounter();\nconst two = new GCounter();\none.update(1, 'one');\ntwo.update(2, 'two');\nconst three = GCounter.merge(one, two);\nthree.should.be.instanceof(GCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 3);",
      "err": {},
      "isRoot": false,
      "uuid": "5cd3b577-bc98-4378-87a9-ffd2f62fe641",
      "parentUUID": "10cd6d21-f227-4370-b284-e0ba8c52665d",
      "skipped": false
    },
    {
      "title": "will throw if either argument is not a GCounter",
      "fullTitle": "merge will throw if either argument is not a GCounter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new GCounter();\nconst two = new GCounter();\n(() => GCounter.merge(one, null)).should.throw();\n(() => GCounter.merge(null, two)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "2c62f205-7374-48bd-b2ac-14a304761abd",
      "parentUUID": "10cd6d21-f227-4370-b284-e0ba8c52665d",
      "skipped": false
    },
    {
      "title": "returns a JSON Object",
      "fullTitle": "toJSON returns a JSON Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\nconst json = GCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\te: { one: 1, two: 2 },\n\ttype: 'g-counter',\n});",
      "err": {},
      "isRoot": false,
      "uuid": "03129908-f73d-4091-953a-da6067d71f65",
      "parentUUID": "bd8f32c9-fc10-47c8-afd3-da4867459060",
      "skipped": false
    },
    {
      "title": "creates a Set-like Object",
      "fullTitle": "constructor creates a Set-like Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "new GSet().should.have.property('size', 0);\nconst array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new GSet(...array)).should.deepEqual(array);",
      "err": {},
      "isRoot": false,
      "uuid": "2302cf13-1f4a-410a-a372-1f53ec867c1b",
      "parentUUID": "58293d6c-f66f-49dc-a935-a50a3bbbbb7f",
      "skipped": false
    },
    {
      "title": "returns true/false, indicating set membership",
      "fullTitle": "#contains returns true/false, indicating set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new GSet(1); // singleton\nset.contains(1).should.equal(true);\nset.contains(0).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "e0b5f380-3169-45a6-85ef-bde9380aa99e",
      "parentUUID": "d0ed6804-9aeb-49aa-87e0-366d3424409c",
      "skipped": false
    },
    {
      "title": "adds an element and returns the set modified",
      "fullTitle": "#insert adds an element and returns the set modified",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new GSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "3c6b3ad4-8a2b-47f4-9a21-3e31de1e4aaa",
      "parentUUID": "b62d6c06-1764-48ac-9273-36c89a02aa29",
      "skipped": false
    },
    {
      "title": "throws if and only if the GSet contains said element",
      "fullTitle": "#remove throws if and only if the GSet contains said element",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new GSet(1); // singleton\nset.remove(0).should.equal(set); // no-op\n(() => set.remove(1)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "7538ee85-e136-40a0-8bf3-6cbb6a9d87f2",
      "parentUUID": "ece32abf-a0c5-4352-9161-d012361b6102",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements, type: 'g-set' }; // holds 0-9\nGSet.toJSON(GSet.fromJSON(json)).should.deepEqual(json);",
      "err": {},
      "isRoot": false,
      "uuid": "3289bd73-0dd9-4a74-97a9-5704efde7c03",
      "parentUUID": "613a54b9-45b5-4e12-8d06-2d6ea7e79ca4",
      "skipped": false
    },
    {
      "title": "returns a GSet from JSON",
      "fullTitle": "fromJSON returns a GSet from JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = GSet.fromJSON({ e: elements });\nset.should.be.instanceof(GSet);\nset.should.have.property('size', 10);\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "f4b82eaf-7d65-426a-8b4a-ef1eeeb2daee",
      "parentUUID": "5c8c8a85-13e9-4f10-8c0f-4b557945cf35",
      "skipped": false
    },
    {
      "title": "returns JSON from a GSet",
      "fullTitle": "toJSON returns JSON from a GSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = GSet.toJSON(new GSet(...elements));\njson.should.be.instanceof(Object);\njson.should.deepEqual({ e: elements, type: 'g-set' });",
      "err": {},
      "isRoot": false,
      "uuid": "b858ce62-fb00-46ef-9ddc-602470451323",
      "parentUUID": "4c6f5fc4-dab3-406a-8166-f73011a51c22",
      "skipped": false
    },
    {
      "title": "returns a new GSet that combines two GSets",
      "fullTitle": "merge returns a new GSet that combines two GSets",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new GSet(1); // singleton\nconst two = new GSet(2); // singleton\nconst three = GSet.merge(one, two);\nthree.should.be.instanceof(GSet);\nthree.should.have.property('size', 2);\nArray.from(three).should.deepEqual([1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "03660977-28f5-483a-b720-1b67d85b8dba",
      "parentUUID": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
      "skipped": false
    },
    {
      "title": "throws an Error if passed any non-GSet",
      "fullTitle": "merge throws an Error if passed any non-GSet",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new GSet();\n(() => GSet.merge(set, null)).should.throw();\n(() => GSet.merge(null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "965354e5-b4b4-4120-a3b9-ae9d1b048351",
      "parentUUID": "0b9d53db-7968-4357-8c15-8fc65e1e8089",
      "skipped": false
    },
    {
      "title": "creates an empty Set-like object",
      "fullTitle": "constructor creates an empty Set-like object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Array.from(new LWWESet()).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "8a391f3d-1bb5-4cf5-8586-4df9310794d1",
      "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
      "skipped": false
    },
    {
      "title": "perfers additions (a) over removals (r)",
      "fullTitle": "constructor perfers additions (a) over removals (r)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "new LWWESet().should.have.property('bias', 'a');\n(() => new LWWESet({ bias: 'r' })).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "08443284-a930-4cef-b75c-b7e9573320ce",
      "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
      "skipped": false
    },
    {
      "title": "can also be built from options and an initializer list",
      "fullTitle": "constructor can also be built from options and an initializer list",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const options = { bias: 'a', zero: new Date() }; // defaults\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new LWWESet(options, ...elements);\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "595676e4-e7c8-4a1e-b451-d8bd6208068c",
      "parentUUID": "d4f80c70-1eee-4d0c-9399-fa88373d81d3",
      "skipped": false
    },
    {
      "title": "determines set membership",
      "fullTitle": "#contains determines set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "new LWWESet().contains(0).should.equal(false); // never added, nor removed\nconst options = { zero: new Date(0) }; // use default bias, custom zero point\nnew LWWESet(null, 0).contains(0).should.equal(true); // default zero: new Date()\nnew LWWESet(options, 0).remove(0, options.zero).contains(0).should.equal(true);\nnew LWWESet(options, 0).remove(0, new Date(1)).contains(0).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "85cb045c-2c0f-4959-b5b2-70894fe351ee",
      "parentUUID": "36d1fcee-a1f7-4809-bd8a-397f813f3591",
      "skipped": false
    },
    {
      "title": "updates set membership",
      "fullTitle": "#insert updates set membership",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new LWWESet(null, 0);\nset.insert(0).insert(1).should.equal(set);\nArray.from(set).should.deepEqual([0, 1]);",
      "err": {},
      "isRoot": false,
      "uuid": "7e3445d7-1b97-4693-9544-c79cfa7b488d",
      "parentUUID": "0a3394e6-2dd2-403f-8413-ef8eb3ef236c",
      "skipped": false
    },
    {
      "title": "updates set membership",
      "fullTitle": "#remove updates set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const options = { zero: new Date(0) };\nconst set = new LWWESet(options, 0, 1).remove(1, new Date(1));\nset.remove(2).should.equal(set); // set remains singleton\nArray.from(set).should.deepEqual([0]);",
      "err": {},
      "isRoot": false,
      "uuid": "f797e93d-fd14-43ff-a5ea-503b65abb81c",
      "parentUUID": "5e8b7499-830e-46bb-962a-764b8caffbc3",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e, +new Date()]);\nconst json = { bias: 'a', e, type: 'lww-e-set' };\nLWWESet.toJSON(LWWESet.fromJSON(json)).should.deepEqual(json);",
      "err": {},
      "isRoot": false,
      "uuid": "4c272466-fbed-4c19-8814-d388b5f3d2d6",
      "parentUUID": "445877de-d973-4d9e-a7d7-d4ccc22fc667",
      "skipped": false
    },
    {
      "title": "converts JSON into a new LWWESet",
      "fullTitle": "fromJSON converts JSON into a new LWWESet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e]); // added at same t=zero\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "8bb73f20-c85e-4d27-9bba-7a8ebed09c9a",
      "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
      "skipped": false
    },
    {
      "title": "properly handles additions and removals",
      "fullTitle": "fromJSON properly handles additions and removals",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const e = [[0, 0, 0], [1, 1, 2], [2, 2, 1]];\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual([0, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "9c23d83e-9438-42ef-bebe-fee8ee54f0c3",
      "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
      "skipped": false
    },
    {
      "title": "will throw if given invalid JSON",
      "fullTitle": "fromJSON will throw if given invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const [bias, type] = ['a', 'lww-e-set']; // valid\nconst invalid = (e = null) => ({ bias, e, type });\n(() => LWWESet.fromJSON(invalid())).should.throw();\n(() => LWWESet.fromJSON(invalid([[]]))).should.throw();\n(() => LWWESet.fromJSON(invalid([null]))).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "dcb7de01-99e8-454b-a930-42d606d7c871",
      "parentUUID": "a5474c44-13c4-4efd-a6cf-30b5cc7400a6",
      "skipped": false
    },
    {
      "title": "combines exactly two LWWESets",
      "fullTitle": "merge combines exactly two LWWESets",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1);\nconst two = new LWWESet(options, 2);\nconst three = LWWESet.merge(null, one, two);\nthree.should.be.instanceof(LWWESet);\nArray.from(three).should.deepEqual([1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "c4ed6f59-d3d7-4cd5-9360-fa8b27a44d68",
      "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
      "skipped": false
    },
    {
      "title": "properly handles additions and removals",
      "fullTitle": "merge properly handles additions and removals",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1, 2).remove(2, new Date(0));\nconst two = new LWWESet(options, 1).remove(1, new Date(1));\nArray.from(LWWESet.merge(null, one, two)).should.deepEqual([2]);",
      "err": {},
      "isRoot": false,
      "uuid": "21218508-4c37-4ac1-b4df-bb06124ffde9",
      "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
      "skipped": false
    },
    {
      "title": "follows last-write-wins sematics",
      "fullTitle": "merge follows last-write-wins sematics",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new LWWESet({ zero: new Date(1) }, 0);\nconst two = new LWWESet({ zero: new Date(0) }, 0);\none.remove(0, new Date(1)).contains(0).should.equal(true);\ntwo.remove(0, new Date(2)).contains(0).should.equal(false);\nLWWESet.merge(null, one, two).contains(0).should.equal(false);\nLWWESet.merge(null, two, one).contains(0).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "ccfbba1f-e5f8-40bd-8b1c-6376f2ac5e09",
      "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
      "skipped": false
    },
    {
      "title": "throws if either argument is not an LWWESet",
      "fullTitle": "merge throws if either argument is not an LWWESet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new LWWESet();\n(() => LWWESet.merge(null, set, null)).should.throw();\n(() => LWWESet.merge(null, null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "5e73f7e2-a56e-4e32-8abb-244693abdeb3",
      "parentUUID": "ec767c41-7d7c-49b0-adb9-c6f85e4063e1",
      "skipped": false
    },
    {
      "title": "converts a LWWESet into JSON",
      "fullTitle": "toJSON converts a LWWESet into JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new LWWESet();\nset.insert(0, new Date(0));\nset.remove(0, new Date(0));\nconst json = LWWESet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = [[0, 0, 0]]; // both added and removed 0 at t=0\njson.should.deepEqual({ bias: 'a', e, type: 'lww-e-set' });",
      "err": {},
      "isRoot": false,
      "uuid": "6e7dce2d-85ae-4994-8976-d7a2c5f2c8d5",
      "parentUUID": "2c83ece5-f82f-4d9f-b6a5-34b4c36fde6c",
      "skipped": false
    },
    {
      "title": "creates an empty Set-like Object",
      "fullTitle": "constructor creates an empty Set-like Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Array.from(new MCSet()).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "9cd665fd-471d-4cd7-b436-85f17e6cf5ad",
      "parentUUID": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
      "skipped": false
    },
    {
      "title": "acts very similar to the Set constructor",
      "fullTitle": "constructor acts very similar to the Set constructor",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new MCSet(...array)).should.deepEqual(array);",
      "err": {},
      "isRoot": false,
      "uuid": "88603ffa-4827-4d43-9335-e0f631c8691c",
      "parentUUID": "21b1b8e6-47a3-41b0-89d9-4dc1546c42bf",
      "skipped": false
    },
    {
      "title": "determines set membership",
      "fullTitle": "#contains determines set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new MCSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "d0930ddf-7a59-4e8e-ba3b-0e0ea0711648",
      "parentUUID": "a621115d-e24f-48b4-aacc-d242a3e7e220",
      "skipped": false
    },
    {
      "title": "adds elements to the set",
      "fullTitle": "#insert adds elements to the set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new MCSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);\nset.insert(0).insert(1);\nArray.from(set).should.deepEqual([0, 1]);",
      "err": {},
      "isRoot": false,
      "uuid": "40d966fd-7e7a-4c5b-9c01-3edbde1f5416",
      "parentUUID": "27b71018-7bd6-4d86-96e8-ed2da711a0ec",
      "skipped": false
    },
    {
      "title": "removes elements from a set",
      "fullTitle": "#remove removes elements from a set",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new MCSet(0, 1);\nArray.from(set).should.deepEqual([0, 1]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([1]);\nset.remove(0).remove(1).remove(2);\nArray.from(set).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "edee895a-1aa0-4e6b-9b22-4667c3f4d374",
      "parentUUID": "0772f75d-cffe-4547-b275-19d15393d95f",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nMCSet.toJSON(MCSet.fromJSON(json)).should.deepEqual(json);",
      "err": {},
      "isRoot": false,
      "uuid": "ae7893ee-e663-4f5b-bc6f-58ad133fde4c",
      "parentUUID": "a42d5194-2776-407b-9143-1318147758d6",
      "skipped": false
    },
    {
      "title": "returns a new MCSet from JSON",
      "fullTitle": "fromJSON returns a new MCSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nconst set = MCSet.fromJSON(json);\nset.should.be.instanceof(MCSet);\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "7583d004-1547-4871-8c54-aeb6486b818d",
      "parentUUID": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
      "skipped": false
    },
    {
      "title": "will throw if given invalid JSON",
      "fullTitle": "fromJSON will throw if given invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const invalid = [[0, 1/2]]; // non-Integer count\n(() => MCSet.fromJSON({ e: invalid })).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "14af89e3-502d-48a4-b624-3aca371013e3",
      "parentUUID": "e1e2198f-0f0f-4f73-8ec9-f6fd5b889a49",
      "skipped": false
    },
    {
      "title": "combines two MCSets, returning a new MCSet",
      "fullTitle": "merge combines two MCSets, returning a new MCSet",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new MCSet(1); // singleton\nconst two = new MCSet(2); // singleton\nconst three = MCSet.merge(one, two);\nthree.should.be.instanceof(MCSet);\nArray.from(three).should.deepEqual([1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "ff95d47a-6174-4bb6-882b-9e4e218947aa",
      "parentUUID": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
      "skipped": false
    },
    {
      "title": "throws if either argument is not an MCSet",
      "fullTitle": "merge throws if either argument is not an MCSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new MCSet();\n(() => MCSet.merge(set, null)).should.throw();\n(() => MCSet.merge(null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "58c71859-faf5-4d2e-a63e-5ae185a23c64",
      "parentUUID": "c67dab95-418e-4c4f-b015-9c2a5ffdd16c",
      "skipped": false
    },
    {
      "title": "returns JSON from an MCSet",
      "fullTitle": "toJSON returns JSON from an MCSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = MCSet.toJSON(new MCSet(...elements))\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, 1]);\njson.should.deepEqual({ e, type: 'mc-set' });",
      "err": {},
      "isRoot": false,
      "uuid": "0f740412-e1f5-44c0-86b7-f3ff31bd3ea1",
      "parentUUID": "28309b3d-d582-42de-b278-0a7e00156ad0",
      "skipped": false
    },
    {
      "title": "creates an empty Set-like object",
      "fullTitle": "constructor creates an empty Set-like object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Array.from(new ORSet()).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "64ddea13-8d92-4347-aa1a-61c9ddff2edc",
      "parentUUID": "53383d6a-a461-4cc8-af6a-9a9271a9fc19",
      "skipped": false
    },
    {
      "title": "determines set membership",
      "fullTitle": "#contains determines set membership",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet(null, 0).insert(1).remove(1);\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);\nset.contains(2).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "5958a406-29e6-4241-97fa-ba403e59776e",
      "parentUUID": "e479815f-b238-4dcb-a603-a6b7b73bf819",
      "skipped": false
    },
    {
      "title": "updates set membership",
      "fullTitle": "#insert updates set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);",
      "err": {},
      "isRoot": false,
      "uuid": "6e264409-855b-4f8b-8676-2f2f94d13685",
      "parentUUID": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
      "skipped": false
    },
    {
      "title": "supports multiple tags",
      "fullTitle": "#insert supports multiple tags",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet();\nset.insert(0, 'a'); // tag: Symbol(0)\nArray.from(set).should.deepEqual([0]);\nset.insert(0, 'b'); // tag: Symbol(1)\nArray.from(set).should.deepEqual([0]);",
      "err": {},
      "isRoot": false,
      "uuid": "ca103d16-8f1f-41ba-ba38-72dfa4a805a8",
      "parentUUID": "0644a810-fcd9-4ae3-b6ba-39a171c09d7d",
      "skipped": false
    },
    {
      "title": "updates set membership",
      "fullTitle": "#remove updates set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet(null, 0);\nArray.from(set).should.deepEqual([0]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "fba88df5-a5ab-4b99-a0ba-a490ac83ba1c",
      "parentUUID": "2e49952d-745f-44dc-829a-28fffe7f2f67",
      "skipped": false
    },
    {
      "title": "supports multiple tags",
      "fullTitle": "#remove supports multiple tags",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet(null, 0).insert(1, 'a').insert(1, 'a');\nset.remove(0).remove(1, 'a').remove(2);\nArray.from(set).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "ce9f01ea-5a5b-4673-8b71-5e146cc51c49",
      "parentUUID": "2e49952d-745f-44dc-829a-28fffe7f2f67",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = ORSet.toJSON(new ORSet(null, ...elements));\nArray.from(ORSet.fromJSON(json)).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "7d331784-51d7-4402-9015-81fbaa80811b",
      "parentUUID": "a78ede3e-ddf8-438d-a435-fed5f117813e",
      "skipped": false
    },
    {
      "title": "converts JSON into a new ORSet",
      "fullTitle": "fromJSON converts JSON into a new ORSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = ORSet.fromJSON({\n\te: [[0], [1, ['a']], [2, ['a'], ['a']], [3, ['a', 'b'], ['b', 'c']]],\n\ttype: 'or-set',\n});\nset.should.be.instanceof(ORSet);\nArray.from(set).should.deepEqual([0, 1, 3]);",
      "err": {},
      "isRoot": false,
      "uuid": "41a56dd8-8d1d-43f1-8914-af306e6dc827",
      "parentUUID": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
      "skipped": false
    },
    {
      "title": "will throw, if the JSON is invalid",
      "fullTitle": "fromJSON will throw, if the JSON is invalid",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const invalid = (e = null) => ({ e, type: 'or-set' });\n(() => ORSet.fromJSON(invalid())).should.throw();\n(() => ORSet.fromJSON(invalid([[]]))).should.throw();\n(() => ORSet.fromJSON(invalid([null]))).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "22a211ef-e2fe-4c89-babd-eddbc5b5afeb",
      "parentUUID": "b5c9578a-b7ba-4f19-b965-a932cdaa1fa5",
      "skipped": false
    },
    {
      "title": "combines exactly two ORSets",
      "fullTitle": "merge combines exactly two ORSets",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new ORSet().insert(1).remove(1);\nconst two = new ORSet().insert(2).remove(2);\nconst three = ORSet.merge(null, one, two);\nthree.should.be.instanceof(ORSet);\nArray.from(three).should.deepEqual([]);",
      "err": {},
      "isRoot": false,
      "uuid": "d638ade0-e39c-434f-b995-4f0353605e54",
      "parentUUID": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
      "skipped": false
    },
    {
      "title": "throws if either argument is not an ORSet",
      "fullTitle": "merge throws if either argument is not an ORSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new ORSet();\n(() => ORSet.merge(null, set, null)).should.throw();\n(() => ORSet.merge(null, null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "a5d5fe04-bafd-4579-ae99-222168b2ba22",
      "parentUUID": "cc8fd636-1297-47ce-a475-cef0a2fa7c51",
      "skipped": false
    },
    {
      "title": "converts a ORSet into JSON",
      "fullTitle": "toJSON converts a ORSet into JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new ORSet(null, ...elements);\nfor (const e of elements) set.remove(e);\nconst json = ORSet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, ['0'], ['0']]);\njson.should.deepEqual({ e, type: 'or-set' });",
      "err": {},
      "isRoot": false,
      "uuid": "99635235-97c4-4b8a-8b67-afc02838e315",
      "parentUUID": "3d20d5b3-112b-45ce-b95b-aca4ecfe29fc",
      "skipped": false
    },
    {
      "title": "takes no arguments and starts value at zero",
      "fullTitle": "constructor takes no arguments and starts value at zero",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(() => new PNCounter()).should.not.throw();\nnew PNCounter().should.have.property('value', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "45e1abc3-e276-4f46-bda3-9a7c8db15a49",
      "parentUUID": "7acf5a16-dccd-43b9-aa2a-768bfc52d0c1",
      "skipped": false
    },
    {
      "title": "increments the value of the counter",
      "fullTitle": "#update increments the value of the counter",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
      "err": {},
      "isRoot": false,
      "uuid": "9a10bae6-4164-4b48-bed2-0ea7d9ac89e7",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "returns the counter that was modified",
      "fullTitle": "#update returns the counter that was modified",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\ncounter.update().should.equal(counter);",
      "err": {},
      "isRoot": false,
      "uuid": "ca0a366c-8540-4428-9e16-083cf757b750",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "accepts any Number, defaulting to 1",
      "fullTitle": "#update accepts any Number, defaulting to 1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const positive = +Math.random();\nconst negative = -Math.random();\nconst counter = new PNCounter();\ncounter.update(negative);\ncounter.should.have.property('value', negative);\ncounter.update(positive);\ncounter.should.have.property('value', positive + negative);",
      "err": {},
      "isRoot": false,
      "uuid": "6299d7c3-4d5f-4966-b553-075763cf5570",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "accepts an \"actor\" Object, defaulting to null",
      "fullTitle": "#update accepts an \"actor\" Object, defaulting to null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
      "err": {},
      "isRoot": false,
      "uuid": "b117426e-45cb-4faf-8466-d0d63723d31e",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "does not accept +/-Infinity, nor NaN",
      "fullTitle": "#update does not accept +/-Infinity, nor NaN",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\n(() => counter.update(+Infinity)).should.throw();\n(() => counter.update(-Infinity)).should.throw();\n(() => counter.update(NaN)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "f71bba82-0e13-46cf-b57c-d1bdb089ea06",
      "parentUUID": "eb4efad9-c127-4ce0-9744-5b76b475d5d0",
      "skipped": false
    },
    {
      "title": "allows use of JSON as a wire protocol",
      "fullTitle": "static allows use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new PNCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = PNCounter.fromJSON(PNCounter.toJSON(one));\none.should.have.property('value', two.value);",
      "err": {},
      "isRoot": false,
      "uuid": "d961fb0f-cf3b-403b-ba2b-f9054f3cc4fa",
      "parentUUID": "c3cb1705-c858-4d6b-88d9-b74410664f5c",
      "skipped": false
    },
    {
      "title": "returns a PNCounter Object",
      "fullTitle": "fromJSON returns a PNCounter Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const json = {\n\tp: { one: Math.random(), two: Math.random() },\n\tn: { one: Math.random(), two: Math.random() },\n\ttype: 'pn-counter',\n};\nconst counter = PNCounter.fromJSON(json);\ncounter.should.be.instanceof(PNCounter);\nconst sum1 = json.p.one + json.p.two;\nconst sum2 = json.n.one + json.n.two;\ncounter.should.have.property('value', sum1 - sum2);",
      "err": {},
      "isRoot": false,
      "uuid": "a7494d55-c2e0-499f-9d7a-02268c6701c7",
      "parentUUID": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
      "skipped": false
    },
    {
      "title": "throws if given invalid JSON",
      "fullTitle": "fromJSON throws if given invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => PNCounter.fromJSON()).should.throw();\n(() => PNCounter.fromJSON({ p: unsafe, n: {} })).should.throw();\n(() => PNCounter.fromJSON({ p: {}, n: unsafe })).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "d098dfa1-a3b7-455d-958a-4f64d42299e2",
      "parentUUID": "e3650a9e-30cd-4a2d-b670-504a0c31f205",
      "skipped": false
    },
    {
      "title": "combines two PNCounters",
      "fullTitle": "merge combines two PNCounters",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new PNCounter();\nconst two = new PNCounter();\none.update(1, 'positive');\none.update(-2, 'negative');\ntwo.update(-1, 'negative');\ntwo.update(2, 'positive');\nconst three = PNCounter.merge(one, two);\nthree.should.be.instanceof(PNCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "d389c1e9-3d5c-47fa-a57f-14f1d8afe98e",
      "parentUUID": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
      "skipped": false
    },
    {
      "title": "will throw if either is not a PNCounter",
      "fullTitle": "merge will throw if either is not a PNCounter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new PNCounter();\nconst two = new PNCounter();\n(() => PNCounter.merge(one, null)).should.throw();\n(() => PNCounter.merge(null, two)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "ce3a46da-a8d3-49f7-bfde-53fb1ef3808e",
      "parentUUID": "5e58f13d-5ce0-49ef-937b-2df7644625c5",
      "skipped": false
    },
    {
      "title": "returns a JSON Object",
      "fullTitle": "toJSON returns a JSON Object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(-2, 'two');\nconst json = PNCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\tn: { two: 2 },\n\tp: { one: 1 },\n\ttype: 'pn-counter',\n});",
      "err": {},
      "isRoot": false,
      "uuid": "995ba32a-31b6-48eb-8e08-89d115cd096a",
      "parentUUID": "9954b180-9214-4eb6-8f03-8b9776edccf1",
      "skipped": false
    },
    {
      "title": "creates an empty Set-like Object",
      "fullTitle": "constructor creates an empty Set-like Object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "new TwoPSet().should.have.property('size', 0);\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new TwoPSet(...elements);\nset.should.have.property('size', elements.length);\nArray.from(set).should.deepEqual(elements);",
      "err": {},
      "isRoot": false,
      "uuid": "b1b5491e-bc06-4afb-a3e1-9e8f0209e256",
      "parentUUID": "d50b74fd-c096-44a9-a010-97006a97382d",
      "skipped": false
    },
    {
      "title": "determines set membership",
      "fullTitle": "#contains determines set membership",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
      "err": {},
      "isRoot": false,
      "uuid": "7d2ea0cc-25d1-4527-9a16-568b9f038cb0",
      "parentUUID": "c2797039-071a-47a0-b034-399e103992a4",
      "skipped": false
    },
    {
      "title": "add an element to the set",
      "fullTitle": "#insert add an element to the set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
      "err": {},
      "isRoot": false,
      "uuid": "ac01a3ca-0b43-438d-a094-49ad13fe9733",
      "parentUUID": "e01e1cc9-bdb7-4d78-ae2d-2f1d82dd2f13",
      "skipped": false
    },
    {
      "title": "removes an element from the set",
      "fullTitle": "#remove removes an element from the set",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet();\nset.remove(0).should.equal(set);\nset.should.have.property('size', 0);\nset.insert(0);\nset.should.have.property('size', 1);\nset.remove(0);\nset.should.have.property('size', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "2374c4e3-af38-4a01-9816-db9fab0e8869",
      "parentUUID": "1dd8b3f4-2341-44e8-89ad-089762bef76b",
      "skipped": false
    },
    {
      "title": "enables use of JSON as a wire protocol",
      "fullTitle": "static enables use of JSON as a wire protocol",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nTwoPSet.toJSON(TwoPSet.fromJSON(json)).should.deepEqual(json);",
      "err": {},
      "isRoot": false,
      "uuid": "29d2142c-00b5-4a56-9c75-db82a130c535",
      "parentUUID": "ada420a8-32bd-465c-b673-c370e586260d",
      "skipped": false
    },
    {
      "title": "returns JSON",
      "fullTitle": "toJSON returns JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet(1, 2).remove(1);\nconst json = TwoPSet.toJSON(set);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\ta: [1, 2],\n\tr: [1],\n\ttype: '2p-set',\n});",
      "err": {},
      "isRoot": false,
      "uuid": "319b65bc-ccdd-44ea-9d02-bd56a67ae4cf",
      "parentUUID": "2e5d4386-a5f3-474e-bae2-4cac6297f222",
      "skipped": false
    },
    {
      "title": "combines two TwoPSets",
      "fullTitle": "merge combines two TwoPSets",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new TwoPSet(1, 2).remove(2);\nconst two = new TwoPSet(3, 4).remove(3);\nconst three = TwoPSet.merge(one, two);\nthree.should.be.instanceof(TwoPSet);\nArray.from(three).should.deepEqual([1, 4]);",
      "err": {},
      "isRoot": false,
      "uuid": "5144ed5a-ff07-4d23-8293-8bc1893044bd",
      "parentUUID": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
      "skipped": false
    },
    {
      "title": "throws if passed non-TwoPSets",
      "fullTitle": "merge throws if passed non-TwoPSets",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = new TwoPSet();\n(() => TwoPSet.merge(set, null)).should.throw();\n(() => TwoPSet.merge(null, set)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "601f102a-3641-49f7-bb74-b7e07ad7da57",
      "parentUUID": "fa0291d8-f6ca-49fd-89a9-5be0c8d4e0a6",
      "skipped": false
    },
    {
      "title": "returns a TwoPSet",
      "fullTitle": "fromJSON returns a TwoPSet",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nconst set = TwoPSet.fromJSON(json);\nset.should.be.instanceof(TwoPSet);\nset.should.have.property('size', 0);",
      "err": {},
      "isRoot": false,
      "uuid": "0dae82f4-0d4d-4d8a-bada-d1d9577843b6",
      "parentUUID": "3a24b9ba-e72e-4f7f-9343-a815cfb4f298",
      "skipped": false
    },
    {
      "title": "can join two or more GCounters",
      "fullTitle": "meangirls.merge can join two or more GCounters",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new meangirls.GCounter().update();\nconst two = new meangirls.GCounter().update();\nconst result = meangirls.merge(gc, one, two);\nresult.should.be.instanceof(meangirls.GCounter);",
      "err": {},
      "isRoot": false,
      "uuid": "0390a448-89ce-4bc5-ab38-b78d5321a4e0",
      "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
      "skipped": false
    },
    {
      "title": "can join two or more PNCounters",
      "fullTitle": "meangirls.merge can join two or more PNCounters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new meangirls.PNCounter().update();\nconst two = new meangirls.PNCounter().update();\nconst result = meangirls.merge(pn, one, two);\nresult.should.be.instanceof(meangirls.PNCounter);",
      "err": {},
      "isRoot": false,
      "uuid": "129f917d-e8b4-462e-9234-f0f24aee4b8d",
      "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
      "skipped": false
    },
    {
      "title": "can join two or more GSets",
      "fullTitle": "meangirls.merge can join two or more GSets",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const one = new meangirls.GSet().insert(1);\nconst two = new meangirls.GSet().insert(2);\nconst result = meangirls.merge(gs, one, two);\nresult.should.be.instanceof(meangirls.GSet);",
      "err": {},
      "isRoot": false,
      "uuid": "a9c840ca-8ef1-4633-9ed5-a904606ea086",
      "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
      "skipped": false
    },
    {
      "title": "throws if passed not exactly one kind of CRDT",
      "fullTitle": "meangirls.merge throws if passed not exactly one kind of CRDT",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(() => meangirls.merge()).should.throw();\n(() => meangirls.merge(null)).should.throw();\n(() => meangirls.merge(null, gs)).should.throw();\n(() => meangirls.merge(gc, pn, gs)).should.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "47edbd9b-138b-4523-822a-37b8959093ef",
      "parentUUID": "cefd70e0-e404-43a6-b4d6-4a22f9dbaa89",
      "skipped": false
    },
    {
      "title": "can obtain a GCounter from JSON",
      "fullTitle": "meangirls.parse can obtain a GCounter from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = meangirls.parse({\n\te: {}, // empty\n\ttype: 'g-counter',\n});\ncounter.should.be.instanceof(meangirls.GCounter);",
      "err": {},
      "isRoot": false,
      "uuid": "a0464ccd-195c-4afd-b72b-4ad2aa549225",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain a PNCounter from JSON",
      "fullTitle": "meangirls.parse can obtain a PNCounter from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const counter = meangirls.parse({\n\tp: {}, // empty\n\tn: {}, // empty\n\ttype: 'pn-counter',\n});\ncounter.should.be.instanceof(meangirls.PNCounter);",
      "err": {},
      "isRoot": false,
      "uuid": "fabd3950-3dd1-4581-8ce2-3f72e1af49f0",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain a GSet from JSON",
      "fullTitle": "meangirls.parse can obtain a GSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'g-set',\n});\nset.should.be.instanceof(meangirls.GSet);",
      "err": {},
      "isRoot": false,
      "uuid": "dfabeb8d-ac1e-4c35-b887-0b82bb92697b",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain a TwoPSet from JSON",
      "fullTitle": "meangirls.parse can obtain a TwoPSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\ta: [], // empty\n\tr: [], // empty\n\ttype: '2p-set',\n});\nset.should.be.instanceof(meangirls.TwoPSet);",
      "err": {},
      "isRoot": false,
      "uuid": "69fb0805-5de4-4cc3-99ea-5aef27a09a0f",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain an LWWESet from JSON",
      "fullTitle": "meangirls.parse can obtain an LWWESet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'lww-e-set',\n});\nset.should.be.instanceof(meangirls.LWWESet);",
      "err": {},
      "isRoot": false,
      "uuid": "c9ebf7c7-8234-4987-903e-be3b24c4a7d8",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain an ORSet from JSON",
      "fullTitle": "meangirls.parse can obtain an ORSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'or-set',\n});\nset.should.be.instanceof(meangirls.ORSet);",
      "err": {},
      "isRoot": false,
      "uuid": "597ea642-f0f4-4bc7-9bf0-66677c200122",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "can obtain an MCSet from JSON",
      "fullTitle": "meangirls.parse can obtain an MCSet from JSON",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'mc-set',\n});\nset.should.be.instanceof(meangirls.MCSet);",
      "err": {},
      "isRoot": false,
      "uuid": "5ee1b96a-019b-446c-8926-9571b8dae542",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    },
    {
      "title": "throws TypeError if passed invalid JSON",
      "fullTitle": "meangirls.parse throws TypeError if passed invalid JSON",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "(() => meangirls.parse(/* null */)).should.throw(TypeError);\n(() => meangirls.parse({ type: 'unknown' })).should.throw(TypeError);",
      "err": {},
      "isRoot": false,
      "uuid": "fb6dda08-088b-4252-99b8-74e64a1095eb",
      "parentUUID": "8ed9c087-fa11-46b5-a10b-b37b065d5760",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}