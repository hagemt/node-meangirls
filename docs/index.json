{
  "stats": {
    "suites": 62,
    "tests": 92,
    "passes": 92,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-07T19:23:15.569Z",
    "end": "2021-12-07T19:23:15.606Z",
    "duration": 37,
    "testsRegistered": 92,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fdc45b10-f486-4d0a-8c7f-024945fe711a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5a0d8d74-348b-4977-adf9-d7a7d47cdbac",
          "title": "GCounter",
          "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
          "file": "/test/GCounter.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b8d67d75-9bac-48ee-abef-31864dcdf3f3",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
              "file": "/test/GCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "takes no arguments and starts value at zero",
                  "fullTitle": "GCounter constructor takes no arguments and starts value at zero",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => new GCounter()).should.not.throw();\nnew GCounter().should.have.property('value', 0);",
                  "err": {},
                  "uuid": "d378a738-9f58-49a2-9dc6-d3ad9fd4fb31",
                  "parentUUID": "b8d67d75-9bac-48ee-abef-31864dcdf3f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d378a738-9f58-49a2-9dc6-d3ad9fd4fb31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ed2aeb3-add5-452d-b26f-376f7c6b11c1",
              "title": "#update",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
              "file": "/test/GCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "increments the value of the counter",
                  "fullTitle": "GCounter #update increments the value of the counter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new GCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
                  "err": {},
                  "uuid": "c24bfe06-d305-42cb-8fec-4fb63c101884",
                  "parentUUID": "2ed2aeb3-add5-452d-b26f-376f7c6b11c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns the counter that was modified",
                  "fullTitle": "GCounter #update returns the counter that was modified",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new GCounter();\ncounter.update().should.equal(counter);",
                  "err": {},
                  "uuid": "045512bd-85bf-4cc9-9b7a-c0e509ae5a1a",
                  "parentUUID": "2ed2aeb3-add5-452d-b26f-376f7c6b11c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "accepts any positive Number, defaulting to 1",
                  "fullTitle": "GCounter #update accepts any positive Number, defaulting to 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const r = Math.random();\nconst counter = new GCounter()\ncounter.update(r);\ncounter.should.have.property('value', r);",
                  "err": {},
                  "uuid": "d9ba0ad5-f0a0-45c1-828a-dde1c4aac959",
                  "parentUUID": "2ed2aeb3-add5-452d-b26f-376f7c6b11c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "accepts an \"actor\" Object, defaulting to null",
                  "fullTitle": "GCounter #update accepts an \"actor\" Object, defaulting to null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
                  "err": {},
                  "uuid": "7e3f1360-390e-4ff8-aafa-76d65da883dd",
                  "parentUUID": "2ed2aeb3-add5-452d-b26f-376f7c6b11c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "does not accept negative Numbers, +/-Infinity, nor NaN",
                  "fullTitle": "GCounter #update does not accept negative Numbers, +/-Infinity, nor NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new GCounter();\n(() => counter.update(-Math.random())).should.throw(Error);\n(() => counter.update(+Infinity)).should.throw(Error);\n(() => counter.update(-Infinity)).should.throw(Error);\n(() => counter.update(NaN)).should.throw(Error);",
                  "err": {},
                  "uuid": "ba588bf5-3734-4d79-823a-05084802ee4a",
                  "parentUUID": "2ed2aeb3-add5-452d-b26f-376f7c6b11c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c24bfe06-d305-42cb-8fec-4fb63c101884",
                "045512bd-85bf-4cc9-9b7a-c0e509ae5a1a",
                "d9ba0ad5-f0a0-45c1-828a-dde1c4aac959",
                "7e3f1360-390e-4ff8-aafa-76d65da883dd",
                "ba588bf5-3734-4d79-823a-05084802ee4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22de7d82-4035-4ca7-80a2-be75396588e7",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
              "file": "/test/GCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "allows use of JSON as a wire protocol",
                  "fullTitle": "GCounter static allows use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new GCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = GCounter.fromJSON(GCounter.toJSON(one));\none.should.have.property('value', two.value);",
                  "err": {},
                  "uuid": "98af5dff-be06-4d78-971a-feda3d93262d",
                  "parentUUID": "22de7d82-4035-4ca7-80a2-be75396588e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b4c909fe-01a0-4a95-91cb-57aeab7fd05d",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
                  "file": "/test/GCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a GCounter Object",
                      "fullTitle": "GCounter static fromJSON returns a GCounter Object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const json = { e: { test: Math.random() }, type: 'g-counter' };\nGCounter.fromJSON(json).should.have.property('value', json.e.test);",
                      "err": {},
                      "uuid": "5d5c0cee-3e67-494f-942d-f7dcb4b501c7",
                      "parentUUID": "b4c909fe-01a0-4a95-91cb-57aeab7fd05d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if given invalid JSON",
                      "fullTitle": "GCounter static fromJSON throws if given invalid JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => GCounter.fromJSON()).should.throw();\n(() => GCounter.fromJSON({ e: unsafe })).should.throw();",
                      "err": {},
                      "uuid": "2dcfebe2-47fb-4179-8f41-0477e95e27e5",
                      "parentUUID": "b4c909fe-01a0-4a95-91cb-57aeab7fd05d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5d5c0cee-3e67-494f-942d-f7dcb4b501c7",
                    "2dcfebe2-47fb-4179-8f41-0477e95e27e5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d91cf745-3d6c-41ed-9ac1-c7eae3d42ec5",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
                  "file": "/test/GCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines two GCounters, passed as arguments",
                      "fullTitle": "GCounter static merge combines two GCounters, passed as arguments",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new GCounter();\nconst two = new GCounter();\none.update(1, 'one');\ntwo.update(2, 'two');\nconst three = GCounter.merge(one, two);\nthree.should.be.instanceof(GCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 3);",
                      "err": {},
                      "uuid": "c4aaede7-1667-4e60-9ac9-99ce6a8df32d",
                      "parentUUID": "d91cf745-3d6c-41ed-9ac1-c7eae3d42ec5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw if either argument is not a GCounter",
                      "fullTitle": "GCounter static merge will throw if either argument is not a GCounter",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new GCounter();\nconst two = new GCounter();\n(() => GCounter.merge(one, null)).should.throw();\n(() => GCounter.merge(null, two)).should.throw();",
                      "err": {},
                      "uuid": "bc14df80-9ca7-44b3-a6d4-83e89086d04e",
                      "parentUUID": "d91cf745-3d6c-41ed-9ac1-c7eae3d42ec5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c4aaede7-1667-4e60-9ac9-99ce6a8df32d",
                    "bc14df80-9ca7-44b3-a6d4-83e89086d04e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4733ca5b-e829-47a1-a954-e8db479ff2b2",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GCounter.spec.js",
                  "file": "/test/GCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a JSON Object",
                      "fullTitle": "GCounter static toJSON returns a JSON Object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const counter = new GCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\nconst json = GCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\te: { one: 1, two: 2 },\n\ttype: 'g-counter',\n});",
                      "err": {},
                      "uuid": "5a6e9e50-6a32-426c-8491-89f1a7524516",
                      "parentUUID": "4733ca5b-e829-47a1-a954-e8db479ff2b2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5a6e9e50-6a32-426c-8491-89f1a7524516"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "98af5dff-be06-4d78-971a-feda3d93262d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d1861988-6e86-4a5c-b2ea-c98883bed0f0",
          "title": "GSet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
          "file": "/test/GSet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "61f52ff1-bdc0-443e-b0d5-7fb7360c318b",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates a Set-like Object",
                  "fullTitle": "GSet constructor creates a Set-like Object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new GSet().should.have.property('size', 0);\nconst array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new GSet(...array)).should.deepEqual(array);",
                  "err": {},
                  "uuid": "a86d0aec-950f-4991-a0af-635b7e5df3a3",
                  "parentUUID": "61f52ff1-bdc0-443e-b0d5-7fb7360c318b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a86d0aec-950f-4991-a0af-635b7e5df3a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ca863c8-115a-4b20-8edf-bec3a4f6af04",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns true/false, indicating set membership",
                  "fullTitle": "GSet #contains returns true/false, indicating set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new GSet(1); // singleton\nset.contains(1).should.equal(true);\nset.contains(0).should.equal(false);",
                  "err": {},
                  "uuid": "8e2434cf-4458-478b-8e5e-4de7a1a9a2f0",
                  "parentUUID": "9ca863c8-115a-4b20-8edf-bec3a4f6af04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e2434cf-4458-478b-8e5e-4de7a1a9a2f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d58d9f60-f5f8-4b47-823b-9b9cf958aac5",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "adds an element and returns the set modified",
                  "fullTitle": "GSet #insert adds an element and returns the set modified",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new GSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
                  "err": {},
                  "uuid": "6f109497-e0fb-4cd6-ac56-3b5e2282611f",
                  "parentUUID": "d58d9f60-f5f8-4b47-823b-9b9cf958aac5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f109497-e0fb-4cd6-ac56-3b5e2282611f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afde3c5d-7612-4662-9b19-789d8b841409",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "throws if and only if the GSet contains said element",
                  "fullTitle": "GSet #remove throws if and only if the GSet contains said element",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new GSet(1); // singleton\nset.remove(0).should.equal(set); // no-op\n(() => set.remove(1)).should.throw();",
                  "err": {},
                  "uuid": "d6e70c16-0388-4209-96d6-30e199bc4a72",
                  "parentUUID": "afde3c5d-7612-4662-9b19-789d8b841409",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6e70c16-0388-4209-96d6-30e199bc4a72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35d73e26-a51e-4036-b392-46e59d3ace4b",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
              "file": "/test/GSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "GSet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements, type: 'g-set' }; // holds 0-9\nGSet.toJSON(GSet.fromJSON(json)).should.deepEqual(json);",
                  "err": {},
                  "uuid": "dc2ec2e1-29d1-4fe6-b7af-54432e159af0",
                  "parentUUID": "35d73e26-a51e-4036-b392-46e59d3ace4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b185fb26-c008-4b08-a85b-ba0dfc70c289",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
                  "file": "/test/GSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a GSet from JSON",
                      "fullTitle": "GSet static fromJSON returns a GSet from JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = GSet.fromJSON({ e: elements });\nset.should.be.instanceof(GSet);\nset.should.have.property('size', 10);\nArray.from(set).should.deepEqual(elements);",
                      "err": {},
                      "uuid": "3d59dbb4-f311-4f41-839b-4fbf9ca4bcea",
                      "parentUUID": "b185fb26-c008-4b08-a85b-ba0dfc70c289",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3d59dbb4-f311-4f41-839b-4fbf9ca4bcea"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0a86f5ff-e934-4ad2-9168-54c7dfe7d717",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
                  "file": "/test/GSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns JSON from a GSet",
                      "fullTitle": "GSet static toJSON returns JSON from a GSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = GSet.toJSON(new GSet(...elements));\njson.should.be.instanceof(Object);\njson.should.deepEqual({ e: elements, type: 'g-set' });",
                      "err": {},
                      "uuid": "055b00cf-e531-4d84-927d-d43e0f2a2d2d",
                      "parentUUID": "0a86f5ff-e934-4ad2-9168-54c7dfe7d717",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "055b00cf-e531-4d84-927d-d43e0f2a2d2d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "43d7f864-7dfc-4ca2-8c35-4067418cc335",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/GSet.spec.js",
                  "file": "/test/GSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a new GSet that combines two GSets",
                      "fullTitle": "GSet static merge returns a new GSet that combines two GSets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new GSet(1); // singleton\nconst two = new GSet(2); // singleton\nconst three = GSet.merge(one, two);\nthree.should.be.instanceof(GSet);\nthree.should.have.property('size', 2);\nArray.from(three).should.deepEqual([1, 2]);",
                      "err": {},
                      "uuid": "4bdea4f1-68f2-4623-b395-fb66bc327274",
                      "parentUUID": "43d7f864-7dfc-4ca2-8c35-4067418cc335",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws an Error if passed any non-GSet",
                      "fullTitle": "GSet static merge throws an Error if passed any non-GSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new GSet();\n(() => GSet.merge(set, null)).should.throw();\n(() => GSet.merge(null, set)).should.throw();",
                      "err": {},
                      "uuid": "f455c257-4f08-465b-9d60-c82f69dd44de",
                      "parentUUID": "43d7f864-7dfc-4ca2-8c35-4067418cc335",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4bdea4f1-68f2-4623-b395-fb66bc327274",
                    "f455c257-4f08-465b-9d60-c82f69dd44de"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "dc2ec2e1-29d1-4fe6-b7af-54432e159af0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f367355f-bfd6-4c72-8157-709b92ef57a4",
          "title": "LWWESet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
          "file": "/test/LWWESet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1bccf17f-0eef-4eee-9882-145b8fe05412",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an empty Set-like object",
                  "fullTitle": "LWWESet constructor creates an empty Set-like object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.from(new LWWESet()).should.deepEqual([]);",
                  "err": {},
                  "uuid": "387c1c32-6646-46f1-b59f-cfb794597aaf",
                  "parentUUID": "1bccf17f-0eef-4eee-9882-145b8fe05412",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "perfers additions (a) over removals (r)",
                  "fullTitle": "LWWESet constructor perfers additions (a) over removals (r)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new LWWESet().should.have.property('bias', 'a');\n(() => new LWWESet({ bias: 'r' })).should.throw();",
                  "err": {},
                  "uuid": "b9336fbf-8c36-4de0-9c9a-c8eecf05ebf6",
                  "parentUUID": "1bccf17f-0eef-4eee-9882-145b8fe05412",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can also be built from options and an initializer list",
                  "fullTitle": "LWWESet constructor can also be built from options and an initializer list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = { bias: 'a', zero: new Date() }; // defaults\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new LWWESet(options, ...elements);\nArray.from(set).should.deepEqual(elements);",
                  "err": {},
                  "uuid": "994a5541-b08e-4180-a90a-e685e0e9e261",
                  "parentUUID": "1bccf17f-0eef-4eee-9882-145b8fe05412",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "387c1c32-6646-46f1-b59f-cfb794597aaf",
                "b9336fbf-8c36-4de0-9c9a-c8eecf05ebf6",
                "994a5541-b08e-4180-a90a-e685e0e9e261"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a95c7b9-265a-4cfd-963f-302fa09db763",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "determines set membership",
                  "fullTitle": "LWWESet #contains determines set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new LWWESet().contains(0).should.equal(false); // never added, nor removed\nconst options = { zero: new Date(0) }; // use default bias, custom zero point\nnew LWWESet(null, 0).contains(0).should.equal(true); // default zero: new Date()\nnew LWWESet(options, 0).remove(0, options.zero).contains(0).should.equal(true);\nnew LWWESet(options, 0).remove(0, new Date(1)).contains(0).should.equal(false);",
                  "err": {},
                  "uuid": "23767349-c960-4c80-a343-e6ca5c3735f4",
                  "parentUUID": "9a95c7b9-265a-4cfd-963f-302fa09db763",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23767349-c960-4c80-a343-e6ca5c3735f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adff5cf7-e4b2-417f-94ee-638b614cd958",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates set membership",
                  "fullTitle": "LWWESet #insert updates set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new LWWESet(null, 0);\nset.insert(0).insert(1).should.equal(set);\nArray.from(set).should.deepEqual([0, 1]);",
                  "err": {},
                  "uuid": "92e02340-7ee1-4a5d-9bea-d763555abc2f",
                  "parentUUID": "adff5cf7-e4b2-417f-94ee-638b614cd958",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92e02340-7ee1-4a5d-9bea-d763555abc2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a42d0b0e-1876-4e11-b39a-983f4b4437d6",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates set membership",
                  "fullTitle": "LWWESet #remove updates set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = { zero: new Date(0) };\nconst set = new LWWESet(options, 0, 1).remove(1, new Date(1));\nset.remove(2).should.equal(set); // set remains singleton\nArray.from(set).should.deepEqual([0]);",
                  "err": {},
                  "uuid": "900fa55c-ad73-48e9-aba2-93b77a89cb2e",
                  "parentUUID": "a42d0b0e-1876-4e11-b39a-983f4b4437d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "900fa55c-ad73-48e9-aba2-93b77a89cb2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ec36ebd-0fe6-413e-8f23-4ad0c8135eab",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
              "file": "/test/LWWESet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "LWWESet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e, +new Date()]);\nconst json = { bias: 'a', e, type: 'lww-e-set' };\nLWWESet.toJSON(LWWESet.fromJSON(json)).should.deepEqual(json);",
                  "err": {},
                  "uuid": "b9459749-3bf4-4b7c-a83b-a99fdf99bc48",
                  "parentUUID": "5ec36ebd-0fe6-413e-8f23-4ad0c8135eab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "1a39e791-eecb-43cf-a23d-95ba5498de60",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
                  "file": "/test/LWWESet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "converts JSON into a new LWWESet",
                      "fullTitle": "LWWESet static fromJSON converts JSON into a new LWWESet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst e = elements.map(e => [e]); // added at same t=zero\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual(elements);",
                      "err": {},
                      "uuid": "c33a4251-e8ae-4e21-a996-340ba1f03e19",
                      "parentUUID": "1a39e791-eecb-43cf-a23d-95ba5498de60",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "properly handles additions and removals",
                      "fullTitle": "LWWESet static fromJSON properly handles additions and removals",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const e = [[0, 0, 0], [1, 1, 2], [2, 2, 1]];\nconst set = LWWESet.fromJSON({ bias: 'a', e, type: 'lww-e-set' });\nArray.from(set).should.deepEqual([0, 2]);",
                      "err": {},
                      "uuid": "1122f599-52df-42b8-8e8a-11c6281c7a04",
                      "parentUUID": "1a39e791-eecb-43cf-a23d-95ba5498de60",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw if given invalid JSON",
                      "fullTitle": "LWWESet static fromJSON will throw if given invalid JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const [bias, type] = ['a', 'lww-e-set']; // valid\nconst invalid = (e = null) => ({ bias, e, type });\n(() => LWWESet.fromJSON(invalid())).should.throw();\n(() => LWWESet.fromJSON(invalid([[]]))).should.throw();\n(() => LWWESet.fromJSON(invalid([null]))).should.throw();",
                      "err": {},
                      "uuid": "df17b481-528a-46b2-9a9c-96f5be048b10",
                      "parentUUID": "1a39e791-eecb-43cf-a23d-95ba5498de60",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c33a4251-e8ae-4e21-a996-340ba1f03e19",
                    "1122f599-52df-42b8-8e8a-11c6281c7a04",
                    "df17b481-528a-46b2-9a9c-96f5be048b10"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "38a36112-84e0-4535-9696-c5d96dd1de4e",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
                  "file": "/test/LWWESet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines exactly two LWWESets",
                      "fullTitle": "LWWESet static merge combines exactly two LWWESets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1);\nconst two = new LWWESet(options, 2);\nconst three = LWWESet.merge(null, one, two);\nthree.should.be.instanceof(LWWESet);\nArray.from(three).should.deepEqual([1, 2]);",
                      "err": {},
                      "uuid": "265adaa4-5cf7-4921-abb7-dda9e136ed87",
                      "parentUUID": "38a36112-84e0-4535-9696-c5d96dd1de4e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "properly handles additions and removals",
                      "fullTitle": "LWWESet static merge properly handles additions and removals",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { zero: new Date(0) };\nconst one = new LWWESet(options, 1, 2).remove(2, new Date(0));\nconst two = new LWWESet(options, 1).remove(1, new Date(1));\nArray.from(LWWESet.merge(null, one, two)).should.deepEqual([2]);",
                      "err": {},
                      "uuid": "9457f92e-b093-40fc-b6d5-37c6344df157",
                      "parentUUID": "38a36112-84e0-4535-9696-c5d96dd1de4e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "follows last-write-wins sematics",
                      "fullTitle": "LWWESet static merge follows last-write-wins sematics",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new LWWESet({ zero: new Date(1) }, 0);\nconst two = new LWWESet({ zero: new Date(0) }, 0);\none.remove(0, new Date(1)).contains(0).should.equal(true);\ntwo.remove(0, new Date(2)).contains(0).should.equal(false);\nLWWESet.merge(null, one, two).contains(0).should.equal(false);\nLWWESet.merge(null, two, one).contains(0).should.equal(false);",
                      "err": {},
                      "uuid": "98537cd8-db2e-4c55-a7d2-becfc7964b6c",
                      "parentUUID": "38a36112-84e0-4535-9696-c5d96dd1de4e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if either argument is not an LWWESet",
                      "fullTitle": "LWWESet static merge throws if either argument is not an LWWESet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new LWWESet();\n(() => LWWESet.merge(null, set, null)).should.throw();\n(() => LWWESet.merge(null, null, set)).should.throw();",
                      "err": {},
                      "uuid": "b72a2291-a7e5-47d3-b5ab-2a7c50899bc6",
                      "parentUUID": "38a36112-84e0-4535-9696-c5d96dd1de4e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "265adaa4-5cf7-4921-abb7-dda9e136ed87",
                    "9457f92e-b093-40fc-b6d5-37c6344df157",
                    "98537cd8-db2e-4c55-a7d2-becfc7964b6c",
                    "b72a2291-a7e5-47d3-b5ab-2a7c50899bc6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "27ec1492-3fbe-4ca0-b34c-2357d632da96",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/LWWESet.spec.js",
                  "file": "/test/LWWESet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "converts a LWWESet into JSON",
                      "fullTitle": "LWWESet static toJSON converts a LWWESet into JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new LWWESet();\nset.insert(0, new Date(0));\nset.remove(0, new Date(0));\nconst json = LWWESet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = [[0, 0, 0]]; // both added and removed 0 at t=0\njson.should.deepEqual({ bias: 'a', e, type: 'lww-e-set' });",
                      "err": {},
                      "uuid": "817cab88-3dce-4ff3-b2d5-bd349bbe1fbc",
                      "parentUUID": "27ec1492-3fbe-4ca0-b34c-2357d632da96",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "817cab88-3dce-4ff3-b2d5-bd349bbe1fbc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "b9459749-3bf4-4b7c-a83b-a99fdf99bc48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c1809be4-99f5-4b72-a587-6f0167532c42",
          "title": "MCSet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
          "file": "/test/MCSet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ec0e1927-ff89-449f-a689-035bb63bc1d8",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an empty Set-like Object",
                  "fullTitle": "MCSet constructor creates an empty Set-like Object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.from(new MCSet()).should.deepEqual([]);",
                  "err": {},
                  "uuid": "3291419f-4900-4571-b047-9af86f3f6d29",
                  "parentUUID": "ec0e1927-ff89-449f-a689-035bb63bc1d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "acts very similar to the Set constructor",
                  "fullTitle": "MCSet constructor acts very similar to the Set constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const array = Array.from({ length: 10 }, (_, i) => i);\nArray.from(new MCSet(...array)).should.deepEqual(array);",
                  "err": {},
                  "uuid": "b556de07-5762-45f3-81f9-4522b16f0c48",
                  "parentUUID": "ec0e1927-ff89-449f-a689-035bb63bc1d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3291419f-4900-4571-b047-9af86f3f6d29",
                "b556de07-5762-45f3-81f9-4522b16f0c48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c5759b3d-fe11-4549-ae91-aba0224c1c38",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "determines set membership",
                  "fullTitle": "MCSet #contains determines set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new MCSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
                  "err": {},
                  "uuid": "7fb80a01-e69e-455c-9b71-b3538c3209c6",
                  "parentUUID": "c5759b3d-fe11-4549-ae91-aba0224c1c38",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fb80a01-e69e-455c-9b71-b3538c3209c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0eef4a1-5ae1-4c61-b412-43463e23f3a5",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "adds elements to the set",
                  "fullTitle": "MCSet #insert adds elements to the set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new MCSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);\nset.insert(0).insert(1);\nArray.from(set).should.deepEqual([0, 1]);",
                  "err": {},
                  "uuid": "3c1f8081-d718-4b86-aba6-b77c0e1aeacf",
                  "parentUUID": "c0eef4a1-5ae1-4c61-b412-43463e23f3a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c1f8081-d718-4b86-aba6-b77c0e1aeacf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "19b8fe88-dfe5-4290-b7ff-afc98493efb5",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removes elements from a set",
                  "fullTitle": "MCSet #remove removes elements from a set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new MCSet(0, 1);\nArray.from(set).should.deepEqual([0, 1]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([1]);\nset.remove(0).remove(1).remove(2);\nArray.from(set).should.deepEqual([]);",
                  "err": {},
                  "uuid": "4300934e-db46-410f-8c9f-69058afa1b89",
                  "parentUUID": "19b8fe88-dfe5-4290-b7ff-afc98493efb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4300934e-db46-410f-8c9f-69058afa1b89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62430c7b-3713-4830-a113-71f56d601c03",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
              "file": "/test/MCSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "MCSet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nMCSet.toJSON(MCSet.fromJSON(json)).should.deepEqual(json);",
                  "err": {},
                  "uuid": "ae01a5a7-51fc-4782-8feb-06c658bbbee2",
                  "parentUUID": "62430c7b-3713-4830-a113-71f56d601c03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "e6e272f8-bc85-4f53-a226-784e5c8e5b4c",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
                  "file": "/test/MCSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a new MCSet from JSON",
                      "fullTitle": "MCSet static fromJSON returns a new MCSet from JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { e: elements.map(e => [e, 1]), type: 'mc-set' };\nconst set = MCSet.fromJSON(json);\nset.should.be.instanceof(MCSet);\nArray.from(set).should.deepEqual(elements);",
                      "err": {},
                      "uuid": "288a382c-3b84-4cdc-a0ae-701a1bd1110b",
                      "parentUUID": "e6e272f8-bc85-4f53-a226-784e5c8e5b4c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw if given invalid JSON",
                      "fullTitle": "MCSet static fromJSON will throw if given invalid JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const invalid = [[0, 1/2]]; // non-Integer count\n(() => MCSet.fromJSON({ e: invalid })).should.throw();",
                      "err": {},
                      "uuid": "8e5d9d51-7649-40f9-bc0f-7e3b1ccaba75",
                      "parentUUID": "e6e272f8-bc85-4f53-a226-784e5c8e5b4c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "288a382c-3b84-4cdc-a0ae-701a1bd1110b",
                    "8e5d9d51-7649-40f9-bc0f-7e3b1ccaba75"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6fca35bc-f6d3-4f82-9159-65bcc47e8de9",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
                  "file": "/test/MCSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines two MCSets, returning a new MCSet",
                      "fullTitle": "MCSet static merge combines two MCSets, returning a new MCSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new MCSet(1); // singleton\nconst two = new MCSet(2); // singleton\nconst three = MCSet.merge(one, two);\nthree.should.be.instanceof(MCSet);\nArray.from(three).should.deepEqual([1, 2]);",
                      "err": {},
                      "uuid": "489c753a-d342-4b69-82c8-63d6d63fceed",
                      "parentUUID": "6fca35bc-f6d3-4f82-9159-65bcc47e8de9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if either argument is not an MCSet",
                      "fullTitle": "MCSet static merge throws if either argument is not an MCSet",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new MCSet();\n(() => MCSet.merge(set, null)).should.throw();\n(() => MCSet.merge(null, set)).should.throw();",
                      "err": {},
                      "uuid": "173f8e96-03da-4afe-8ee5-80f9584e215a",
                      "parentUUID": "6fca35bc-f6d3-4f82-9159-65bcc47e8de9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "489c753a-d342-4b69-82c8-63d6d63fceed",
                    "173f8e96-03da-4afe-8ee5-80f9584e215a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "337ab824-9cf5-4937-a005-250a961d563d",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/MCSet.spec.js",
                  "file": "/test/MCSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns JSON from an MCSet",
                      "fullTitle": "MCSet static toJSON returns JSON from an MCSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = MCSet.toJSON(new MCSet(...elements))\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, 1]);\njson.should.deepEqual({ e, type: 'mc-set' });",
                      "err": {},
                      "uuid": "493da7e5-34a8-465b-a32f-1f78cfbad3ce",
                      "parentUUID": "337ab824-9cf5-4937-a005-250a961d563d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "493da7e5-34a8-465b-a32f-1f78cfbad3ce"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "ae01a5a7-51fc-4782-8feb-06c658bbbee2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "abeb2958-caf9-45ba-8fc6-d663cabd6d23",
          "title": "ORSet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
          "file": "/test/ORSet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "704e721e-d74a-41cc-9ee6-bfe507fc04b9",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an empty Set-like object",
                  "fullTitle": "ORSet constructor creates an empty Set-like object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Array.from(new ORSet()).should.deepEqual([]);",
                  "err": {},
                  "uuid": "a9b9d6e1-38f5-4a6b-aa46-3dd5235d4138",
                  "parentUUID": "704e721e-d74a-41cc-9ee6-bfe507fc04b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9b9d6e1-38f5-4a6b-aa46-3dd5235d4138"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83d8a8d6-939b-4092-8722-534d594be1ec",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "determines set membership",
                  "fullTitle": "ORSet #contains determines set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet(null, 0).insert(1).remove(1);\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);\nset.contains(2).should.equal(false);",
                  "err": {},
                  "uuid": "ae37f7ce-62e2-4505-a358-957deb5eb99a",
                  "parentUUID": "83d8a8d6-939b-4092-8722-534d594be1ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae37f7ce-62e2-4505-a358-957deb5eb99a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8225b9ba-58b5-4e70-b79a-0a7cf9149f80",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates set membership",
                  "fullTitle": "ORSet #insert updates set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet();\nArray.from(set).should.deepEqual([]);\nset.insert(0).should.equal(set);\nArray.from(set).should.deepEqual([0]);",
                  "err": {},
                  "uuid": "fe6fd20f-1597-406a-97fd-d9fd26729507",
                  "parentUUID": "8225b9ba-58b5-4e70-b79a-0a7cf9149f80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "supports multiple tags",
                  "fullTitle": "ORSet #insert supports multiple tags",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet();\nset.insert(0, 'a'); // tag: Symbol(0)\nArray.from(set).should.deepEqual([0]);\nset.insert(0, 'b'); // tag: Symbol(1)\nArray.from(set).should.deepEqual([0]);",
                  "err": {},
                  "uuid": "1fb2c688-273b-4975-8447-06cbf032d206",
                  "parentUUID": "8225b9ba-58b5-4e70-b79a-0a7cf9149f80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe6fd20f-1597-406a-97fd-d9fd26729507",
                "1fb2c688-273b-4975-8447-06cbf032d206"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c052bb43-5642-4199-877a-9134a19e7215",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "updates set membership",
                  "fullTitle": "ORSet #remove updates set membership",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet(null, 0);\nArray.from(set).should.deepEqual([0]);\nset.remove(0).should.equal(set);\nArray.from(set).should.deepEqual([]);",
                  "err": {},
                  "uuid": "7a43417b-3f16-49fd-9862-da01bbac0081",
                  "parentUUID": "c052bb43-5642-4199-877a-9134a19e7215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "supports multiple tags",
                  "fullTitle": "ORSet #remove supports multiple tags",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new ORSet(null, 0).insert(1, 'a').insert(1, 'a');\nset.remove(0).remove(1, 'a').remove(2);\nArray.from(set).should.deepEqual([]);",
                  "err": {},
                  "uuid": "4a6ea4b6-d908-421f-80ac-d1413c2e8389",
                  "parentUUID": "c052bb43-5642-4199-877a-9134a19e7215",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a43417b-3f16-49fd-9862-da01bbac0081",
                "4a6ea4b6-d908-421f-80ac-d1413c2e8389"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5eb3f4b9-f317-4406-9d3a-ccef8a3db815",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
              "file": "/test/ORSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "ORSet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = ORSet.toJSON(new ORSet(null, ...elements));\nArray.from(ORSet.fromJSON(json)).should.deepEqual(elements);",
                  "err": {},
                  "uuid": "4229cbb0-203e-4880-ba65-884f407c22c7",
                  "parentUUID": "5eb3f4b9-f317-4406-9d3a-ccef8a3db815",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "49ff551b-c87a-49e2-8794-a351ae63f0e7",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
                  "file": "/test/ORSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "converts JSON into a new ORSet",
                      "fullTitle": "ORSet static fromJSON converts JSON into a new ORSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = ORSet.fromJSON({\n\te: [[0], [1, ['a']], [2, ['a'], ['a']], [3, ['a', 'b'], ['b', 'c']]],\n\ttype: 'or-set',\n});\nset.should.be.instanceof(ORSet);\nArray.from(set).should.deepEqual([0, 1, 3]);",
                      "err": {},
                      "uuid": "f021ee3c-f7ed-4363-abfa-ad61043ded22",
                      "parentUUID": "49ff551b-c87a-49e2-8794-a351ae63f0e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw, if the JSON is invalid",
                      "fullTitle": "ORSet static fromJSON will throw, if the JSON is invalid",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const invalid = (e = null) => ({ e, type: 'or-set' });\n(() => ORSet.fromJSON(invalid())).should.throw();\n(() => ORSet.fromJSON(invalid([[]]))).should.throw();\n(() => ORSet.fromJSON(invalid([null]))).should.throw();",
                      "err": {},
                      "uuid": "85c9603f-1c5c-407c-9a6c-bd9e9731bb10",
                      "parentUUID": "49ff551b-c87a-49e2-8794-a351ae63f0e7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f021ee3c-f7ed-4363-abfa-ad61043ded22",
                    "85c9603f-1c5c-407c-9a6c-bd9e9731bb10"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5a3038ae-000e-4187-b35b-8f46a1475d61",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
                  "file": "/test/ORSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines exactly two ORSets",
                      "fullTitle": "ORSet static merge combines exactly two ORSets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new ORSet().insert(1).remove(1);\nconst two = new ORSet().insert(2).remove(2);\nconst three = ORSet.merge(null, one, two);\nthree.should.be.instanceof(ORSet);\nArray.from(three).should.deepEqual([]);",
                      "err": {},
                      "uuid": "100a23ef-200f-49e0-be15-0c7907d2244a",
                      "parentUUID": "5a3038ae-000e-4187-b35b-8f46a1475d61",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if either argument is not an ORSet",
                      "fullTitle": "ORSet static merge throws if either argument is not an ORSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new ORSet();\n(() => ORSet.merge(null, set, null)).should.throw();\n(() => ORSet.merge(null, null, set)).should.throw();",
                      "err": {},
                      "uuid": "b138e953-c88d-4a5f-8720-326470adfaf4",
                      "parentUUID": "5a3038ae-000e-4187-b35b-8f46a1475d61",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "100a23ef-200f-49e0-be15-0c7907d2244a",
                    "b138e953-c88d-4a5f-8720-326470adfaf4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "48eb4b89-407b-463a-8ed3-3cca9e53eb18",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/ORSet.spec.js",
                  "file": "/test/ORSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "converts a ORSet into JSON",
                      "fullTitle": "ORSet static toJSON converts a ORSet into JSON",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new ORSet(null, ...elements);\nfor (const e of elements) set.remove(e);\nconst json = ORSet.toJSON(set);\njson.should.be.instanceof(Object);\nconst e = elements.map(e => [e, ['0'], ['0']]);\njson.should.deepEqual({ e, type: 'or-set' });",
                      "err": {},
                      "uuid": "72fea07e-b0bd-420f-a6c1-480255181a38",
                      "parentUUID": "48eb4b89-407b-463a-8ed3-3cca9e53eb18",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "72fea07e-b0bd-420f-a6c1-480255181a38"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "4229cbb0-203e-4880-ba65-884f407c22c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "88b5b6fc-cc7e-48a7-8dcd-422f01fa5216",
          "title": "PNCounter",
          "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
          "file": "/test/PNCounter.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "78360821-1044-4833-a1d0-ad9259813357",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
              "file": "/test/PNCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "takes no arguments and starts value at zero",
                  "fullTitle": "PNCounter constructor takes no arguments and starts value at zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => new PNCounter()).should.not.throw();\nnew PNCounter().should.have.property('value', 0);",
                  "err": {},
                  "uuid": "b4909a71-9328-4e96-a480-24b62658b64c",
                  "parentUUID": "78360821-1044-4833-a1d0-ad9259813357",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4909a71-9328-4e96-a480-24b62658b64c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eea277a3-de75-4b93-b8e5-8536a5bfbcc7",
              "title": "#update",
              "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
              "file": "/test/PNCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "increments the value of the counter",
                  "fullTitle": "PNCounter #update increments the value of the counter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new PNCounter();\ncounter.update();\ncounter.should.have.property('value', 1);",
                  "err": {},
                  "uuid": "c22c5c53-6ac7-4587-84c0-ddd37c650d0b",
                  "parentUUID": "eea277a3-de75-4b93-b8e5-8536a5bfbcc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns the counter that was modified",
                  "fullTitle": "PNCounter #update returns the counter that was modified",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new PNCounter();\ncounter.update().should.equal(counter);",
                  "err": {},
                  "uuid": "9869f6a4-0b2b-4ff0-875f-061f8b32a30f",
                  "parentUUID": "eea277a3-de75-4b93-b8e5-8536a5bfbcc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "accepts any Number, defaulting to 1",
                  "fullTitle": "PNCounter #update accepts any Number, defaulting to 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const positive = +Math.random();\nconst negative = -Math.random();\nconst counter = new PNCounter();\ncounter.update(negative);\ncounter.should.have.property('value', negative);\ncounter.update(positive);\ncounter.should.have.property('value', positive + negative);",
                  "err": {},
                  "uuid": "9cb664bb-0d38-402f-a135-1e9cd57fa340",
                  "parentUUID": "eea277a3-de75-4b93-b8e5-8536a5bfbcc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "accepts an \"actor\" Object, defaulting to null",
                  "fullTitle": "PNCounter #update accepts an \"actor\" Object, defaulting to null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(2, 'two');\ncounter.should.have.property('value', 3);",
                  "err": {},
                  "uuid": "a960526d-8c69-433f-9cdb-679d93a8429f",
                  "parentUUID": "eea277a3-de75-4b93-b8e5-8536a5bfbcc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "does not accept +/-Infinity, nor NaN",
                  "fullTitle": "PNCounter #update does not accept +/-Infinity, nor NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = new PNCounter();\n(() => counter.update(+Infinity)).should.throw();\n(() => counter.update(-Infinity)).should.throw();\n(() => counter.update(NaN)).should.throw();",
                  "err": {},
                  "uuid": "1316ee13-81e7-422e-a3f1-80fd24f3c5dc",
                  "parentUUID": "eea277a3-de75-4b93-b8e5-8536a5bfbcc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c22c5c53-6ac7-4587-84c0-ddd37c650d0b",
                "9869f6a4-0b2b-4ff0-875f-061f8b32a30f",
                "9cb664bb-0d38-402f-a135-1e9cd57fa340",
                "a960526d-8c69-433f-9cdb-679d93a8429f",
                "1316ee13-81e7-422e-a3f1-80fd24f3c5dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c8b4566-510e-4145-a441-811034c8f6e6",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
              "file": "/test/PNCounter.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "allows use of JSON as a wire protocol",
                  "fullTitle": "PNCounter static allows use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new PNCounter();\nwhile (Math.random() < 0.5) one.update(Math.random());\nconst two = PNCounter.fromJSON(PNCounter.toJSON(one));\none.should.have.property('value', two.value);",
                  "err": {},
                  "uuid": "7cb3e5c5-4529-42e4-bf46-fe7313b39fb2",
                  "parentUUID": "1c8b4566-510e-4145-a441-811034c8f6e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "a115ef54-cac8-4256-a212-207aed84bade",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
                  "file": "/test/PNCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a PNCounter Object",
                      "fullTitle": "PNCounter static fromJSON returns a PNCounter Object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const json = {\n\tp: { one: Math.random(), two: Math.random() },\n\tn: { one: Math.random(), two: Math.random() },\n\ttype: 'pn-counter',\n};\nconst counter = PNCounter.fromJSON(json);\ncounter.should.be.instanceof(PNCounter);\nconst sum1 = json.p.one + json.p.two;\nconst sum2 = json.n.one + json.n.two;\ncounter.should.have.property('value', sum1 - sum2);",
                      "err": {},
                      "uuid": "3f70d9d5-7264-4dcc-b294-7f97473c9957",
                      "parentUUID": "a115ef54-cac8-4256-a212-207aed84bade",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if given invalid JSON",
                      "fullTitle": "PNCounter static fromJSON throws if given invalid JSON",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const unsafe = { null: Number.MIN_VALUE };\n(() => PNCounter.fromJSON()).should.throw();\n(() => PNCounter.fromJSON({ p: unsafe, n: {} })).should.throw();\n(() => PNCounter.fromJSON({ p: {}, n: unsafe })).should.throw();",
                      "err": {},
                      "uuid": "254fe2d5-f6d4-42d8-97bc-4c7afd473d57",
                      "parentUUID": "a115ef54-cac8-4256-a212-207aed84bade",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3f70d9d5-7264-4dcc-b294-7f97473c9957",
                    "254fe2d5-f6d4-42d8-97bc-4c7afd473d57"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8ce42dfe-a500-4ef2-b3a9-0272410669de",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
                  "file": "/test/PNCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines two PNCounters",
                      "fullTitle": "PNCounter static merge combines two PNCounters",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new PNCounter();\nconst two = new PNCounter();\none.update(1, 'positive');\none.update(-2, 'negative');\ntwo.update(-1, 'negative');\ntwo.update(2, 'positive');\nconst three = PNCounter.merge(one, two);\nthree.should.be.instanceof(PNCounter);\nthree.should.not.equal(one);\nthree.should.not.equal(two);\nthree.should.have.property('value', 0);",
                      "err": {},
                      "uuid": "41f9646b-73de-4d14-aeef-93cdf1943372",
                      "parentUUID": "8ce42dfe-a500-4ef2-b3a9-0272410669de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "will throw if either is not a PNCounter",
                      "fullTitle": "PNCounter static merge will throw if either is not a PNCounter",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new PNCounter();\nconst two = new PNCounter();\n(() => PNCounter.merge(one, null)).should.throw();\n(() => PNCounter.merge(null, two)).should.throw();",
                      "err": {},
                      "uuid": "b6e9bf97-a463-47e6-994a-7a5d9ffaa4bc",
                      "parentUUID": "8ce42dfe-a500-4ef2-b3a9-0272410669de",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "41f9646b-73de-4d14-aeef-93cdf1943372",
                    "b6e9bf97-a463-47e6-994a-7a5d9ffaa4bc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "552bc438-0f3c-4161-94fa-8fd174311cba",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/PNCounter.spec.js",
                  "file": "/test/PNCounter.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a JSON Object",
                      "fullTitle": "PNCounter static toJSON returns a JSON Object",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const counter = new PNCounter();\ncounter.update(1, 'one');\ncounter.update(-2, 'two');\nconst json = PNCounter.toJSON(counter);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\tn: { two: 2 },\n\tp: { one: 1 },\n\ttype: 'pn-counter',\n});",
                      "err": {},
                      "uuid": "f4188273-ece7-4ac0-a6cd-56b879f8b45a",
                      "parentUUID": "552bc438-0f3c-4161-94fa-8fd174311cba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f4188273-ece7-4ac0-a6cd-56b879f8b45a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "7cb3e5c5-4529-42e4-bf46-fe7313b39fb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "43fc80dc-aef2-4f5f-9d8d-6ff37054cf8f",
          "title": "TwoPSet",
          "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
          "file": "/test/TwoPSet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "164a6cef-ee50-4aff-8fa0-788177e427a6",
              "title": "constructor",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates an empty Set-like Object",
                  "fullTitle": "TwoPSet constructor creates an empty Set-like Object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "new TwoPSet().should.have.property('size', 0);\nconst elements = Array.from({ length: 10 }, (_, i) => i);\nconst set = new TwoPSet(...elements);\nset.should.have.property('size', elements.length);\nArray.from(set).should.deepEqual(elements);",
                  "err": {},
                  "uuid": "b4846f84-f049-42c9-99d3-68b1f08d3118",
                  "parentUUID": "164a6cef-ee50-4aff-8fa0-788177e427a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4846f84-f049-42c9-99d3-68b1f08d3118"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcb0390a-2ccf-4fe9-9f96-421fb4e0ab7c",
              "title": "#contains",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "determines set membership",
                  "fullTitle": "TwoPSet #contains determines set membership",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new TwoPSet(0); // singleton\nset.contains(0).should.equal(true);\nset.contains(1).should.equal(false);",
                  "err": {},
                  "uuid": "199fe7ca-12f3-487c-bfa3-67aca7bd0a23",
                  "parentUUID": "dcb0390a-2ccf-4fe9-9f96-421fb4e0ab7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "199fe7ca-12f3-487c-bfa3-67aca7bd0a23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cec33ebc-36a6-4428-87f4-e4d9be9c379f",
              "title": "#insert",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add an element to the set",
                  "fullTitle": "TwoPSet #insert add an element to the set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new TwoPSet();\nset.insert(0).should.equal(set);\nset.should.have.property('size', 1);\nset.insert(1).should.have.property('size', 2);\nset.insert(1).should.have.property('size', 2);\nset.insert(2).should.have.property('size', 3);\nArray.from(set).should.deepEqual([0, 1, 2]);",
                  "err": {},
                  "uuid": "e80b8434-c70c-4a1f-bb0e-b8a1650fd46b",
                  "parentUUID": "cec33ebc-36a6-4428-87f4-e4d9be9c379f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e80b8434-c70c-4a1f-bb0e-b8a1650fd46b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b7ca367-85b8-46f2-8783-d3c8adcd8a76",
              "title": "#remove",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "removes an element from the set",
                  "fullTitle": "TwoPSet #remove removes an element from the set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = new TwoPSet();\nset.remove(0).should.equal(set);\nset.should.have.property('size', 0);\nset.insert(0);\nset.should.have.property('size', 1);\nset.remove(0);\nset.should.have.property('size', 0);",
                  "err": {},
                  "uuid": "0ff96561-3ef8-498d-9e04-07cb3696b3b1",
                  "parentUUID": "6b7ca367-85b8-46f2-8783-d3c8adcd8a76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ff96561-3ef8-498d-9e04-07cb3696b3b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e296ebce-a6f7-4fdf-8531-1ac05f61d56b",
              "title": "static",
              "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
              "file": "/test/TwoPSet.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "enables use of JSON as a wire protocol",
                  "fullTitle": "TwoPSet static enables use of JSON as a wire protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nTwoPSet.toJSON(TwoPSet.fromJSON(json)).should.deepEqual(json);",
                  "err": {},
                  "uuid": "8137522a-da45-4841-ad09-d0bbc0c380b6",
                  "parentUUID": "e296ebce-a6f7-4fdf-8531-1ac05f61d56b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "89ca563c-259f-4d05-a462-c34acc04a915",
                  "title": "toJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
                  "file": "/test/TwoPSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns JSON",
                      "fullTitle": "TwoPSet static toJSON returns JSON",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new TwoPSet(1, 2).remove(1);\nconst json = TwoPSet.toJSON(set);\njson.should.be.instanceof(Object);\njson.should.deepEqual({\n\ta: [1, 2],\n\tr: [1],\n\ttype: '2p-set',\n});",
                      "err": {},
                      "uuid": "2613f0d3-a4e9-4369-b96c-8889ed0670d2",
                      "parentUUID": "89ca563c-259f-4d05-a462-c34acc04a915",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2613f0d3-a4e9-4369-b96c-8889ed0670d2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c4add267-2ec6-427f-a71f-f995fa3f51f0",
                  "title": "merge",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
                  "file": "/test/TwoPSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "combines two TwoPSets",
                      "fullTitle": "TwoPSet static merge combines two TwoPSets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const one = new TwoPSet(1, 2).remove(2);\nconst two = new TwoPSet(3, 4).remove(3);\nconst three = TwoPSet.merge(one, two);\nthree.should.be.instanceof(TwoPSet);\nArray.from(three).should.deepEqual([1, 4]);",
                      "err": {},
                      "uuid": "113bd349-2a3d-4161-939e-8a1da37592ce",
                      "parentUUID": "c4add267-2ec6-427f-a71f-f995fa3f51f0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "throws if passed non-TwoPSets",
                      "fullTitle": "TwoPSet static merge throws if passed non-TwoPSets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const set = new TwoPSet();\n(() => TwoPSet.merge(set, null)).should.throw();\n(() => TwoPSet.merge(null, set)).should.throw();",
                      "err": {},
                      "uuid": "0d443154-d08b-41ea-86af-403ed0be5e28",
                      "parentUUID": "c4add267-2ec6-427f-a71f-f995fa3f51f0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "113bd349-2a3d-4161-939e-8a1da37592ce",
                    "0d443154-d08b-41ea-86af-403ed0be5e28"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0a570c85-ef64-4f29-843f-62e5b7d95118",
                  "title": "fromJSON",
                  "fullFile": "/Users/teh/Code/node-meangirls/test/TwoPSet.spec.js",
                  "file": "/test/TwoPSet.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns a TwoPSet",
                      "fullTitle": "TwoPSet static fromJSON returns a TwoPSet",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const elements = Array.from({ length: 10 }, (_, i) => i);\nconst json = { a: elements, r: elements, type: '2p-set' };\nconst set = TwoPSet.fromJSON(json);\nset.should.be.instanceof(TwoPSet);\nset.should.have.property('size', 0);",
                      "err": {},
                      "uuid": "19ef9eb3-79c4-489e-ad06-3300f2c62a4a",
                      "parentUUID": "0a570c85-ef64-4f29-843f-62e5b7d95118",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "19ef9eb3-79c4-489e-ad06-3300f2c62a4a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "8137522a-da45-4841-ad09-d0bbc0c380b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2358e500-c145-4cf0-9438-e87685d2c79f",
          "title": "Global module exports",
          "fullFile": "/Users/teh/Code/node-meangirls/test/meangirls.spec.js",
          "file": "/test/meangirls.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3bed1520-0161-42ff-b984-3a2cb28531b7",
              "title": "meangirls.merge",
              "fullFile": "/Users/teh/Code/node-meangirls/test/meangirls.spec.js",
              "file": "/test/meangirls.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can join two or more GCounters",
                  "fullTitle": "Global module exports meangirls.merge can join two or more GCounters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new meangirls.GCounter().update();\nconst two = new meangirls.GCounter().update();\nconst result = meangirls.merge(gc, one, two);\nresult.should.be.instanceof(meangirls.GCounter);",
                  "err": {},
                  "uuid": "ed988e65-6a2a-4c4d-9308-0600f708a481",
                  "parentUUID": "3bed1520-0161-42ff-b984-3a2cb28531b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can join two or more PNCounters",
                  "fullTitle": "Global module exports meangirls.merge can join two or more PNCounters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new meangirls.PNCounter().update();\nconst two = new meangirls.PNCounter().update();\nconst result = meangirls.merge(pn, one, two);\nresult.should.be.instanceof(meangirls.PNCounter);",
                  "err": {},
                  "uuid": "674f4b35-3d77-4a48-a783-3b7acaae6a30",
                  "parentUUID": "3bed1520-0161-42ff-b984-3a2cb28531b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can join two or more GSets",
                  "fullTitle": "Global module exports meangirls.merge can join two or more GSets",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const one = new meangirls.GSet().insert(1);\nconst two = new meangirls.GSet().insert(2);\nconst result = meangirls.merge(gs, one, two);\nresult.should.be.instanceof(meangirls.GSet);",
                  "err": {},
                  "uuid": "b9a824e2-2da8-4afd-8959-7a943da8ef90",
                  "parentUUID": "3bed1520-0161-42ff-b984-3a2cb28531b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws if passed not exactly one kind of CRDT",
                  "fullTitle": "Global module exports meangirls.merge throws if passed not exactly one kind of CRDT",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => meangirls.merge()).should.throw();\n(() => meangirls.merge(null)).should.throw();\n(() => meangirls.merge(null, gs)).should.throw();\n(() => meangirls.merge(gc, pn, gs)).should.throw();",
                  "err": {},
                  "uuid": "88568170-3b31-4e39-a7bf-1833ac762b8e",
                  "parentUUID": "3bed1520-0161-42ff-b984-3a2cb28531b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed988e65-6a2a-4c4d-9308-0600f708a481",
                "674f4b35-3d77-4a48-a783-3b7acaae6a30",
                "b9a824e2-2da8-4afd-8959-7a943da8ef90",
                "88568170-3b31-4e39-a7bf-1833ac762b8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
              "title": "meangirls.parse",
              "fullFile": "/Users/teh/Code/node-meangirls/test/meangirls.spec.js",
              "file": "/test/meangirls.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can obtain a GCounter from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain a GCounter from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = meangirls.parse({\n\te: {}, // empty\n\ttype: 'g-counter',\n});\ncounter.should.be.instanceof(meangirls.GCounter);",
                  "err": {},
                  "uuid": "2e9ff06b-edf0-4714-b800-55a2c704e017",
                  "parentUUID": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain a PNCounter from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain a PNCounter from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const counter = meangirls.parse({\n\tp: {}, // empty\n\tn: {}, // empty\n\ttype: 'pn-counter',\n});\ncounter.should.be.instanceof(meangirls.PNCounter);",
                  "err": {},
                  "uuid": "098acd8c-e843-4d88-9a51-fc8e51c255f8",
                  "parentUUID": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain a GSet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain a GSet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'g-set',\n});\nset.should.be.instanceof(meangirls.GSet);",
                  "err": {},
                  "uuid": "e76ca536-b449-4f02-a335-2348774335db",
                  "parentUUID": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain a TwoPSet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain a TwoPSet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\ta: [], // empty\n\tr: [], // empty\n\ttype: '2p-set',\n});\nset.should.be.instanceof(meangirls.TwoPSet);",
                  "err": {},
                  "uuid": "2ff43b16-25c0-495e-b716-6a05a4a6d1f3",
                  "parentUUID": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain an LWWESet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain an LWWESet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'lww-e-set',\n});\nset.should.be.instanceof(meangirls.LWWESet);",
                  "err": {},
                  "uuid": "4b319603-6903-4630-8f59-77b02ee6a0f2",
                  "parentUUID": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain an ORSet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain an ORSet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'or-set',\n});\nset.should.be.instanceof(meangirls.ORSet);",
                  "err": {},
                  "uuid": "deb9e86d-9135-4aae-a835-35821dc74aae",
                  "parentUUID": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can obtain an MCSet from JSON",
                  "fullTitle": "Global module exports meangirls.parse can obtain an MCSet from JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const set = meangirls.parse({\n\te: [], // empty\n\ttype: 'mc-set',\n});\nset.should.be.instanceof(meangirls.MCSet);",
                  "err": {},
                  "uuid": "9c188ab6-e8f2-4644-bb49-ef3af4e63351",
                  "parentUUID": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "throws TypeError if passed invalid JSON",
                  "fullTitle": "Global module exports meangirls.parse throws TypeError if passed invalid JSON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(() => meangirls.parse(/* null */)).should.throw(TypeError);\n(() => meangirls.parse({ type: 'unknown' })).should.throw(TypeError);",
                  "err": {},
                  "uuid": "220c6c2a-d503-4c44-80a6-27e9945f1fa0",
                  "parentUUID": "7ecc3fb7-dfce-4417-bc69-341cce038ebd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e9ff06b-edf0-4714-b800-55a2c704e017",
                "098acd8c-e843-4d88-9a51-fc8e51c255f8",
                "e76ca536-b449-4f02-a335-2348774335db",
                "2ff43b16-25c0-495e-b716-6a05a4a6d1f3",
                "4b319603-6903-4630-8f59-77b02ee6a0f2",
                "deb9e86d-9135-4aae-a835-35821dc74aae",
                "9c188ab6-e8f2-4644-bb49-ef3af4e63351",
                "220c6c2a-d503-4c44-80a6-27e9945f1fa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "docs",
        "reportFilename": "index"
      },
      "version": "6.0.1"
    }
  }
}